<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ASP程序代码使用Microsoft.XMLHTTP对象请求https时出错解决</title>
    <url>/2024/09/06/ASP%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%A0%81%E4%BD%BF%E7%94%A8Microsoft-XMLHTTP%E5%AF%B9%E8%B1%A1%E8%AF%B7%E6%B1%82https%E6%97%B6%E5%87%BA%E9%94%99%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>asp启用https以后后台更新内容报错<br><img src="/2024/09/06/ASP%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%A0%81%E4%BD%BF%E7%94%A8Microsoft-XMLHTTP%E5%AF%B9%E8%B1%A1%E8%AF%B7%E6%B1%82https%E6%97%B6%E5%87%BA%E9%94%99%E8%A7%A3%E5%86%B3/20240906-132522.png"></p>
<span id="more"></span>

<p>出错程序代码示例：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">strUrl = <span class="string">&quot;https://www.xxx.com/xxx.asp?id=11&quot;</span></span><br><span class="line"><span class="keyword">dim</span> objXmlHttp</span><br><span class="line"><span class="keyword">set</span> objXmlHttp = <span class="built_in">Server</span>.<span class="built_in">CreateObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>) </span><br><span class="line">objXmlHttp.open <span class="string">&quot;GET&quot;</span>,strUrl,<span class="literal">False</span>        </span><br><span class="line">objXmlHttp.send()</span><br></pre></td></tr></table></figure>
<p>解决：更换Microsoft.XMLHTTP，使用“WinHttp.WinHttpRequest.5.1”，即修改对应程序文件代码：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> objXmlHttp = <span class="built_in">Server</span>.<span class="built_in">CreateObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>改为：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Set</span> objXmlHttp= <span class="built_in">Server</span>.<span class="built_in">CreateObject</span>(<span class="string">&quot;WinHttp.WinHttpRequest.5.1&quot;</span>)</span><br><span class="line">objXmlHttp.<span class="keyword">option</span>(<span class="number">9</span>) = <span class="number">2720</span></span><br></pre></td></tr></table></figure>
<p>或者改为</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="attribute">http</span>=Server.createobject(&quot;MSXML2.ServerXMLHTTP&quot;)</span><br></pre></td></tr></table></figure>
<p>保存后即可。<br>如果还有问题考虑<br>在web.config加了一个判断,如果来源ip是127.0.0.1(也就是程序请求域名),就不跳转https,其他普通访客访问就跳转来解决,<br>现在直接访问域名能跳转https,后台也能生成静态页面</p>
]]></content>
      <categories>
        <category>software</category>
      </categories>
      <tags>
        <tag>software</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 网络错误 TCP:too many orphaned sockets 分析与解决</title>
    <url>/2024/10/12/Linux%20%E7%BD%91%E7%BB%9C%E9%94%99%E8%AF%AF%20TCP%20too%20many%20orphaned%20sockets%20%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<h5 id="Linux-网络错误-TCP-too-many-orphaned-sockets-分析与解决"><a href="#Linux-网络错误-TCP-too-many-orphaned-sockets-分析与解决" class="headerlink" title="Linux 网络错误 TCP:too many orphaned sockets 分析与解决"></a>Linux 网络错误 TCP:too many orphaned sockets 分析与解决</h5><span id="more"></span>
<blockquote>
<p>当QPS达到几十万以上时，该实例（VPS、云服务器）崩溃，直接僵死状态，且无法再次启动。<br>使用命令 dmesg 查看系统日志，发现大量日志，如下：</p>
</blockquote>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="string">[63286.239125]</span> TCP: too many orphaned sockets</span><br><span class="line"><span class="string">[63286.239129]</span> TCP: too many orphaned sockets</span><br><span class="line"><span class="string">[63286.239133]</span> TCP: too many orphaned sockets</span><br><span class="line"><span class="string">[63286.239136]</span> TCP: too many orphaned sockets</span><br><span class="line"><span class="string">[63665.151037]</span> net_ratelimit: <span class="number">50</span> callbacks suppressed</span><br><span class="line"><span class="string">[63665.151063]</span> TCP: too many orphaned sockets</span><br><span class="line"><span class="string">[63665.599039]</span> TCP: too many orphaned sockets</span><br><span class="line"><span class="string">[63665.663052]</span> TCP: too many orphaned sockets</span><br></pre></td></tr></table></figure>
<p>备注：查看系统日志，也可以查出问题，如下：</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">61233 </span>Oct <span class="number">28</span> <span class="number">21</span>:<span class="number">58</span>:<span class="number">48</span> localhost kernel: TCP: too many orphaned sockets</span><br><span class="line"><span class="symbol">61234 </span>Oct <span class="number">28</span> <span class="number">21</span>:<span class="number">58</span>:<span class="number">48</span> localhost kernel: TCP: too many orphaned sockets</span><br><span class="line"><span class="symbol">61235 </span>Oct <span class="number">28</span> <span class="number">21</span>:<span class="number">58</span>:<span class="number">49</span> localhost kernel: TCP: too many orphaned sockets</span><br><span class="line"><span class="symbol">61236 </span>Oct <span class="number">28</span> <span class="number">21</span>:<span class="number">58</span>:<span class="number">49</span> localhost kernel: TCP: too many orphaned sockets</span><br><span class="line"><span class="symbol">61237 </span>Oct <span class="number">28</span> <span class="number">21</span>:<span class="number">58</span>:<span class="number">52</span> localhost kernel: net_ratelimit: <span class="number">56</span> callbacks suppressed</span><br><span class="line"><span class="symbol">61238 </span>Oct <span class="number">28</span> <span class="number">21</span>:<span class="number">58</span>:<span class="number">52</span> localhost kernel: TCP: too many orphaned sockets</span><br><span class="line"><span class="symbol">61239 </span>Oct <span class="number">28</span> <span class="number">21</span>:<span class="number">58</span>:<span class="number">52</span> localhost kernel: TCP: too many orphaned sockets</span><br><span class="line"><span class="symbol">61240 </span>Oct <span class="number">28</span> <span class="number">21</span>:<span class="number">58</span>:<span class="number">52</span> localhost kernel: TCP: too many orphaned sockets</span><br></pre></td></tr></table></figure>
<p>上面的日志，说明 sockets资源耗尽了</p>
<h5 id="端口与socket"><a href="#端口与socket" class="headerlink" title="端口与socket"></a>端口与socket</h5><ol>
<li>端口<br>Linux下端口号范围0<del>65535，其中0</del>1023是系统保留端口号，<br>1024~65535是用户可使用端口号，Linux下默认用户可用端口号范围如下：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> /proc/sys/net/ipv4/ip_local_port_range</span></span><br><span class="line">32768   60999</span><br></pre></td></tr></table></figure>
可用端口号为 28232个（60999 - 32768 + 1 &#x3D; 28232），可以通过参照<a href="https://charlescui.iteye.com/blog/341713">https://charlescui.iteye.com/blog/341713</a> 这个链接中的方式修改</li>
<li>socket<br>要明确两点：</li>
</ol>
<ul>
<li>端口并不等同于socket ，网络中每个通信实体的 socket 是用一个三元组标识的。</li>
</ul>
<p>三元组指的是：协议族（地址族），网络地址、传输层端口 （某些时候其实也可以把协议族去了，理解为二元组）。socket pair（也就是一个TCP连接中两端的socket）则是(source_ip; source_port; destination_ip; destination_port)组成的四元组，socket pair唯一标识一个网络上的每个TCP连接。其中任意一元不同，都是一个新的新的连接。参考：《TCP-IP详解》卷一</p>
<ul>
<li>在Linux中，一切都可以看成文件，包括磁盘、外设等，内核（kernel）利用文件描述符（file descriptor）来访问文件。文件描述符是非负整数，打开现存文件或新建文件时，内核会返回一个文件描述符。读写文件也需要使用文件描述符来指定待读写的文件。socket是一个抽象出来的概念，本质上也是一个文件描述符。参考：《unix网络编程》·卷1</li>
</ul>
<h5 id="端口耗尽"><a href="#端口耗尽" class="headerlink" title="端口耗尽"></a>端口耗尽</h5><p>端口号的可用范围为 0<del>65535，1024</del>65535，32768~60999，是有限的，有被耗尽的风险，这种情况一般是出现在客户端机器上的。</p>
<p>因为一般服务端都是固定端口的，由客户端动态的使用一个端口号，与目标服务器连接。</p>
<p>比如下面的客户端代码：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建 socket 对象</span></span><br><span class="line">s = <span class="built_in">socket</span>.<span class="built_in">socket</span>(<span class="built_in">socket</span>.AF_INET, <span class="built_in">socket</span>.SOCK_STREAM)</span><br><span class="line">host = <span class="string">&#x27;10.32.4.95&#x27;</span></span><br><span class="line">port = <span class="number">9999</span></span><br><span class="line"><span class="comment"># 连接服务，指定主机和端口</span></span><br><span class="line">s.connect((host, port))</span><br></pre></td></tr></table></figure>
<p>客户端都是动态的使用一个端口号，来连接服务端（10.32.4.95:9999），如果在客户端上不断的同服务端建立连接，那么客户端端口号可能被耗尽。压测的时候就算是使用短连接，也可能导致客户端端口被耗尽。</p>
<p>因为TCP四次挥手最后过程，主动关闭连接的一端都会处于TIME_WAIT等待2MSL，一般是60s</p>
<p>修改内核参数的目标就是加快TIME_WAIT状态套接字的回收，快速回收无效连接<br>客户端：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启TCP连接中TIME-WAIT套接字的快速回收  </span></span><br><span class="line"><span class="attr">net.ipv4.tcp_tw_recycle</span>=<span class="number">1</span>     </span><br><span class="line">   </span><br><span class="line"><span class="comment">#开启重用，表示是否允许将处于TIME-WAIT状态的socket（TIME-WAIT的端口）用于新的TCP连接 。  </span></span><br><span class="line"><span class="attr">net.ipv4.tcp_tw_reuse</span>=<span class="number">1</span>       </span><br><span class="line">   </span><br><span class="line"><span class="comment">#对于本端断开的socket连接，TCP保持在FIN-WAIT-2状态的时间（秒）。  </span></span><br><span class="line"><span class="comment">#对方可能会断开连接或一直不结束连接或不可预料的进程死亡。  </span></span><br><span class="line"><span class="attr">net.ipv4.tcp_fin_timeout</span>=<span class="number">5</span>      </span><br><span class="line">   </span><br><span class="line"><span class="comment">#TCP时间戳（会在TCP包头增加12个字节），以一种比重发超时更精确的方法（参考RFC 1323）  </span></span><br><span class="line"><span class="comment">#来启用对RTT 的计算，为实现更好的性能应该启用这个选项。  </span></span><br><span class="line"><span class="attr">net.ipv4.tcp_timestamps</span>=<span class="number">1</span>    </span><br><span class="line">   </span><br><span class="line"><span class="comment">#收缩TIME_WAIT状态socket的回收时间窗口   </span></span><br><span class="line"><span class="attr">net.ipv4.tcp_tw_timeout</span>=<span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>一般也就上面这些参数，参考：</p>
<p>短连接导致端口耗尽</p>
<p><a href="https://blog.csdn.net/leijie0322/article/details/70821237">linux下TCP&#x2F;IP及内核参数优化调优（TIME_WAIT）</a></p>
<h5 id="socket资源耗尽"><a href="#socket资源耗尽" class="headerlink" title="socket资源耗尽"></a>socket资源耗尽</h5><p>注意，是套接字资源耗尽，并不是socket耗尽，资源耗尽是指什么呢？</p>
<p>严格来讲，socket是一个三元组（或者说二元组），一抽象出来的东西因此我觉得不存在socket耗尽的说法，但由于socket本质是一个文件描述符，因此存在文件描述符被耗尽的可能，下面再说</p>
<p>引用下这个总结</p>
<p>Linux系统单机支持的tcp连接数主要受三个方面的限制：</p>
<ol>
<li><p>文件描述符的限制 （socket本质上也是一个文件描述符）</p>
</li>
<li><p>系统内存限制</p>
</li>
<li><p>Linux内核的限制<br>参考：<a href="https://blog.csdn.net/ybxuwei/article/details/77969032">linux文件描述符限制和单机最大长连接数</a><br>对于上面三点，一一说明一下</p>
</li>
</ol>
<p>文件描述符的限制：在64位的系统上，文件描述符单机可以达到20亿+，因此这个限制基本不用考虑，绝对够用</p>
<p>系统内存限制：一个socket连接大概占用4~10Kb内存，要想单机1百万连接，那么就至少需要大概4G内存。这个用量对于现在的服务器来说还是很轻松就满足的</p>
<p>因此最关键的在于 Linux内核的限制，如果突破了这个限制就会出问题。</p>
<p>Linux对TCP、UPD连接是做了内存限制的，通过以下命令查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/sys/net/ipv4/tcp_mem</span><br><span class="line">186135  248180  372270</span><br><span class="line">  </span><br><span class="line"><span class="built_in">cat</span> /proc/sys/net/ipv4/udp_mem</span><br><span class="line">372270  496361  744540</span><br></pre></td></tr></table></figure>
<p>上面的数据 <a href="http://www.blogjava.net/yongboy/archive/2013/04/11/397677.html">(参考连接)</a></p>
<p>第一个：low：当TCP使用了低于该值的内存页面数时，TCP不会考虑释放内存。</p>
<p>第二个：pressure：当TCP使用了超过该值的内存页面数量时，TCP试图稳定其内存使用，进入pressure模式，当内存消耗低于low值时则退出pressure状态。</p>
<p>第三个：high：允许所有tcp sockets用于排队缓冲数据报的页面量，当内存占用超过此值，系统拒绝分配socket，后台日志输出“TCP: too many of orphaned sockets” （应该是Out of Socket memory）。</p>
<p>如果超过最大限制，dmesg中会报Out of Socket memory错误，且程序会被杀死</p>
<p>上面的数据单位是页，页大小通过以下命令查看</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># getconf PAGESIZE</span></span><br><span class="line"><span class="number">4096</span></span><br></pre></td></tr></table></figure>
<p>1 page &#x3D;4096 byte</p>
<p>计算下得到，在我的电脑上Linux默认TCP连接可使用的内存上限是：1.4GB左右，当然了这个是我笔记本上的参数，服务器上的会更大</p>
<p>可以通过如下图所示命令查看tcp socket使用情况</p>
<p>[]</p>
<p>tcp_mem是设定了所有tcp连接能够使用的内存大小,此外对于单个tcp连接还可以调节一下参数：</p>
<p>rmem_max最大的TCP数据接收缓冲</p>
<p>wmem_max最大的TCP数据发送缓冲</p>
<p>tcp_rmem</p>
<p>tcp_wmem</p>
<p>这几个是tcp读写缓冲区的大小。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.ipv4.tcp_mem = 786432 2097152 3145728&quot;</span>&gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.ipv4.tcp_rmem = 4096 4096 16777216&quot;</span>&gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.ipv4.tcp_wmem = 4096 4096 16777216&quot;</span>&gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure>
<p>对于一般情况来说，上面的操作就已经足够了：保证能提供足够的连接数和足够的内存</p>
<p>但是还应该考虑soconnmax这个参数，这个参数限制了socket接收新 TCP 连接侦听队列的大小，在高并发的请求中，默认的值可能会导致链接超时或者重传。默认是128，挺小的，对于一个经常处理新连接的高负载 web服务环境来说建议调大。</p>
<p>参考：</p>
<p><a href="https://blog.51cto.com/wujianwei/2104779">linux内核调优tcp_max_syn_backlog和somaxconn的区别</a></p>
<p><a href="https://jaminzhang.github.io/linux/understand-Linux-backlog-and-somaxconn-kernel-arguments/">理解 Linux backlog&#x2F;somaxconn 内核参数</a></p>
<p><a href="http://www.blogjava.net/yongboy/archive/2014/07/30/416373.html">随手记之Linux内核Backlog笔记</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux文件系统预留空间</title>
    <url>/2024/05/10/Linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E9%A2%84%E7%95%99%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<blockquote>
<p>如果磁盘是ext2，ext3，ext4文件格式，系统默认会为磁盘保留5%的预留空间，这样能保证有些关键应用（比如数据库）在硬盘满的时候有点余地，不致于马上就 crash，给监控系统和管理员一点时间去察觉。<br>xfs文件格式的磁盘不会划分预留空间</p>
</blockquote>
<span id="more"></span>

<p>在Linux系统中，磁盘的可用空间、已用空间和容量之间的关系是相互依赖的，但也可能存在一些差异。主要的原因包括：</p>
<ul>
<li>文件系统的格式化和分配：在格式化磁盘并创建文件系统时，会为文件系统分配一部分空间作为文件系统的元数据、inode 表、日志等。这些分配给文件系统的空间将从总容量中减去，因此可用空间会小于磁盘的实际容量。</li>
<li>保留空间：文件系统通常会保留一部分空间，用于特定操作和系统的需要。这些保留空间用于存储特殊文件、文件系统元数据或者为写入操作提供缓冲空间。因此，这部分空间不包含在可用空间中。</li>
<li>超级用户权限：磁盘配额和权限设置可能导致某些空间仅对特定的用户或用户组可见和可用。超级用户(root)具有更高的权限，可能可以访问和使用其他用户没有权限的空间。<br>块大小：磁盘上的数据存储以块为单位进行管理。块大小的设置可能导致存储空间的浪费。当一个文件的大小不是块大小的整数倍时，将会浪费部分空间。<br><strong>这些因素导致可用空间、已用空间和容量之间存在差异。要了解更准确的磁盘使用情况，可以使用命令行工具如 df 命令来查看文件系统的实际使用情况，它会提供关于可用空间、已用空间和总容量的详细信息</strong><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">tune2fs -l <span class="regexp">/dev/</span>sda2</span><br></pre></td></tr></table></figure>
<img src="/2024/05/10/Linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E9%A2%84%E7%95%99%E7%A9%BA%E9%97%B4/20240510120122.jpg"><br>根据提供的输出，我可以看到以下关于文件系统的预留空间大小的信息：<br>文件系统位于 &#x2F;dev&#x2F;sda2 磁盘分区上。<br>预留块数量为 2555891。<br>块大小为 4096 字节。<br>要计算预留空间的实际大小，您可以使用以下公式：<br>预留空间大小 &#x3D; 预留块数量 × 块大小<br>在这种情况下，预留空间大小 &#x3D; 2555891 × 4096 &#x3D; 10,484,299,136 字节 或 9.77GB。<br>通过这个计算，您可以知道文件系统上的预留空间的实际大小。请注意，这个值是以字节为单位的，如果需要以其他单位表示，可以进行适当的转换。</li>
</ul>
<h5 id="如何调整这个预留空间的大小"><a href="#如何调整这个预留空间的大小" class="headerlink" title="如何调整这个预留空间的大小"></a>如何调整这个预留空间的大小</h5><p>使用 tune2fs 命令可以调整文件系统的预留空间大小。预留空间是为了给文件系统保留一些空间供系统管理员使用，在磁盘空间快满的时候防止系统崩溃。<br>以下是通过 tune2fs 命令来调整文件系统预留空间大小的步骤：</p>
<p>1.打开终端或命令行界面。<br>2.运行以下命令，其中 &#x2F;dev&#x2F;sdX 是文件系统所在的磁盘设备。请将其替换为您实际使用的设备名称。</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">tune2fs -m &lt;percentage&gt; <span class="regexp">/dev/</span>sdX</span><br></pre></td></tr></table></figure>
<p>是您想要设置的预留空间的百分比。例如，如果您想要将预留空间设置为 10%，则将 替换为 10。</p>
<p>3.输入管理员密码并确认命令。<br>4.命令执行成功后，文件系统的预留空间大小将被调整。</p>
<p>请注意，调整文件系统的预留空间可能会对系统的稳定性和性能产生影响。建议在进行此操作之前备份重要数据，并仔细评估所需的空间和系统需求。<br>此外，不同的文件系统可能具有不同的默认预留空间大小。您可以使用 tune2fs -l 命令查看当前文件系统的预留空间大小，并据此进行调整。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx内置变量</title>
    <url>/2023/12/15/Nginx%E5%86%85%E7%BD%AE%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h2 id="Nginx内置变量"><a href="#Nginx内置变量" class="headerlink" title="Nginx内置变量"></a>Nginx内置变量</h2><span id="more"></span>
<pre><code class="$args">$query_string            #同 $args
$arg_NAME                #GET请求中NAME的值
$is_args                 #如果请求中有参数，值为&quot;?&quot;，否则为空字符串
$uri                     #请求中的当前URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改，$uri不包含主机名，如&quot;/foo/bar.html&quot;。
$document_uri            #同 $uri
$document_root           #当前请求的文档根目录或别名
$host                    #优先级：HTTP请求行的主机名&gt;&quot;HOST&quot;请求头字段&gt;符合请求的服务器名
$hostname                #主机名
$https                   #如果开启了SSL安全模式，值为&quot;on&quot;，否则为空字符串。
$binary_remote_addr      #客户端地址的二进制形式，固定长度为4个字节
$body_bytes_sent         #传输给客户端的字节数，响应头不计算在内；这个变量和Apache的mod_log_config模块中的&quot;%B&quot;参数保持兼容
$bytes_sent              #传输给客户端的字节数
$connection              #TCP连接的序列号
$connection_requests     #TCP连接当前的请求数量
$content_length          #&quot;Content-Length&quot; 请求头字段
$content_type            #&quot;Content-Type&quot; 请求头字段
$cookie_name             #cookie名称
$limit_rate              #用于设置响应的速度限制
$msec                    #当前的Unix时间戳
$nginx_version           #nginx版本
$pid                     #工作进程的PID
$pipe                    #如果请求来自管道通信，值为&quot;p&quot;，否则为&quot;.&quot;
$proxy_protocol_addr     #获取代理访问服务器的客户端地址，如果是直接访问，该值为空字符串
$realpath_root           #当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径
$remote_addr             #客户端地址
$remote_port             #客户端端口
$remote_user             #用于HTTP基础认证服务的用户名
$request                 #代表客户端的请求地址
$request_body            #客户端的请求主体：此变量可在location中使用，将请求主体通过proxy_pass，fastcgi_pass，uwsgi_pass和scgi_pass传递给下一级的代理服务器
$request_body_file       #将客户端请求主体保存在临时文件中。文件处理结束后，此文件需删除。如果需要之一开启此功能，需要设置client_body_in_file_only。如果将次文件传递给后端的代理服务器，需要禁用request body，即设置proxy_pass_request_body off，fastcgi_pass_request_body off，uwsgi_pass_request_body off，or scgi_pass_request_body off
$request_completion      #如果请求成功，值为&quot;OK&quot;，如果请求未完成或者请求不是一个范围请求的最后一部分，则为空
$request_filename        #当前连接请求的文件路径，由root或alias指令与URI请求生成
$request_length          #请求的长度 (包括请求的地址，http请求头和请求主体)
$request_method          #HTTP请求方法，通常为&quot;GET&quot;或&quot;POST&quot;
$request_time            #处理客户端请求使用的时间; 从读取客户端的第一个字节开始计时
$request_uri             #这个变量等于包含一些客户端请求参数的原始URI，它无法修改，请查看$uri更改或重写URI，不包含主机名，例如：&quot;/cnphp/test.php?arg=freemouse&quot;
$scheme                  #请求使用的Web协议，&quot;http&quot; 或 &quot;https&quot;
$server_addr             #服务器端地址，需要注意的是：为了避免访问linux系统内核，应将ip地址提前设置在配置文件中
$server_name             #服务器名
$server_port             #服务器端口
$server_protocol         #服务器的HTTP版本，通常为 &quot;HTTP/1.0&quot; 或 &quot;HTTP/1.1&quot;
$status                  #HTTP响应代码
$time_iso8601            #服务器时间的ISO 8610格式
$time_local              #服务器时间（LOG Format 格式）
$cookie_NAME             #客户端请求Header头中的cookie变量，前缀&quot;$cookie_&quot;加上cookie名称的变量，该变量的值即为cookie名称的值
$http_NAME               #匹配任意请求头字段；变量名中的后半部分NAME可以替换成任意请求头字段，如在配置文件中需要获取http请求头：&quot;Accept-Language&quot;，$http_accept_language即可
$http_cookie
$http_post
$http_referer
$http_user_agent
$http_x_forwarded_for
$sent_http_NAME          #可以设置任意http响应头字段；变量名中的后半部分NAME可以替换成任意响应头字段，如需要设置响应头Content-length，$sent_http_content_length即可
$sent_http_cache_control
$sent_http_connection
$sent_http_content_type
$sent_http_keep_alive
$sent_http_last_modified
$sent_http_location
$sent_http_transfer_encoding```
</code></pre>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>centos 7.9更换阿里源</title>
    <url>/2024/10/12/centos%207.9%E6%9B%B4%E6%8D%A2%E9%98%BF%E9%87%8C%E6%BA%90/</url>
    <content><![CDATA[<h5 id="centos-7-9更换阿里源"><a href="#centos-7-9更换阿里源" class="headerlink" title="centos 7.9更换阿里源"></a>centos 7.9更换阿里源</h5><span id="more"></span>
<p>在CentOS 7.9上更换为阿里云源的步骤如下：</p>
<h5 id="备份原有的YUM源配置文件"><a href="#备份原有的YUM源配置文件" class="headerlink" title="备份原有的YUM源配置文件"></a>备份原有的YUM源配置文件</h5><p><code>sudo cp -a /etc/yum.repos.d /etc/yum.repos.d.backup</code></p>
<h5 id="清理原有的YUM源配置文件"><a href="#清理原有的YUM源配置文件" class="headerlink" title="清理原有的YUM源配置文件"></a>清理原有的YUM源配置文件</h5><p><code>sudo rm -f /etc/yum.repos.d/*.repo</code></p>
<h5 id="下载阿里云CentOS-7源配置文件"><a href="#下载阿里云CentOS-7源配置文件" class="headerlink" title="下载阿里云CentOS 7源配置文件"></a>下载阿里云CentOS 7源配置文件</h5><p><code>sudo curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</code></p>
<h5 id="清除缓存并生成新的缓存"><a href="#清除缓存并生成新的缓存" class="headerlink" title="清除缓存并生成新的缓存"></a>清除缓存并生成新的缓存</h5><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">sudo yum clean <span class="keyword">all</span></span><br><span class="line">sudo yum makecache</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>centos 8安装mysql</title>
    <url>/2023/12/20/centos%208%E5%AE%89%E8%A3%85mysql/</url>
    <content><![CDATA[<h5 id="centos-8-安装mysql"><a href="#centos-8-安装mysql" class="headerlink" title="centos 8 安装mysql"></a>centos 8 安装mysql</h5><span id="more"></span>
<h5 id="添加-MySQL-Yum-存储库"><a href="#添加-MySQL-Yum-存储库" class="headerlink" title="添加 MySQL Yum 存储库"></a>添加 MySQL Yum 存储库</h5><p>首先，将 MySQL Yum 存储库添加到系统的存储库列表中。这是一次性操作，可以通过安装 MySQL 提供的 RPM 来执行。按着这些次序:  </p>
<ol>
<li>转到 MySQL 开发人员专区中的下载 MySQL Yum 存储库页面(官方存储库)</li>
<li>为您的平台选择并下载发布包<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">wget https://link.zhihu.com/?<span class="keyword">target</span><span class="operator">=</span>https<span class="variable">%3</span>A//repo.mysql.com//mysql<span class="number">80</span>-community-<span class="keyword">release</span>-el<span class="number">7</span><span class="number">-1</span>.noarch.rpm</span><br><span class="line">rpm -ivh mysql<span class="number">80</span>-community-<span class="keyword">release</span>-el<span class="number">7</span><span class="number">-1</span>.noarch.rpm</span><br></pre></td></tr></table></figure>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">yum repolist <span class="keyword">all</span> |<span class="keyword">grep</span> mysql</span><br></pre></td></tr></table></figure>
<img src="/2023/12/20/centos%208%E5%AE%89%E8%A3%85mysql/1703038728264.jpg"><br>上面可以看到,默认启用的是80,因为我是要57版本的所以要设置一下,启用57,禁用80  <figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@ebs</span><span class="number">-132999</span> mysql]<span class="meta"># dnf config-manager --disable mysql80-community</span></span><br><span class="line">[root<span class="symbol">@ebs</span><span class="number">-132999</span> mysql]<span class="meta"># dnf config-manager --enable mysql57-community</span></span><br></pre></td></tr></table></figure>
<img src="/2023/12/20/centos%208%E5%AE%89%E8%A3%85mysql/1703038804134.jpg"></li>
</ol>
<h5 id="禁用默认-MySQL-模块"><a href="#禁用默认-MySQL-模块" class="headerlink" title="禁用默认 MySQL 模块"></a>禁用默认 MySQL 模块</h5><blockquote>
<p>官方解释<br>(仅限 EL8 系统）基于 EL8 的系统（例如 RHEL8 和 Oracle Linux 8）包含默认启用的 MySQL 模块。除非禁用此模块，否则它会屏蔽 MySQL 存储库提供的包。要禁用包含的模块并使 MySQL 存储库包可见，请使用以下命令（对于启用 dnf 的系统， 将命令中的 yum替换为dnf）：</p>
</blockquote>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">yum module <span class="built_in">disable</span> mysql</span><br></pre></td></tr></table></figure>
<p>安装mysql  </p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">dnf install  mysql-community-<span class="keyword">server</span></span><br></pre></td></tr></table></figure>
<p>安装时提示证书异常<br><img src="/2023/12/20/centos%208%E5%AE%89%E8%A3%85mysql/1703038858140.jpg"></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">rpm --<span class="keyword">import</span> https:<span class="comment">//repo.mysql.com/RPM-GPG-KEY-mysql-2022</span></span><br></pre></td></tr></table></figure>
<p>官方解决办法(<a href="https://dev.mysql.com/doc/refman/8.0/en/checking-rpm-signature.html">https://dev.mysql.com/doc/refman/8.0/en/checking-rpm-signature.html</a>)</p>
<h5 id="启动并修改设置"><a href="#启动并修改设置" class="headerlink" title="启动并修改设置"></a>启动并修改设置</h5><p>修改data目录路径指向home  </p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">datadir</span>=/home/mysql</span><br><span class="line"><span class="attr">socket</span>=/home/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line"><span class="comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line"><span class="attr">symbolic-links</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">log-error</span>=/home/mysql/log/mysqld.log</span><br><span class="line"><span class="attr">pid-file</span>=/home/mysql/run/mysqld/mysqld.pid</span><br></pre></td></tr></table></figure>
<p>查看root初始密码  </p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">grep <span class="string">&#x27;password&#x27;</span> /<span class="keyword">var</span>/<span class="built_in">log</span>/mysqld.<span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<p>本地或者远程连接不上，提示socket错误，注意是my.cnf中没有配置client  </p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="attr">socket</span>=/home/mysql/mysql.sock</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>centos 8安装php-fpm</title>
    <url>/2023/12/25/centos%208%E5%AE%89%E8%A3%85php-fpm/</url>
    <content><![CDATA[<p>centos 8安装php-fpm</p>
<span id="more"></span>
<h6 id="1-安装依赖包"><a href="#1-安装依赖包" class="headerlink" title="1. 安装依赖包"></a>1. 安装依赖包</h6><figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line">yum install -y gcc gcc-c++  make <span class="literal">zlib</span> <span class="literal">zlib</span>-devel pcre pcre-devel  libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel glibc glibc-devel glib2 glib2-devel <span class="literal">bzip2</span> <span class="literal">bzip2</span>-devel ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel openssl openssl-devel openldap openldap-devel nss_ldap openldap-clients openldap-servers automake libtool</span><br></pre></td></tr></table></figure>
<h6 id="2-解压安装php"><a href="#2-解压安装php" class="headerlink" title="2. 解压安装php"></a>2. 解压安装php</h6><p>下载php</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//www.php.net/downloads.php)</span></span><br></pre></td></tr></table></figure>
<p>编译时出错oniguruma<br>Centos 8 安装 oniguruma</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://down.24kplus.com/linux/oniguruma/oniguruma-6.9.4.tar.gz</span><br><span class="line">tar -zxf oniguruma-6.9.4.tar.gz</span><br><span class="line"><span class="built_in">cd</span> oniguruma-6.9.4</span><br><span class="line">./autogen.sh &amp;&amp; ./configure --prefix=/usr</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h6 id="3-编译php"><a href="#3-编译php" class="headerlink" title="3.编译php"></a>3.编译php</h6><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=<span class="regexp">/usr/local</span><span class="regexp">/php \</span></span><br><span class="line"><span class="regexp">--exec-prefix=/usr</span><span class="regexp">/local/php</span> \</span><br><span class="line">--bindir=<span class="regexp">/usr/local</span><span class="regexp">/php/bin</span> \</span><br><span class="line">--sbindir=<span class="regexp">/usr/local</span><span class="regexp">/php/sbin</span> \</span><br><span class="line">--includedir=<span class="regexp">/usr/local</span><span class="regexp">/php/include</span> \</span><br><span class="line">--libdir=<span class="regexp">/usr/local</span><span class="regexp">/php/lib</span><span class="regexp">/php \</span></span><br><span class="line"><span class="regexp">--mandir=/usr</span><span class="regexp">/local/php</span><span class="regexp">/php/man</span> \</span><br><span class="line">--<span class="keyword">with</span>-config-file-path=<span class="regexp">/usr/local</span><span class="regexp">/php/etc</span> \</span><br><span class="line">--<span class="keyword">with</span>-openssl \</span><br><span class="line">--enable-mbstring \</span><br><span class="line">--enable-fpm</span><br></pre></td></tr></table></figure>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="built_in">make</span> &amp;&amp; <span class="built_in">make</span> install</span><br></pre></td></tr></table></figure>
<p>在之前编译的源码包中，找到 php.ini-production，复制到&#x2F;usr&#x2F;local&#x2F;php&#x2F;etc下，并改名为php.ini：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cp php.ini-production <span class="regexp">/usr/</span>local<span class="regexp">/php/</span>etc/php.ini</span><br></pre></td></tr></table></figure>
<p>将php源码编译目录下的 sapi&#x2F;fpm&#x2F;init.d.php-fpm 文件拷贝到系统配置 &#x2F;etc&#x2F;init.d 目录下并重命名为 php-fpm</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">[root<span class="meta">@localhost</span> php<span class="operator">-</span><span class="number">7.3</span>.<span class="number">4</span>]# cp sapi<span class="regexp">/fpm/</span><span class="keyword">init</span>.d.php<span class="operator">-</span>fpm <span class="regexp">/etc/</span><span class="keyword">init</span>.d<span class="operator">/</span>php<span class="operator">-</span>fpm </span><br><span class="line">[root<span class="meta">@localhost</span> php<span class="operator">-</span><span class="number">7.3</span>.<span class="number">4</span>]# chmod <span class="operator">+</span>x <span class="regexp">/etc/</span><span class="keyword">init</span>.d<span class="operator">/</span>php<span class="operator">-</span>fpm</span><br></pre></td></tr></table></figure>
<h6 id="4-添加-php-fpm-配置文件"><a href="#4-添加-php-fpm-配置文件" class="headerlink" title="4.添加 php-fpm 配置文件"></a>4.添加 php-fpm 配置文件</h6><p>将php安装目录下的 &#x2F;usr&#x2F;local&#x2F;php&#x2F;etc&#x2F;php-fpm.conf.default 文件拷贝同目录下并重命名为 php-fpm.conf</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">[root<span class="meta">@localhost</span> php<span class="operator">-</span><span class="number">7.3</span>.<span class="number">4</span>]# cp <span class="regexp">/usr/</span>local<span class="regexp">/php/</span>etc<span class="regexp">/php-fpm.conf.default /</span>usr<span class="regexp">/local/</span>php<span class="regexp">/etc/</span>php<span class="operator">-</span>fpm.conf</span><br></pre></td></tr></table></figure>
<p>添加 <a href="http://www.conf/">www.conf</a> 配置文件<br>将php安装目录下的 &#x2F;usr&#x2F;local&#x2F;php&#x2F;etc&#x2F;php-fpm.d&#x2F;<a href="http://www.conf.default/">www.conf.default</a> 文件拷贝同目录下并重命名为 <a href="http://www.conf/">www.conf</a></p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">[root@localhost php-<span class="number">7.3</span>.<span class="number">4</span>]# cp <span class="regexp">/usr/</span>local<span class="regexp">/php/</span>etc<span class="regexp">/php-fpm.d/</span>www.conf.<span class="keyword">default</span> <span class="regexp">/usr/</span>local<span class="regexp">/php/</span>etc<span class="regexp">/php-fpm.d/</span>www.conf </span><br></pre></td></tr></table></figure>
<h6 id="5-添加php安装目录到系统环境变量"><a href="#5-添加php安装目录到系统环境变量" class="headerlink" title="5.添加php安装目录到系统环境变量"></a>5.添加php安装目录到系统环境变量</h6><p>创建并打开文件php.sh<br>[root@localhost php-7.3.4]# vim &#x2F;etc&#x2F;profile.d&#x2F;php.sh<br>添加内容如下:</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">export <span class="title class_">PATH</span>=<span class="variable">$PATH</span><span class="symbol">:/usr/local/php/bin/</span><span class="symbol">:/usr/local/php/sbin/</span> </span><br></pre></td></tr></table></figure>
<h6 id="6-使用source立即生效刚刚添加的php环境变量"><a href="#6-使用source立即生效刚刚添加的php环境变量" class="headerlink" title="6.使用source立即生效刚刚添加的php环境变量"></a>6.使用source立即生效刚刚添加的php环境变量</h6><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">[root@localhost php-<span class="number">7.3</span>.<span class="number">4</span>]# <span class="keyword">source</span> /etc/<span class="keyword">profile</span>.d/php.<span class="keyword">sh</span> </span><br></pre></td></tr></table></figure>
<h6 id="7-启动php-fpm"><a href="#7-启动php-fpm" class="headerlink" title="7.启动php-fpm"></a>7.启动php-fpm</h6><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> php<span class="number">-7.3</span><span class="number">.4</span>]<span class="meta"># service php-fpm start</span></span><br></pre></td></tr></table></figure>
<p>看到9000端口也就成功了！！！<br>设置php开机启动</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> php-fpm</span><br></pre></td></tr></table></figure>
<p>重启后查看端口看看是否存在！<br>然后php中添加如下内容</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">    <span class="attribute">root</span>           html;</span><br><span class="line">    <span class="attribute">fastcgi_pass</span>   <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">    <span class="attribute">fastcgi_index</span>  index.php;</span><br><span class="line">    <span class="attribute">fastcgi_param</span>  SCRIPT_FILENAME  <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">    <span class="attribute">include</span>        fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>centos nginx安装</title>
    <url>/2023/12/25/centos%20nginx%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>centos nginx安装</p>
<span id="more"></span>
<h5 id="安装和编译"><a href="#安装和编译" class="headerlink" title="安装和编译"></a>安装和编译</h5><ul>
<li>下载安装包<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget http:<span class="regexp">//</span>nginx.org<span class="regexp">/download/</span>nginx-<span class="number">1.21</span>.<span class="number">6</span>.tar.gz</span><br><span class="line">wget -O naxsi-master.zip https:<span class="regexp">//</span>codeload.github.com<span class="regexp">/nbs-system/</span>naxsi<span class="regexp">/zip/</span>refs<span class="regexp">/heads/m</span>aster </span><br></pre></td></tr></table></figure></li>
<li>编译<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">./configure</span> <span class="params">--prefix=/etc/nginx</span> <span class="params">--add-module=/etc/nginx/naxsi/naxsi_src</span> <span class="params">--user=nginx</span> <span class="params">--group=nginx</span> <span class="params">--with-http_ssl_module</span> <span class="params">--with-http_geoip_module</span> <span class="params">--without-mail_pop3_module</span> <span class="params">--without-mail_smtp_module</span> <span class="params">--without-mail_imap_module</span> <span class="params">--without-http_uwsgi_module</span> <span class="params">--without-http_scgi_module</span></span><br></pre></td></tr></table></figure>
注意nginx 编译时源码和编译操作不能在同一个目录</li>
<li>make &amp;&amp; make install<br>centos 7 systemctl启动脚本<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=nginx1.<span class="number">21.6</span></span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=forking</span><br><span class="line"><span class="attr">PIDFile</span>=/etc/nginx/logs/nginx.pid</span><br><span class="line"><span class="attr">ExecStartPre</span>=/etc/nginx/sbin/nginx -t -c /etc/nginx/conf/nginx.conf</span><br><span class="line"><span class="attr">ExecStart</span>=/etc/nginx/sbin/nginx</span><br><span class="line"><span class="attr">ExecReload</span>=/etc/nginx/sbin/nginx</span><br><span class="line"><span class="attr">ExecStop</span>=/etc/nginx/sbin/nginx</span><br><span class="line"><span class="attr">PrivateTmp</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure></li>
<li>创建nginx账户并启动<br>useradd -s &#x2F;sbin&#x2F;nologin -M nginx<br>systemctl start nginx<br>加入环境变量<br>ln -s &#x2F;etc&#x2F;nginx&#x2F;sbin&#x2F;nginx &#x2F;usr&#x2F;sbin&#x2F; 或者profile添加PATH&#x3D;$PATH:&#x2F;etc&#x2F;nginx&#x2F;sbin export PATH source &#x2F;etc&#x2F;profile<br>nginx配置文件相关说明<br>user  nginx; #运行用户<br>worker_processes  2;</li>
</ul>
<p> #启动进程,通常设置成和cpu的数量相等<br>配置全局错误日志[debug|info|notice|warn|error|crit]]。默认是error<br>error_log  logs&#x2F;error.log;<br>#error_log  logs&#x2F;error.log  notice;<br>error_log  logs&#x2F;error.log  info;<br>pid        logs&#x2F;nginx.pid;<br>#进程pid文件<br>event配置<br>events块所涉及的指令，主要是影响nginx服务器与用户的网络连接。worker_connections  1024;该配置意思是支持的最大连接数是1024。<br>如果说 worker_processes 设置为了4，worker_connections 设置为了 1024，那么此时nginx支持的总连接数就是 4*1024&#x3D;4096。<br>events {<br>    worker_connections  1024;<br>}</p>
<p>http配置<br>include       mime.types; mime类型<br>default_type  application&#x2F;octet-stream; 默认文件流文件类型</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#log_format  main  <span class="string">&#x27;<span class="subst">$remote_addr</span> - <span class="subst">$remote_user</span> [<span class="subst">$time_local</span>] &quot;<span class="subst">$request</span>&quot; &#x27;</span></span><br><span class="line">#                  <span class="string">&#x27;<span class="subst">$status</span> <span class="subst">$body_bytes_sent</span> &quot;<span class="subst">$http_referer</span>&quot; &#x27;</span></span><br><span class="line">#                  <span class="string">&#x27;&quot;<span class="subst">$http_user_agent</span>&quot; &quot;<span class="subst">$http_x_forwarded_for</span>&quot;&#x27;</span>;</span><br><span class="line">日志格式</span><br><span class="line">sendfile        <span class="keyword">on</span>; 高效文件传输模式</span><br><span class="line">#tcp_nopush     <span class="keyword">on</span>; 防止网络阻塞</span><br><span class="line">keepalive_timeout  <span class="number">65</span>; 长连接超时时间</span><br><span class="line">#gzip  <span class="keyword">on</span>; gzip压缩</span><br></pre></td></tr></table></figure>
<p>nginx内置变量</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">$args                    <span class="meta">#请求中的参数值</span></span><br><span class="line">$query_string            <span class="meta">#同 $args</span></span><br><span class="line">$arg_NAME                <span class="meta">#GET请求中NAME的值</span></span><br><span class="line">$is_args                 <span class="meta">#如果请求中有参数，值为<span class="string">&quot;?&quot;</span>，否则为空字符串</span></span><br><span class="line">$uri                     <span class="meta">#请求中的当前URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改，$uri不包含主机名，如<span class="string">&quot;/foo/bar.html&quot;</span>。</span></span><br><span class="line">$document_uri            <span class="meta">#同 $uri</span></span><br><span class="line">$document_root           <span class="meta">#当前请求的文档根目录或别名</span></span><br><span class="line">$host                    <span class="meta">#优先级：HTTP请求行的主机名&gt;<span class="string">&quot;HOST&quot;</span>请求头字段&gt;符合请求的服务器名</span></span><br><span class="line">$hostname                <span class="meta">#主机名</span></span><br><span class="line">$https                   <span class="meta">#如果开启了SSL安全模式，值为<span class="string">&quot;on&quot;</span>，否则为空字符串。</span></span><br><span class="line">$binary_remote_addr      <span class="meta">#客户端地址的二进制形式，固定长度为4个字节</span></span><br><span class="line">$body_bytes_sent         <span class="meta">#传输给客户端的字节数，响应头不计算在内；这个变量和Apache的mod_log_config模块中的<span class="string">&quot;%B&quot;</span>参数保持兼容</span></span><br><span class="line">$bytes_sent              <span class="meta">#传输给客户端的字节数</span></span><br><span class="line">$connection              <span class="meta">#TCP连接的序列号</span></span><br><span class="line">$connection_requests     <span class="meta">#TCP连接当前的请求数量</span></span><br><span class="line">$content_length          <span class="meta">#<span class="string">&quot;Content-Length&quot;</span> 请求头字段</span></span><br><span class="line">$content_type            <span class="meta">#<span class="string">&quot;Content-Type&quot;</span> 请求头字段</span></span><br><span class="line">$cookie_name             <span class="meta">#cookie名称</span></span><br><span class="line">$limit_rate              <span class="meta">#用于设置响应的速度限制</span></span><br><span class="line">$msec                    <span class="meta">#当前的Unix时间戳</span></span><br><span class="line">$nginx_version           <span class="meta">#nginx版本</span></span><br><span class="line">$pid                     <span class="meta">#工作进程的PID</span></span><br><span class="line">$pipe                    <span class="meta">#如果请求来自管道通信，值为<span class="string">&quot;p&quot;</span>，否则为<span class="string">&quot;.&quot;</span></span></span><br><span class="line">$proxy_protocol_addr     <span class="meta">#获取代理访问服务器的客户端地址，如果是直接访问，该值为空字符串</span></span><br><span class="line">$realpath_root           <span class="meta">#当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径</span></span><br><span class="line">$remote_addr             <span class="meta">#客户端地址</span></span><br><span class="line">$remote_port             <span class="meta">#客户端端口</span></span><br><span class="line">$remote_user             <span class="meta">#用于HTTP基础认证服务的用户名</span></span><br><span class="line">$request                 <span class="meta">#代表客户端的请求地址</span></span><br><span class="line">$request_body            <span class="meta">#客户端的请求主体：此变量可在location中使用，将请求主体通过proxy_pass，fastcgi_pass，uwsgi_pass和scgi_pass传递给下一级的代理服务器</span></span><br><span class="line">$request_body_file       <span class="meta">#将客户端请求主体保存在临时文件中。文件处理结束后，此文件需删除。如果需要之一开启此功能，需要设置client_body_in_file_only。如果将次文件传递给后端的代理服务器，需要禁用request body，即设置proxy_pass_request_body off，fastcgi_pass_request_body off，uwsgi_pass_request_body off，or scgi_pass_request_body off</span></span><br><span class="line">$request_completion      <span class="meta">#如果请求成功，值为<span class="string">&quot;OK&quot;</span>，如果请求未完成或者请求不是一个范围请求的最后一部分，则为空</span></span><br><span class="line">$request_filename        <span class="meta">#当前连接请求的文件路径，由root或alias指令与URI请求生成</span></span><br><span class="line">$request_length          <span class="meta">#请求的长度 (包括请求的地址，http请求头和请求主体)</span></span><br><span class="line">$request_method          <span class="meta">#HTTP请求方法，通常为<span class="string">&quot;GET&quot;</span>或<span class="string">&quot;POST&quot;</span></span></span><br><span class="line">$request_time            <span class="meta">#处理客户端请求使用的时间<span class="comment">; 从读取客户端的第一个字节开始计时</span></span></span><br><span class="line">$request_uri             <span class="meta">#这个变量等于包含一些客户端请求参数的原始URI，它无法修改，请查看$uri更改或重写URI，不包含主机名，例如：<span class="string">&quot;/cnphp/test.php?arg=freemouse&quot;</span></span></span><br><span class="line">$scheme                  <span class="meta">#请求使用的Web协议，<span class="string">&quot;http&quot;</span> 或 <span class="string">&quot;https&quot;</span></span></span><br><span class="line">$server_addr             <span class="meta">#服务器端地址，需要注意的是：为了避免访问linux系统内核，应将ip地址提前设置在配置文件中</span></span><br><span class="line">$server_name             <span class="meta">#服务器名</span></span><br><span class="line">$server_port             <span class="meta">#服务器端口</span></span><br><span class="line">$server_protocol         <span class="meta">#服务器的HTTP版本，通常为 <span class="string">&quot;HTTP/1.0&quot;</span> 或 <span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line">$status                  <span class="meta">#HTTP响应代码</span></span><br><span class="line">$time_iso8601            <span class="meta">#服务器时间的ISO 8610格式</span></span><br><span class="line">$time_local              <span class="meta">#服务器时间（LOG Format 格式）</span></span><br><span class="line">$cookie_NAME             <span class="meta">#客户端请求Header头中的cookie变量，前缀<span class="string">&quot;$cookie_&quot;</span>加上cookie名称的变量，该变量的值即为cookie名称的值</span></span><br><span class="line">$http_NAME               <span class="meta">#匹配任意请求头字段；变量名中的后半部分NAME可以替换成任意请求头字段，如在配置文件中需要获取http请求头：<span class="string">&quot;Accept-Language&quot;</span>，$http_accept_language即可</span></span><br><span class="line">$http_cookie</span><br><span class="line">$http_post</span><br><span class="line">$http_referer</span><br><span class="line">$http_user_agent</span><br><span class="line">$http_x_forwarded_for</span><br><span class="line">$sent_http_NAME          <span class="meta">#可以设置任意http响应头字段；变量名中的后半部分NAME可以替换成任意响应头字段，如需要设置响应头Content-length，$sent_http_content_length即可</span></span><br><span class="line">$sent_http_cache_control</span><br><span class="line">$sent_http_connection</span><br><span class="line">$sent_http_content_type</span><br><span class="line">$sent_http_keep_alive</span><br><span class="line">$sent_http_last_modified</span><br><span class="line">$sent_http_location</span><br><span class="line">$sent_http_transfer_encoding</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>docker volume</title>
    <url>/2025/03/18/docker%20volume/</url>
    <content><![CDATA[<blockquote>
<p>docker volume 命令用于管理 Docker 卷（volume）。卷是用于持久化数据的文件系统，可以在容器之间共享和重用。通过使用卷，数据可以在容器停止或删除时仍然保留。</p>
</blockquote>
<span id="more"></span>
<h4 id="常用-docker-volume-命令"><a href="#常用-docker-volume-命令" class="headerlink" title="常用 docker volume 命令"></a>常用 docker volume 命令</h4><ul>
<li>docker volume ls: 列出所有卷</li>
<li>docker volume inspect: 查看卷的详细信息</li>
<li>docker volume create: 创建一个新卷</li>
<li>docker volume rm: 删除一个或多个卷</li>
<li>docker volume prune: 删除未使用的卷</li>
</ul>
<h4 id="数据卷的特点"><a href="#数据卷的特点" class="headerlink" title="数据卷的特点"></a><strong>数据卷的特点</strong></h4><p>Docker 数据卷是 Docker 容器中持久存储数据的机制，具有以下特点：</p>
<ol>
<li>持久性：数据卷独立于容器的生命周期，容器删除后数据卷仍然存在，可以被其他容器挂载和使用。</li>
<li>共享性：多个容器可以共享同一个数据卷，实现数据在容器之间的共享和传递。</li>
<li>数据卷可以提供外部数据：可以将主机文件系统的目录或文件挂载为数据卷，容器可以直接访问主机上的数据。</li>
<li>容器之间隔离：即使多个容器共享同一个数据卷，它们之间的操作仍然是相互隔离的，不会相互影响。</li>
<li>高性能：与将数据存储在容器内部相比，使用数据卷通常具有更高的性能，因为数据卷可以利用主机文件系统的优势。</li>
<li>可备份和恢复：可以轻松备份和恢复数据卷中的数据，方便进行数据管理和迁移。</li>
</ol>
<hr>
<p>一般有两种方式volume和bind<br>区别就是volume是创建具体卷，然后docker run时挂载，bind是映射本地路径到docker内部</p>
<h5 id="挂载卷volume"><a href="#挂载卷volume" class="headerlink" title="挂载卷volume"></a>挂载卷volume</h5><h6 id="匿名卷"><a href="#匿名卷" class="headerlink" title="匿名卷"></a>匿名卷</h6><p>什么也不需要写，也不要加冒号，直接写容器内的目录 实际上是系统自动生成一个卷的名字</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">docker run -d <span class="attr">--name</span> nginx -<span class="selector-tag">P</span> -v /usr/share/nginx/<span class="selector-tag">html</span> nginx</span><br></pre></td></tr></table></figure>
<p>docker inspect nginx</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;Mounts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;volume&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6cdfbbd3af615d05c810683e6769dc546339a72f59a1afecc42e2b272b092c1f&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/docker/volumes/6cdfbbd3af615d05c810683e6769dc546339a72f59a1afecc42e2b272b092c1f/_data&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Destination&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/share/nginx/html&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Driver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;local&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;RW&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Propagation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<p>测试持久化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">入容器内目录创建<span class="built_in">test</span>文件</span><br><span class="line">docker <span class="built_in">exec</span> -it e58f27acf6a9 bash</span><br><span class="line"><span class="built_in">touch</span> test.html</span><br></pre></td></tr></table></figure>
<h6 id="具名卷"><a href="#具名卷" class="headerlink" title="具名卷"></a>具名卷</h6><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">首先创建一个 <span class="keyword">volume</span><span class="language-bash"> nginx</span></span><br></pre></td></tr></table></figure>
<p>docker volume create nginx</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">使用具名卷映射</span><br></pre></td></tr></table></figure>
<p> docker run -d –name nginx -P -v nginx:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html nginx<br> <figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">        <span class="string">&quot;Mounts&quot;</span>: [</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;volume&quot;</span>,</span><br><span class="line">               <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;nginx&quot;</span>,</span><br><span class="line">               <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/nginx/_data&quot;</span>,</span><br><span class="line">               <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/usr/share/nginx/html&quot;</span>,</span><br><span class="line">               <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">               <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;z&quot;</span>,</span><br><span class="line">               <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">               <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">           &#125;</span><br><span class="line">       ],</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h5 id="绑定挂载-bind"><a href="#绑定挂载-bind" class="headerlink" title="绑定挂载(bind)"></a>绑定挂载(bind)</h5><p>将本地主机的 path 映射到 容器里</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">docker run -d --name nginx -P -v /tmp/nginx:/usr/share/nginx/html nginx</span><br><span class="line"><span class="number">290</span>dc<span class="number">693</span><span class="keyword">c</span><span class="number">156</span>a<span class="number">28e34160</span>fbce<span class="number">8</span>d<span class="number">222</span><span class="keyword">c</span><span class="number">7</span>f<span class="number">4</span><span class="keyword">c</span><span class="number">4</span>fc<span class="number">01</span>ecfc<span class="number">670628</span><span class="keyword">c</span><span class="number">6</span>d<span class="number">41517</span>ea<span class="number">532</span>b</span><br></pre></td></tr></table></figure>
<p>查看容器</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">[root@localhost]~ docker inspect nginx</span><br><span class="line">...</span><br><span class="line"><span class="string">&quot;Mounts&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/tmp/nginx&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/usr/share/nginx/html&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;RW&quot;</span>: true,</span><br><span class="line">                <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;rprivate&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>查看所有volume，可以看出来没有多出来的 volume name</p>
<p>使用 bind 方式做数据卷的映射时，首次 docker run -v 运行，如果本机的文件夹是没有内容的，docker容器中的文件夹是有内容的，则本机的会覆盖dokcer容器中的，也就是容器中原本有内容的也会没有内容<br>如果本机的文件夹是有内容的，docker容器中的文件夹是有内容的，则本机的会覆盖dokcer容器中的 由于宿主机上 &#x2F;tmp&#x2F;nginx 这个目录底下没有文件，所以容器内的数据会被主机目录覆盖清空。</p>
]]></content>
  </entry>
  <entry>
    <title>docker的安装和应用</title>
    <url>/2025/03/17/docker%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。<br>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。<br>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p>
</blockquote>
<span id="more"></span>
<p>Docker的应用场景<br>Web 应用的自动化打包和发布。</p>
<ul>
<li>自动化测试和持续集成、发布。</li>
<li>在服务型环境中部署和调整数据库或其他的后台应用。</li>
<li>从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境。</li>
</ul>
<h5 id="安装-以centos为例"><a href="#安装-以centos为例" class="headerlink" title="安装(以centos为例)"></a>安装(以centos为例)</h5><h6 id="使用官方安装脚本自动安装"><a href="#使用官方安装脚本自动安装" class="headerlink" title="使用官方安装脚本自动安装"></a>使用官方安装脚本自动安装</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">curl</span> <span class="literal">-fsSL</span> https://get.docker.com <span class="literal">-o</span> <span class="built_in">install-docker</span>.sh</span><br><span class="line"><span class="variable">$</span> sudo sh <span class="built_in">install-docker</span>.sh</span><br></pre></td></tr></table></figure>
<h6 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h6><p>在新主机上首次安装 Docker 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker。<br>设置仓库<br>安装 dnf-plugins-core 包（提供管理 DNF 仓库的命令），并设置仓库。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo dnf -y <span class="keyword">install</span> dnf-plugins-core</span><br></pre></td></tr></table></figure>
<p>使用以下命令来设置稳定的仓库</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">sudo dnf config-manager --<span class="built_in">add</span>-repo https://download.docker.<span class="keyword">com</span>/linux/centos/docker-<span class="keyword">ce</span>.repo</span><br></pre></td></tr></table></figure>
<p>可以执行以下命令换成清华大学的镜像源：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s+https:<span class="string">//download.docker.com</span>+https:<span class="string">//mirrors.tuna.tsinghua.edu.cn/docker-ce</span>+&#x27; <span class="string">/etc/yum.repos.d/docker-ce.repo</span></span><br></pre></td></tr></table></figure>
<p>运行以下命令安装Docker</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">sudo dnf install docker-ce docker-ce-<span class="keyword">cli</span> containerd.io docker-buildx-<span class="keyword">plugin</span> docker-compose-<span class="keyword">plugin</span></span><br></pre></td></tr></table></figure>
<p>如果提示接受 GPG 密钥，验证指纹是否与 060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35 匹配，如果匹配则接受。<br>安装成功后，启动 Docker 引擎：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="literal">start</span> docker</span><br></pre></td></tr></table></figure>
<p>如果希望 Docker 在系统启动时也启动可以使用以下命令</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="keyword">enable</span> <span class="comment">--now docker</span></span><br></pre></td></tr></table></figure>
<p>国内从 DockerHub 拉取镜像有时会遇到困难，此时可以配置镜像加速器<br>在 &#x2F;etc&#x2F;docker&#x2F;daemon.json 中写入如下内容</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;registry-mirrors&quot;</span>:[<span class="string">&quot;https://docker.1panel.live&quot;</span>]&#125;</span><br></pre></td></tr></table></figure>
<h6 id="卸载-docker"><a href="#卸载-docker" class="headerlink" title="卸载 docker"></a>卸载 docker</h6><p>删除安装包</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">yum <span class="built_in">remove</span> docker-ce</span><br></pre></td></tr></table></figure>
<p>删除镜像、容器、配置文件等内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf /var/lib/docker</span><br></pre></td></tr></table></figure>
<hr>
<h5 id="Docker使用"><a href="#Docker使用" class="headerlink" title="Docker使用"></a>Docker使用</h5><h6 id="常用的-Docker-客户端命令"><a href="#常用的-Docker-客户端命令" class="headerlink" title="常用的 Docker 客户端命令"></a>常用的 Docker 客户端命令</h6><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">docker run  启动一个新的容器并运行命令   docker run -d ubuntu</span><br><span class="line">docker <span class="keyword">ps</span>   列出当前正在运行的容器 docker <span class="keyword">ps</span></span><br><span class="line">docker <span class="keyword">ps</span> -<span class="keyword">a</span>    列出所有容器（包括已停止的容器）    docker <span class="keyword">ps</span> -<span class="keyword">a</span></span><br><span class="line">docker build    使用 Dockerfile 构建镜像  docker build -t my-image .</span><br><span class="line">docker images   列出本地存储的所有镜像 docker images</span><br><span class="line">docker pull 从 Docker 仓库拉取镜像 docker pull ubuntu</span><br><span class="line">docker push 将镜像推送到 Docker 仓库    docker push my-image</span><br><span class="line">docker exec 在运行的容器中执行命令 docker exec -it container_name bash</span><br><span class="line">docker <span class="keyword">stop</span> 停止一个或多个容器   docker <span class="keyword">stop</span> container_name</span><br><span class="line">docker start    启动已停止的容器    docker start container_name</span><br><span class="line">docker restart  重启一个容器  docker restart container_name</span><br><span class="line">docker rm   删除一个或多个容器   docker rm container_name</span><br><span class="line">docker rmi  删除一个或多个镜像   docker rmi my-image</span><br><span class="line">docker logs 查看容器的日志 docker logs container_name</span><br><span class="line">docker inspect  获取容器或镜像的详细信息    docker inspect container_name</span><br><span class="line">docker exec -it 进入容器的交互式终端  docker exec -it container_name /bin/bash</span><br><span class="line">docker network <span class="keyword">ls</span>   列出所有 Docker 网络  docker network <span class="keyword">ls</span></span><br><span class="line">docker volume <span class="keyword">ls</span>    列出所有 Docker 卷   docker volume <span class="keyword">ls</span></span><br><span class="line">docker-compose <span class="keyword">up</span>   启动多容器应用（从 docker-compose.yml 文件）    docker-compose <span class="keyword">up</span></span><br><span class="line">docker-compose down 停止并删除由 docker-compose 启动的容器、网络等 docker-compose down</span><br><span class="line">docker info 显示 Docker 系统的详细信息   docker info</span><br><span class="line">docker <span class="keyword">version</span>  显示 Docker 客户端和守护进程的版本信息 docker <span class="keyword">version</span></span><br><span class="line">docker stats    显示容器的实时资源使用情况   docker stats</span><br><span class="line">docker login    登录 Docker 仓库    docker login</span><br><span class="line">docker logout   登出 Docker 仓库    docker logout</span><br></pre></td></tr></table></figure>
<h6 id="拉取并启动镜像"><a href="#拉取并启动镜像" class="headerlink" title="拉取并启动镜像"></a>拉取并启动镜像</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker pull ubuntu</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -it ubuntu /bin/bash</span></span><br></pre></td></tr></table></figure>
<h6 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h6><p>在大部分的场景下，我们希望 docker 的服务是在后台运行的，我们可以过 -d 指定容器的运行模式</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">run</span> -itd <span class="comment">--name ubuntu-test ubuntu /bin/bash</span></span><br></pre></td></tr></table></figure>
<p>加了 -d 参数默认不会进入容器，想要进入容器需要使用指令 docker exec<br>在使用 -d 参数时启动容器时，容器会运行在后台，这时如果要进入容器，可以通过以下命令进入</p>
<ul>
<li>docker attach：允许你与容器的标准输入（stdin）、输出（stdout）和标准错误（stderr）进行交互。</li>
<li>docker exec：推荐大家使用 docker exec 命令，因为此命令会退出容器终端，但不会导致容器的停止<br>使用 docker exec 命令实例<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker exec -it 8609b96bacf9 /bin/bash</span><br><span class="line"></span><br><span class="line">root@8609b96bacf9:/# cat /etc/os-release</span><br><span class="line"><span class="attribute">PRETTY_NAME</span>=<span class="string">&quot;Ubuntu 24.04.1 LTS&quot;</span></span><br><span class="line"><span class="attribute">NAME</span>=<span class="string">&quot;Ubuntu&quot;</span></span><br><span class="line"><span class="attribute">VERSION_ID</span>=<span class="string">&quot;24.04&quot;</span></span><br><span class="line"><span class="attribute">VERSION</span>=<span class="string">&quot;24.04.1 LTS (Noble Numbat)&quot;</span></span><br><span class="line"><span class="attribute">VERSION_CODENAME</span>=noble</span><br><span class="line"><span class="attribute">ID</span>=ubuntu</span><br><span class="line"><span class="attribute">ID_LIKE</span>=debian</span><br><span class="line"><span class="attribute">HOME_URL</span>=<span class="string">&quot;https://www.ubuntu.com/&quot;</span></span><br><span class="line"><span class="attribute">SUPPORT_URL</span>=<span class="string">&quot;https://help.ubuntu.com/&quot;</span></span><br><span class="line"><span class="attribute">BUG_REPORT_URL</span>=<span class="string">&quot;https://bugs.launchpad.net/ubuntu/&quot;</span></span><br><span class="line"><span class="attribute">PRIVACY_POLICY_URL</span>=<span class="string">&quot;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&quot;</span></span><br><span class="line"><span class="attribute">UBUNTU_CODENAME</span>=noble</span><br><span class="line"><span class="attribute">LOGO</span>=ubuntu-logo</span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="导出和导入容器"><a href="#导出和导入容器" class="headerlink" title="导出和导入容器"></a>导出和导入容器</h6><p>如果要导出本地某个容器，可以使用 docker export 命令</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line">$ docker ex<span class="keyword">port</span> 1e560fca3906 &gt; ubuntu.tar</span><br></pre></td></tr></table></figure>
<p>这样将导出容器快照到本地文件<br>可以使用 docker import 从容器快照文件中再导入为镜像，以下实例将快照文件 ubuntu.tar 导入到镜像 test&#x2F;ubuntu:v1:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> docker/ubuntu.tar | docker import - <span class="built_in">test</span>/ubuntu:v1</span></span><br></pre></td></tr></table></figure>
<p>此外，也可以通过指定 URL 或者某个目录来导入，例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker import http://example.com/exampleimage.tgz example/imagerepo</span></span><br></pre></td></tr></table></figure>
<h6 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h6><p>删除容器使用 docker rm 命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> docker <span class="built_in">rm</span> <span class="operator">-f</span> <span class="number">1</span>e560fca3906</span><br></pre></td></tr></table></figure>
<p>下面的命令可以清理掉所有处于终止状态的容器。</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">container</span> prune</span><br></pre></td></tr></table></figure>
<h6 id="更新镜像"><a href="#更新镜像" class="headerlink" title="更新镜像"></a>更新镜像</h6><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -t -i ubuntu:15.10 /bin/bash</span><br><span class="line">进入容器后，更新系统</span><br><span class="line">apt-<span class="built_in">get</span> update</span><br><span class="line">apt-<span class="built_in">get</span><span class="built_in"> upgrade </span>-y</span><br><span class="line">此时容器已经更新可以通过命令 docker commit 来提交容器副本</span><br><span class="line">docker commit <span class="attribute">-m</span>=<span class="string">&quot;update ubuntu&quot;</span> <span class="attribute">-a</span>=<span class="string">&quot;localhot-yc&quot;</span> 8536122de457 ubuntu:v2last</span><br></pre></td></tr></table></figure>
<p>各个参数说明：<br>-m: 提交的描述信息<br>-a: 指定镜像作者<br>8536122de457：容器 ID<br>ubuntu:v2last: 指定要创建的目标镜像名</p>
<h6 id="Docker容器互联"><a href="#Docker容器互联" class="headerlink" title="Docker容器互联"></a>Docker容器互联</h6><p>下面先创建一个新的 Docker 网络</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker<span class="built_in"> network </span>create -d<span class="built_in"> bridge </span>test-net</span><br></pre></td></tr></table></figure>
<p>然后运行两个容器都连接到这个网络下</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">docker run -itd <span class="params">--name</span> test1 <span class="params">--network</span> test-net ubuntu <span class="string">/bin/bash</span></span><br><span class="line">docker run -itd <span class="params">--name</span> test2 <span class="params">--network</span> test-net ubuntu <span class="string">/bin/bash</span></span><br></pre></td></tr></table></figure>
<h6 id="配置-DNS"><a href="#配置-DNS" class="headerlink" title="配置 DNS"></a>配置 DNS</h6><p>我们可以在宿主机的 &#x2F;etc&#x2F;docker&#x2F;daemon.json 文件中增加以下内容来设置全部容器的 DNS：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;dns&quot;</span> : [</span><br><span class="line">    <span class="string">&quot;114.114.114.114&quot;</span>,</span><br><span class="line">    <span class="string">&quot;8.8.8.8&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>设置后，启动容器的 DNS 会自动配置为 114.114.114.114 和 8.8.8.8。<br>配置完，需要重启 docker 才能生效。<br>查看容器的 DNS 是否生效可以使用以下命令，它会输出容器的 DNS 信息：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -it --<span class="built_in">rm</span>  ubuntu  <span class="built_in">cat</span> etc/resolv.conf</span></span><br></pre></td></tr></table></figure>
<p>手动指定容器的配置<br>如果只想在指定的容器设置 DNS，则可以使用以下命令：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">run</span> -it --rm -h host_ubuntu  <span class="attribute">--dns</span>=114.114.114.114 <span class="attribute">--dns-search</span>=test.com ubuntu</span><br></pre></td></tr></table></figure>
<p>参数说明：<br>–rm：容器退出时自动清理容器内部的文件系统。<br>-h HOSTNAME 或者 –hostname&#x3D;HOSTNAME： 设定容器的主机名，它会被写到容器内的 &#x2F;etc&#x2F;hostname 和 &#x2F;etc&#x2F;hosts。<br>–dns&#x3D;IP_ADDRESS： 添加 DNS 服务器到容器的 &#x2F;etc&#x2F;resolv.conf 中，让容器用这个服务器来解析所有不在 &#x2F;etc&#x2F;hosts 中的主机名。<br>–dns-search&#x3D;DOMAIN： 设定容器的搜索域，当设定搜索域为 .example.com 时，在搜索一个名为 host 的主机时，DNS 不仅搜索 host，还会搜索 host.example.com。<br>如果在容器启动时没有指定 –dns 和 –dns-search，Docker 会默认用宿主主机上的 &#x2F;etc&#x2F;resolv.conf 来配置容器的 DNS。</p>
<hr>
<h5 id="操作实例"><a href="#操作实例" class="headerlink" title="操作实例"></a>操作实例</h5><blockquote>
<p>使用docker安装一个web应用，并配套php,mysql<br>拉取一个web应用，-p指定端口映射</p>
</blockquote>
<h6 id="拉取nginx"><a href="#拉取nginx" class="headerlink" title="拉取nginx"></a>拉取nginx</h6><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> pull nginx:latest 这里我们拉取官方的最新版本的镜像</span><br><span class="line"><span class="attribute">docker</span> run -itd --name nginx-test -p <span class="number">8080</span>:<span class="number">81</span> nginx</span><br></pre></td></tr></table></figure>

<h6 id="拉取php"><a href="#拉取php" class="headerlink" title="拉取php"></a>拉取php</h6><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">docker pull php<span class="function">:5.6-fpm</span></span><br><span class="line">docker run <span class="params">--name</span> php-fpm5.6 -v ~<span class="string">/home/wwwroot/test</span>:<span class="string">/www</span> -d php<span class="function">:5.6-fpm</span></span><br><span class="line">将主机中项目的目录 <span class="string">/home/wwwroot/test</span> 挂载到容器的 <span class="string">/www</span></span><br></pre></td></tr></table></figure>
<p>创建 ~&#x2F;nginx&#x2F;conf&#x2F;conf.d 目录</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mkdir</span> ~/nginx/<span class="keyword">conf</span>/<span class="keyword">conf</span>.<span class="keyword">d</span></span><br></pre></td></tr></table></figure>
<p>该目录下添加 ~&#x2F;nginx&#x2F;conf&#x2F;conf.d&#x2F;test-php.conf 文件，内容如下</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm index.php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span>   php:<span class="number">9000</span>;</span><br><span class="line">        <span class="attribute">fastcgi_index</span>  index.php;</span><br><span class="line">        <span class="attribute">fastcgi_param</span>  SCRIPT_FILENAME  /www/<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="attribute">include</span>        fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动 nginx</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker run --name wordrepss -p <span class="number">8083</span>:<span class="number">80</span> -d -v <span class="regexp">/home/</span>wwwroot<span class="regexp">/test:/u</span>sr<span class="regexp">/share/</span>nginx<span class="regexp">/html:ro -v ~/</span>nginx<span class="regexp">/conf/</span>conf.d:<span class="regexp">/etc/</span>nginx/conf.d:ro --link wordpress-php:php nginx</span><br></pre></td></tr></table></figure>
<p>-p 8083:80: 端口映射，把 nginx 中的 80 映射到本地的 8083 端口。<br>~&#x2F;home&#x2F;wwwroot&#x2F;testw: 是本地 html 文件的存储目录，&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html 是容器内 html 文件的存储目录。<br>~&#x2F;nginx&#x2F;conf&#x2F;conf.d: 是本地 nginx 配置文件的存储目录，&#x2F;etc&#x2F;nginx&#x2F;conf.d 是容器内 nginx 配置文件的存储目录。<br>–link wordpress-php:php: 把 myphp-fpm 的网络并入 nginx，并通过修改 nginx 的 &#x2F;etc&#x2F;hosts，把域名 php 映射成 127.0.0.1，让 nginx 通过 php:9000 访问 php-fpm。</p>
<h6 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h6><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="regexp">/root/</span>docker<span class="regexp">/mysql/</span>conf <span class="regexp">/root/</span>docker<span class="regexp">/mysql/</span>logs <span class="regexp">/root/</span>docker<span class="regexp">/mysql/</span>data</span><br><span class="line">docker run -p <span class="number">3307</span>:<span class="number">3306</span> --name mysql -v <span class="regexp">/root/</span>docker<span class="regexp">/mysql/</span>conf:<span class="regexp">/mysql -v /</span>root<span class="regexp">/docker/my</span>sql<span class="regexp">/logs:/</span>logs -v <span class="regexp">/root/</span>docker<span class="regexp">/mysql/</span>data:/mysql_data -e MYSQL_ROOT_PASSWORD=west@<span class="number">999</span> -d --link wordpress-php mysql:<span class="number">5.7</span></span><br></pre></td></tr></table></figure>
<p>进入数据库</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">docker run -d <span class="attr">--name</span> phpmyadmin <span class="attr">--link</span> mysql:db -<span class="selector-tag">p</span> <span class="number">8082</span>:<span class="number">80</span> phpmyadmin:latest</span><br></pre></td></tr></table></figure>
<p>使用docker –link需要注意以下几点：</p>
<ul>
<li>使用link选项建立的容器所链接的主机需要在运行状态</li>
<li>使用link选项建立的容器运行时需要所链接的容器也必须是运行状态</li>
<li>使用link选项链接的主机ip不需要固定，因为每次新建容器都会检查所链接容器的ip，在&#x2F;etc&#x2F;hosts里生成新的alias 名称对应的ip<br>docker –link 使用了link机制后，可以通过指定的名字来和目标容器通信，这其实是通过给&#x2F;etc&#x2F;hosts中加入名称和IP的解析关系来实现的。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>mysql占用库占用内存情况</title>
    <url>/2024/04/02/mysql%E5%8D%A0%E7%94%A8%E5%BA%93%E5%8D%A0%E7%94%A8%E5%86%85%E5%AD%98%E6%83%85%E5%86%B5/</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="查看哪个库占用内存情况"><a href="#查看哪个库占用内存情况" class="headerlink" title="查看哪个库占用内存情况"></a>查看哪个库占用内存情况</h3><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">table_schema <span class="keyword">AS</span> <span class="symbol">`Database`</span>,</span><br><span class="line"><span class="built_in">SUM</span>(data_length + index_length) / <span class="number">1024</span> / <span class="number">1024</span> <span class="keyword">AS</span> <span class="symbol">`Size (MB)`</span></span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">information_schema.TABLES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">table_schema;</span><br></pre></td></tr></table></figure>
<h3 id="如果你想要查看具体是哪些表占用了内存，可以进一步加入表名："><a href="#如果你想要查看具体是哪些表占用了内存，可以进一步加入表名：" class="headerlink" title="如果你想要查看具体是哪些表占用了内存，可以进一步加入表名："></a>如果你想要查看具体是哪些表占用了内存，可以进一步加入表名：</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">table_schema <span class="keyword">AS</span> `<span class="keyword">Database</span>`,</span><br><span class="line"><span class="built_in">table_name</span> <span class="keyword">AS</span> `<span class="keyword">Table</span>`,</span><br><span class="line">(data_length + index_length) / <span class="number">1024</span> / <span class="number">1024</span> <span class="keyword">AS</span> `Size (MB)`</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">information_schema.<span class="keyword">TABLES</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">(data_length + index_length) <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql的proxy机制实现读写分离和主从同步</title>
    <url>/2023/12/25/mysql%E7%9A%84proxy%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E5%92%8C%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<blockquote>
<p>实现对两台mysql服务器的读写分离操作，两台mysql提供的测试数据库内容一致(这里主要通过手工同步两台mysql测试数据库的内容，没有使用mysql主从，主要是方便测试)<br><img src="/2023/12/25/mysql%E7%9A%84proxy%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E5%92%8C%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/1703465991108.jpg"></p>
</blockquote>
<span id="more"></span>
<h5 id="mysql-proxy部署"><a href="#mysql-proxy部署" class="headerlink" title="mysql-proxy部署"></a>mysql-proxy部署</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">tar zxf mysql-proxy-0.8.5-linux-el6-x86-64bit.tar.gz -C /usr/local    #解压到指定目录</span><br><span class="line">cd /usr/local</span><br><span class="line">mv mysql-proxy-0.8.5-linux-el6-x86-64bit mysql-proxy    #重命名，方便管理</span><br><span class="line">cd mysql-proxy/</span><br><span class="line">mkdir conf    #创建配置文件目录</span><br><span class="line">mkdir log     #创建日志文件目录</span><br><span class="line">vim conf/mysql-proxy.conf    #编写配置文件, 添加如下</span><br><span class="line"></span><br><span class="line">[mysql-proxy]</span><br><span class="line"><span class="attribute">user</span>=root</span><br><span class="line"><span class="attribute">admin-username</span>=root</span><br><span class="line"><span class="attribute">admin-password</span>=root</span><br><span class="line"><span class="comment"># 监听代理地址</span></span><br><span class="line"><span class="attribute">proxy-address</span>=192.168.108.102:4040</span><br><span class="line"><span class="comment"># 写的地址</span></span><br><span class="line"><span class="attribute">proxy-backend-addresses</span>=192.168.108.100:3306</span><br><span class="line"><span class="comment"># 读的地址</span></span><br><span class="line"><span class="attribute">proxy-read-only-backend-addresses</span>=192.168.108.101:3306</span><br><span class="line"><span class="comment"># 读写脚本</span></span><br><span class="line"><span class="attribute">proxy-lua-script</span>=/usr/local/mysql-proxy/share/doc/mysql-proxy/rw-splitting.lua</span><br><span class="line"><span class="attribute">admin-lua-script</span>=/usr/local/mysql-proxy/share/doc/mysql-proxy/admin.lua</span><br><span class="line"><span class="comment"># 日志存放位置</span></span><br><span class="line"><span class="attribute">log-file</span>=/usr/local/mysql-proxy/log/mysql-proxy.log</span><br><span class="line"><span class="comment"># 日志等级 info, debug</span></span><br><span class="line"><span class="attribute">log-level</span>=info</span><br><span class="line"><span class="comment"># 守护进程</span></span><br><span class="line"><span class="attribute">daemon</span>=1</span><br><span class="line"><span class="comment"># 心跳检测</span></span><br><span class="line"><span class="attribute">keepalive</span>=1</span><br></pre></td></tr></table></figure>
<p>修改lua脚本，默认超过4个连接才会启用读写分离，改为超过2个连接启用读写分离</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">vim <span class="keyword">/usr/</span>local<span class="keyword">/mysql-proxy/</span>share<span class="keyword">/doc/</span>mysql-proxy/rw-splitting.lua</span><br><span class="line">min_idle_<span class="attr">connections</span> <span class="operator">=</span> <span class="number">1</span>,</span><br><span class="line">max_idle_<span class="attr">connections</span> <span class="operator">=</span> <span class="number">2</span>,</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">ps:</span>我测试都改为了<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>在启动前我们需要为配置文件加上660权限，没有修改权限，则会报错</p>
<h5 id="mysql主从配置"><a href="#mysql主从配置" class="headerlink" title="mysql主从配置"></a>mysql主从配置</h5><p><img src="/2023/12/25/mysql%E7%9A%84proxy%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E5%92%8C%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/1703466094951.jpg"></p>
<h6 id="主数据库"><a href="#主数据库" class="headerlink" title="- 主数据库"></a>- 主数据库</h6><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务的唯一编号</span></span><br><span class="line"><span class="attr">server-id</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启mysql binlog功能</span></span><br><span class="line"><span class="attr">log-bin</span> = mysql-bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># binlog记录内容的方式，记录被操作的每一行</span></span><br><span class="line"><span class="attr">binlog_format</span> = ROW</span><br><span class="line"></span><br><span class="line"><span class="comment"># 减少记录日志的内容，只记录受影响的列</span></span><br><span class="line"><span class="attr">binlog_row_image</span> = minimal</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定需要复制的数据库名为jgyw</span></span><br><span class="line"><span class="attr">binlog-do-db</span> = jgyw</span><br></pre></td></tr></table></figure>
<h6 id="修改好配置文件，重启mysql服务"><a href="#修改好配置文件，重启mysql服务" class="headerlink" title="- 修改好配置文件，重启mysql服务"></a>- 修改好配置文件，重启mysql服务</h6><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">service mysqld restart</span></span><br></pre></td></tr></table></figure>
<h6 id="创建从库同步数据的账号"><a href="#创建从库同步数据的账号" class="headerlink" title="- 创建从库同步数据的账号"></a>- 创建从库同步数据的账号</h6><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">grant</span> <span class="keyword">replication</span> slave <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">&#x27;jgyw&#x27;</span>@<span class="string">&#x27;192.168.197.136&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;jgyw@123&#x27;</span>;</span><br><span class="line">$ flush <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure>
<p><strong>注意：上面这两个命令是在mysql的终端执行的。</strong></p>
<h6 id="查看主库的状态"><a href="#查看主库的状态" class="headerlink" title="- 查看主库的状态"></a>- 查看主库的状态</h6><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">show master status\G;</span><br><span class="line"> </span><br><span class="line">返回的信息为：</span><br><span class="line"><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">*** 1. row **</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span>*</span><br><span class="line"><span class="code">             File: mysql-bin.000002</span></span><br><span class="line"><span class="code">         Position: 2380</span></span><br><span class="line"><span class="code">     Binlog_Do_DB: jgyw</span></span><br><span class="line"><span class="code"> Binlog_Ignore_DB: </span></span><br><span class="line"><span class="code">Executed_Gtid_Set: </span></span><br><span class="line"><span class="code">1 row in set (0.00 sec)</span></span><br></pre></td></tr></table></figure>
<h6 id="配置从库"><a href="#配置从库" class="headerlink" title="- 配置从库"></a>- 配置从库</h6><p> 修改my.cnf文件，在[mysqld]加入下面的内容：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务的唯一编号</span></span><br><span class="line"><span class="attr">server-id</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启mysql binlog功能</span></span><br><span class="line"><span class="attr">log-bin</span> = mysql-bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># binlog记录内容的方式，记录被操作的每一行</span></span><br><span class="line"><span class="attr">binlog_format</span> = ROW</span><br><span class="line"></span><br><span class="line"><span class="comment"># 减少记录日志的内容，只记录受影响的列</span></span><br><span class="line"><span class="attr">binlog_row_image</span> = minimal</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定需要复制的数据库名为jgyw</span></span><br><span class="line"><span class="attr">replicate-do-db</span> = jgyw</span><br></pre></td></tr></table></figure>
<h6 id="修改好配置文件，重启mysql服务-1"><a href="#修改好配置文件，重启mysql服务-1" class="headerlink" title="- 修改好配置文件，重启mysql服务"></a>- 修改好配置文件，重启mysql服务</h6><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">service mysqld restart</span></span><br></pre></td></tr></table></figure>
<h6 id="执行同步命令"><a href="#执行同步命令" class="headerlink" title="- 执行同步命令"></a>- 执行同步命令</h6><p>mysql的终端执行:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置主服务器ip，同步账号密码，同步位置</span></span><br><span class="line"><span class="attribute">change</span> master to master_host=<span class="string">&#x27;192.168.197.135&#x27;</span>,master_user=<span class="string">&#x27;jgyw&#x27;</span>,master_password=<span class="string">&#x27;jgyw@123&#x27;</span>,master_log_file=<span class="string">&#x27;mysql-bin.000002&#x27;</span>,master_log_pos=<span class="number">2380</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启同步功能</span></span><br><span class="line"><span class="attribute">start</span> slave;</span><br></pre></td></tr></table></figure>
<h6 id="查看从库的状态"><a href="#查看从库的状态" class="headerlink" title="- 查看从库的状态"></a>- 查看从库的状态</h6><p>mysql的终端执行:</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">show</span> slave <span class="built_in">status</span>\G;</span><br></pre></td></tr></table></figure>
<p><img src="/2023/12/25/mysql%E7%9A%84proxy%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E5%92%8C%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/1703466380225.jpg"></p>
<p>注意：Slave_IO_Running和Slave_SQL_Running的状态都为Yes时，说明从库配置成功。<br><a href="https://blog.csdn.net/haoding205/article/details/81459153">https://blog.csdn.net/haoding205/article/details/81459153</a></p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 相关问题以及备份常用方法</title>
    <url>/2025/03/13/mysql%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E5%A4%87%E4%BB%BD%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>InnoDB和MyISAM是MySQL中两种主要的存储引擎，它们在多个方面存在显著差异</p>
</blockquote>
<span id="more"></span>
<ul>
<li>‌InnoDB必须定义主键‌，如果没有定义主键，MySQL会自动选择一个唯一列作为主键，或者创建一个隐藏的主键。而MyISAM可以没有主键‌<br>事务支持</li>
<li>‌InnoDB支持事务处理‌，具有ACID事务特性，适合处理大量数据和复杂的数据库操作。它提供了完整的事务控制机制，能够保证数据的一致性和完整性‌</li>
<li>‌MyISAM不支持事务‌，因此不适合需要事务处理的场景‌<br>锁机制</li>
<li>‌InnoDB支持行级锁定‌，适合高并发环境，能够减少锁定时间和提高并发性能‌</li>
<li>‌MyISAM只支持表级锁定‌，效率相对较低，但在执行大量SELECT查询时性能更好‌<br>外键支持</li>
<li>‌InnoDB支持外键‌，能够维护表之间的关系，保证数据的一致性和完整性‌</li>
<li>‌MyISAM不支持外键‌，无法维护表之间的关系‌<br>适用场景</li>
<li>‌InnoDB适合需要事务处理、高并发和复杂查询的场景‌，如在线事务处理（OLTP）系统‌</li>
<li>‌MyISAM适合读取密集型的应用‌，如数据仓库和静态网站内容‌</li>
</ul>
<h3 id="innodb"><a href="#innodb" class="headerlink" title="innodb"></a>innodb</h3><p>默认innodb使用共享表空间，生成一个idb文件，如果数据库较大相应的idb文件会持续增加，不利于备份和管理，也容易造成数据损坏<br>在my.cnf中[mysqld]下设置</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">innodb_file_per_table</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>开启独立表空间，重启mysql生效</p>
<h3 id="mysql备份"><a href="#mysql备份" class="headerlink" title="mysql备份"></a>mysql备份</h3><ul>
<li>mysqldump</li>
<li>xtrabackup</li>
</ul>
<h5 id="mysqldump"><a href="#mysqldump" class="headerlink" title="mysqldump"></a>mysqldump</h5><p>导出包括系统数据库在内的所有数据库</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -proot --<span class="built_in">all</span>-databases &gt;<span class="regexp">/tmp/</span><span class="built_in">all</span>.sql</span><br></pre></td></tr></table></figure>
<p>导出db1、db2两个数据库的所有数据</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -proot <span class="params">--databases</span> db1 db2 &gt;<span class="string">/tmp/user.sql</span></span><br></pre></td></tr></table></figure>
<p>导出db1中的a1、a2表</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -proot <span class="params">--databases</span> db1 <span class="params">--tables</span> a1 a2  &gt;<span class="string">/tmp/db1.sql</span></span><br></pre></td></tr></table></figure>
<p>条件导出，导出db1表a1中id&#x3D;1的数据</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -proot <span class="params">--databases</span> db1 <span class="params">--tables</span> a1 <span class="params">--where=</span>&#x27;id=1&#x27;  &gt;<span class="string">/tmp/a1.sql</span></span><br></pre></td></tr></table></figure>
<p>mysqldump还原</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">mysqldump -u用户名 -<span class="selector-tag">p</span>密码 -h主机 数据库 &lt; 路径</span><br></pre></td></tr></table></figure>
<h5 id="xtrabackup"><a href="#xtrabackup" class="headerlink" title="xtrabackup"></a>xtrabackup</h5><blockquote>
<p>Xtrabackup是一个开源的免费的热备份工具，在Xtrabackup包中主要有Xtrabackup和innobakcupex两个工具。其中Xtrabackup只能备份InnoDB和XtraDB两种引擎；Innobackup则是封装了Xtrabackup，同时增加了备份MylSAM引擎功能。<br>Xtrabackup备份时不能备份表结构、触发器等等，也不能智能区分.idb数据库文件。另外innobakcup还不能完全支持增量备份，需要和Xtrabackup结合起来实现全备的功能</p>
</blockquote>
<p>Xtrabackup下载地址：<a href="https://www.percona.com/downloads/">https://www.percona.com/downloads/</a> 选择自己的版本下载<br><a href="https://downloads.percona.com/downloads/Percona-XtraBackup-2.4/Percona-XtraBackup-2.4.21/binary/redhat/7/x86_64/Percona-XtraBackup-2.4.21-r5988af5-el7-x86_64-bundle.tar">https://downloads.percona.com/downloads/Percona-XtraBackup-2.4/Percona-XtraBackup-2.4.21/binary/redhat/7/x86_64/Percona-XtraBackup-2.4.21-r5988af5-el7-x86_64-bundle.tar</a></p>
<p>依赖包下载，下载地址：<a href="http://rpmfind.net/linux/atrpms/el6-x86_64/atrpms/stable/libev-4.04-2.el6.x86_64.rpm">http://rpmfind.net/linux/atrpms/el6-x86_64/atrpms/stable/libev-4.04-2.el6.x86_64.rpm</a><br>或者参考</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>)下载 xtrabackup</span><br><span class="line"></span><br><span class="line">wget https:<span class="regexp">//</span>www.percona.com<span class="regexp">/downloads/</span>XtraBackup<span class="regexp">/Percona-XtraBackup-2.4.4/</span>binary<span class="regexp">/tarball/</span>percona-xtrabackup-<span class="number">2.4</span>.<span class="number">4</span>-Linux-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>)解压</span><br><span class="line"></span><br><span class="line"><span class="comment"># tar zxf percona-xtrabackup-2.4.4-Linux-x86_64.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>)进入解压目录</span><br><span class="line"></span><br><span class="line"><span class="comment"># cd percona-xtrabackup-2.4.4-Linux-x86_64/</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>)复制 bin 下的所有程序到<span class="regexp">/usr/</span>bin</span><br><span class="line"></span><br><span class="line">[root@localhost percona-xtrabackup-<span class="number">2.4</span>.<span class="number">4</span>-Linux-x86_64]<span class="comment"># cp bin/* /usr/bin/</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>)安装相关插件</span><br><span class="line"></span><br><span class="line"><span class="comment">#yum install perl-DBI perl-DBD-MySQL perl-Time-HiRes perl-IO-Socket-SSL </span></span><br><span class="line"></span><br><span class="line">perl-TermReadKey.x86_64 perl-Digest-MD5 –y</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>)下载 percona-toolkit 并安装</span><br><span class="line"></span><br><span class="line"><span class="comment">#wget </span></span><br><span class="line"></span><br><span class="line">https:<span class="regexp">//</span>www.percona.com<span class="regexp">/downloads/</span>percona-toolkit<span class="regexp">/2.2.19/</span>RPM/percona-toolkit-<span class="number">2.2</span>.<span class="number">19</span>-<span class="number">1</span>.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># rpm -vih percona-toolkit-2.2.19-1.noarch.rpm</span></span><br></pre></td></tr></table></figure>
<h6 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h6><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">innobackupex <span class="selector-attr">[参数]</span> <span class="selector-attr">[目的地址]</span> <span class="selector-attr">[源地址]</span></span><br></pre></td></tr></table></figure>
<h6 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h6><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="built_in">--user</span>					<span class="comment"># 以什么用于身份进行操作</span></span><br><span class="line"><span class="built_in">--password</span>				<span class="comment"># 数据库用户的密码</span></span><br><span class="line"><span class="built_in">--port</span>					<span class="comment"># 数据库的端口号，默认3306</span></span><br><span class="line"><span class="built_in">--stream</span>				<span class="comment"># 打包（数据流）</span></span><br><span class="line"><span class="built_in">--defaults-file</span>			<span class="comment"># 指定默认配置文件，默认读取/etc/my.cnf</span></span><br><span class="line"><span class="built_in">--no-timestamp</span>			<span class="comment"># 不创建时间戳文件，而改用目的地址（可以自动创建）</span></span><br><span class="line"><span class="built_in">--copy-back</span>				<span class="comment"># 备份还原的主要选项</span></span><br><span class="line"><span class="built_in">--incremental</span>			<span class="comment"># 使用增量备份，默认使用的完整备份</span></span><br><span class="line"><span class="built_in">--incremental-basedir</span>	<span class="comment"># 与--incremental选项联合使用，该参数指定上一级备份的地址来做增量备份</span></span><br></pre></td></tr></table></figure>
<h6 id="完整备份"><a href="#完整备份" class="headerlink" title="完整备份"></a>完整备份</h6><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">[root<span class="meta">@k8s</span><span class="operator">-</span>master01 <span class="operator">~</span>]# innobackupex <span class="operator">--</span>user<span class="operator">=</span>root <span class="operator">--</span>password<span class="operator">=</span>chinaedu <span class="regexp">/home/</span>mysqlbackup<span class="operator">/</span>		# 备份的时候有大量的日志信息</span><br><span class="line">[root<span class="meta">@k8s</span><span class="operator">-</span>master01 <span class="operator">~</span>]# ls <span class="regexp">/home/</span>mysqlbackup<span class="operator">/</span></span><br><span class="line"><span class="number">2021</span><span class="operator">-</span><span class="number">01</span><span class="operator">-</span><span class="number">29_11</span><span class="operator">-</span><span class="number">17</span><span class="operator">-</span><span class="number">03</span></span><br><span class="line">[root<span class="meta">@k8s</span><span class="operator">-</span>master01 <span class="operator">~</span>]# innobackupex <span class="operator">--</span>user<span class="operator">=</span>root <span class="operator">--</span>password<span class="operator">=</span>chinaedu <span class="regexp">/home/</span>mysqlbackup<span class="operator">/</span>  <span class="number">2</span><span class="operator">&gt;&gt;</span> <span class="regexp">/home/</span>mysqlbackup<span class="operator">/</span>bakcup.log		# 将备份输出信息保存到文件	</span><br><span class="line">[root<span class="meta">@k8s</span><span class="operator">-</span>master01 <span class="operator">~</span>]# innobackupex <span class="operator">--</span>user<span class="operator">=</span>root <span class="operator">--</span>password<span class="operator">=</span>chinaedu <span class="operator">--</span>no<span class="operator">-</span>timestam <span class="regexp">/home/</span>mysqlbackup<span class="regexp">/test 2&gt;&gt; /</span>home<span class="regexp">/mysqlbackup/</span>bakcup<span class="operator">-</span>test.log  	# 不使用时间戳创建目录，可自动创建目的地址</span><br><span class="line">[root<span class="meta">@k8s</span><span class="operator">-</span>master01 <span class="operator">~</span>]# ls <span class="regexp">/home/</span>mysqlbackup<span class="operator">/</span>		# 可以看到有自己创建的test目录</span><br><span class="line"><span class="number">2021</span><span class="operator">-</span><span class="number">01</span><span class="operator">-</span><span class="number">29_11</span><span class="operator">-</span><span class="number">17</span><span class="operator">-</span><span class="number">03</span>  <span class="number">2021</span><span class="operator">-</span><span class="number">01</span><span class="operator">-</span><span class="number">29_11</span><span class="operator">-</span><span class="number">21</span><span class="operator">-</span><span class="number">52</span>  bakcup.log  test bakcup<span class="operator">-</span>test.log</span><br></pre></td></tr></table></figure>
<h6 id="数据还原"><a href="#数据还原" class="headerlink" title="数据还原"></a>数据还原</h6><p><strong>注意：innobackupex -copy-back不会覆盖已存在的文件。而且还原时需要先关闭服务，如果服务是启动的，那么久不能还原到datadir</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">[root<span class="meta">@k8s</span><span class="operator">-</span>master01 <span class="operator">~</span>]# systemctl stop mysqld</span><br><span class="line">[root<span class="meta">@k8s</span><span class="operator">-</span>master01 <span class="operator">~</span>]# rm <span class="operator">-</span>rf <span class="regexp">/var/</span>lib<span class="regexp">/mysql/</span><span class="operator">*</span>		# 危险操作，请在测试环境测试</span><br><span class="line">[root<span class="meta">@k8s</span><span class="operator">-</span>master01 <span class="operator">~</span>]# innobackupex <span class="operator">--</span><span class="keyword">copy</span><span class="operator">-</span>back <span class="regexp">/home/</span>mysqlbackup<span class="regexp">/2021-01-29_11-25-59/</span> </span><br><span class="line">[root<span class="meta">@k8s</span><span class="operator">-</span>master01 <span class="operator">~</span>]# ll <span class="regexp">/var/</span>lib<span class="regexp">/mysql/</span></span><br></pre></td></tr></table></figure>
<h6 id="Xtrabackup增量备份和还原"><a href="#Xtrabackup增量备份和还原" class="headerlink" title="Xtrabackup增量备份和还原"></a>Xtrabackup增量备份和还原</h6><blockquote>
<p>增量备份的实现，依赖于innodb也上面的LSN（log sequence number），每次对数据库的修改都会导致LSN自增。增量备份会复制指定LSN&lt;日志序列号&gt;之后的所有数据页。<br>查看完整备份的LSN</p>
</blockquote>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[root@ebs-171001 2025-03-13_10-57-01]</span><span class="comment"># cat xtrabackup_checkpoints</span></span><br><span class="line"><span class="attr">backup_type</span> = full-backuped</span><br><span class="line"><span class="attr">from_lsn</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">to_lsn</span> = <span class="number">2449713</span></span><br><span class="line"><span class="attr">last_lsn</span> = <span class="number">2449713</span></span><br><span class="line"><span class="attr">compact</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">recover_binlog_info</span> = <span class="number">0</span></span><br><span class="line"><span class="section">[root@ebs-171001 2025-03-13_10-57-01]</span><span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>把全量备份进行一次apply,–apply-log 指明是将日志应用到数据文件上，完成之后将备份文件中的数据恢复到数据库中</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">[root@k8s-master01 mysqlbackup]# innobackupex --apply-log --redo-only /home/mysqlbackup/2021<span class="string">-01</span><span class="string">-29</span>_11<span class="string">-31</span><span class="string">-32</span>/</span><br></pre></td></tr></table></figure>
<p>在命令行中，你可以通过添加 –no-log-applied 选项来明确指示 innobackupex 不记录或应用日志</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">innobackupex --<span class="keyword">no</span>-<span class="built_in">log</span>-applied /path/<span class="keyword">to</span>/backup</span><br></pre></td></tr></table></figure>
<h6 id="增量备份"><a href="#增量备份" class="headerlink" title="增量备份"></a>增量备份</h6><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">innobackupex <span class="attribute">--user</span>=root <span class="attribute">--password</span>=yhmdhwjc --incremental /home/test_com/ <span class="attribute">--incremental-basedir</span>=/home/test_com/2025-03-13_10-57-01</span><br></pre></td></tr></table></figure>
<p>应用第一次增量备份到全量备份（把全量备份跟增量备份进行一个结合）</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">[root@k8s-master01 mysqlbackup]# innobackupex --apply-log --redo-only /home/mysqlbackup/2021<span class="string">-01</span><span class="string">-29</span>_11<span class="string">-31</span><span class="string">-32</span>/ --incremental-dir=/home/mysqlbackup/2021<span class="string">-01</span><span class="string">-29</span>_13<span class="string">-52</span><span class="string">-49</span></span><br></pre></td></tr></table></figure>
<h6 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h6><ul>
<li>案例一：xtrabackup 完全备份+binlog 增量备份<br>先创建完全备份<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">innobackupex <span class="attribute">--user</span>=root <span class="attribute">--password</span>=yhmdhwjc /home/bkup</span><br></pre></td></tr></table></figure>
查看完全备份时 binlog 日志位置(position)<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">[root@ebs<span class="string">-171001</span> data]# cat /home/bkup/2025<span class="string">-03</span><span class="string">-13</span>_14<span class="string">-55</span><span class="string">-11</span>/xtrabackup_binlog_info</span><br><span class="line">mysql-bin.000002        1385069</span><br></pre></td></tr></table></figure>
增量备份二进制文件<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/www/</span>server<span class="regexp">/mysql/</span>bin<span class="regexp">/mysqlbinlog --start-position=1385069 /</span>home<span class="regexp">/server/</span>data<span class="regexp">/mysql-bin.000002 &gt; /</span>home<span class="regexp">/bkup/</span>zlbk.sql</span><br></pre></td></tr></table></figure>
还原<br>-apply-log 指明是将日志应用到数据文件上，完成之后将备份文件中的数据恢复到数据库中。<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">innobackupex</span> --apply-log /home/bkup/<span class="number">2025</span>-<span class="number">03</span>-<span class="number">13</span>_14-<span class="number">55</span>-<span class="number">11</span>/</span><br></pre></td></tr></table></figure>
如果执行正确，其最后输出的几行信息通常如下<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">InnoDB</span>: <span class="number">5</span>.<span class="number">7</span>.<span class="number">13</span> started; log sequence number <span class="number">3236373</span></span><br><span class="line"><span class="attribute">xtrabackup</span>: starting shutdown with innodb_fast_shutdown = <span class="number">1</span></span><br><span class="line"><span class="attribute">InnoDB</span>: FTS optimize thread exiting.</span><br><span class="line"><span class="attribute">InnoDB</span>: Starting shutdown...</span><br><span class="line"><span class="attribute">InnoDB</span>: Shutdown completed; log sequence number <span class="number">3236903</span></span><br><span class="line"><span class="attribute">250313</span> <span class="number">15</span>:<span class="number">12</span>:<span class="number">04</span> completed OK!</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">innobackupex  --<span class="keyword">copy</span>-back  <span class="regexp">/opt/my</span>sqlbackup<span class="regexp">/full/</span><span class="number">2016</span>-<span class="number">09</span>-<span class="number">12</span>_11-<span class="number">29</span>-<span class="number">55</span>/</span><br><span class="line">这里的--<span class="keyword">copy</span>-back 指明是进行数据恢复。数据恢复完成之后，需要修改相关文件的权限 mysql 数据库才能正常启动</span><br></pre></td></tr></table></figure>
<p>还原增量备份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /home/bkup/zlbk.sql</span><br></pre></td></tr></table></figure>
<ul>
<li>案例二、xtrabackup 完全备份+xtrabacup 增量备份<br>执行完全备份<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line"># xtrabackup--defaults-<span class="keyword">file</span>=/etc/my.cnf--user=root--password=<span class="string">&quot;123456&quot;</span>--port=<span class="number">3306</span></span><br><span class="line">--backup--target-dir=/opt/mysqlbackup/full/full_incre_$(<span class="keyword">date</span> +%Y%m%d_%H%M%S)</span><br></pre></td></tr></table></figure>
xtrabackup 进行增量备份<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line"># xtrabackup-defaults-<span class="keyword">file</span>=/etc/my.cnf--user=root--password=<span class="string">&quot;123456&quot;</span>--port=<span class="number">3306</span></span><br><span class="line">--backup--target-dir=/opt/mysqlbackup/inc/incre_$(<span class="keyword">date</span>+%Y%m%d_%H%M%S)</span><br><span class="line">--incremental-basedir=/opt/mysqlbackup/full/full_incre_20160912_221111/</span><br></pre></td></tr></table></figure>
其中，–incremental-basedir 指定上次完整备份或者增量备份文件的位置(即如果是第一次增量备份则指向完全备份所在目录，在执行过增量备份之后再一次进行增量备份时，其–incremental-basedir 应该指向上一次的增量备份所在的目录)。<br>注：这里的增量备份其实只针对的是 InnoDB，对于 MyISAM 来说，还是完整备份<br>表中再插入几行数据，继续第二次增量备份<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="comment"># xtrabackup-defaults-file=/etc/my.cnf-user=root--password=&quot;&quot;123456&quot;--port=3306</span></span><br><span class="line">-backup-target-dir=<span class="regexp">/opt/mysqlbackup</span><span class="regexp">/inc/incre</span>_<span class="variable">$(</span>date+%Y%m%d_%H%M%S</span><br><span class="line">--incremental-basedir=<span class="regexp">/opt/mysqlbackup</span><span class="regexp">/inc/incre</span>_20160912_221510/</span><br></pre></td></tr></table></figure>
注：第二次增量备份–incremental-basedir 指向上一次增量备份文件的位置<br>完整备份恢复  准备一个完全备份<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># xtrabackup--defaults-<span class="keyword">file</span>=/etc/my.<span class="keyword">cnf</span> -prepare-user=root--password=<span class="string">&quot;123456&quot;</span></span><br><span class="line">--apply-<span class="built_in">log</span>-<span class="keyword">only</span>--target-dir=/<span class="keyword">opt</span>/mysqlbackup/full/full_incre_20160912_221111/</span><br></pre></td></tr></table></figure>
恢复完整备份<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"># xtrabackup-defaults-<span class="keyword">file</span>=<span class="regexp">/etc/my</span>.cnf --prepare--user=root --password=<span class="string">&quot;123456&quot;</span></span><br><span class="line">--apply-log-only</span><br><span class="line">--target-dir=<span class="regexp">/optmysqlbackup/</span>full<span class="regexp">/full_incre_20160912_221111/</span>-incremental-dir=/opt</span><br><span class="line">mysqlbackup<span class="regexp">/inc/i</span>ncre_20160912_221510/</span><br></pre></td></tr></table></figure>
恢复到第二次增量备份前面<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"># xtrabackup-defaults-<span class="keyword">file</span>=<span class="regexp">/etc/my</span>.cnf --prepare--user=root--password=<span class="string">&quot;123456&quot;</span></span><br><span class="line">-apply-log-only-target-dir=<span class="regexp">/opt/my</span>sqlbackup<span class="regexp">/ful/</span>full_incre_20160912_221111/</span><br><span class="line">--incremental-dir=<span class="regexp">/opt/my</span>sqlbackup<span class="regexp">/inc/i</span>ncre_20160912_221916/</span><br></pre></td></tr></table></figure>
恢复整个库<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"># xtrabackup-defaults-<span class="keyword">file</span>=<span class="regexp">/etc/my</span>.cnf --prepare --user=root--password=<span class="string">&quot;123456&quot;</span></span><br><span class="line">--target-dir=<span class="regexp">/opt/my</span>sqlbackup<span class="regexp">/full/</span>full_incre_20160912_221111/</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="cd-opt-mysqlbackup-full-full-incre-20160912-221111"><a href="#cd-opt-mysqlbackup-full-full-incre-20160912-221111" class="headerlink" title="cd &#x2F;opt&#x2F;mysqlbackup&#x2F;full&#x2F;full_incre_20160912_221111&#x2F;"></a>cd &#x2F;opt&#x2F;mysqlbackup&#x2F;full&#x2F;full_incre_20160912_221111&#x2F;</h1><p>#rsync -rvt–exclude ‘xtrabackup_checkpoints’–exclude’xtrabackup_logfile’<br>&#x2F;usr&#x2F;local&#x2F;mysqlI&#x2F;data&#x2F;<br>&#96;&#96;&#96;</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>set指令的作用</title>
    <url>/2024/09/28/nginx%20set%E6%8C%87%E4%BB%A4%E7%9A%84%E4%BD%9C%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>在配置文件中通常是在server{}中，要基于多条件判断进行跳转&#x2F;拦截&#x2F;回源等需求时，可以通过使用nginx set指令来实现。<br>set指令是用于定义一个变量，并且赋值。<br>条件判断可以根据nginx内置的全局变量进行判断然后使用set 赋值。</p>
</blockquote>
<span id="more"></span>
<h4 id="在nginx配置文件中使用如下："><a href="#在nginx配置文件中使用如下：" class="headerlink" title="在nginx配置文件中使用如下："></a>在nginx配置文件中使用如下：</h4><p><code>set $rewriteFlag 0;</code></p>
<p>#这里可以加上条件判断，比如客户端ip为12.34.56.78&#x2F;24时set 1<br><code>set $rewriteFlag &#39;$&#123;rewriteFlag&#125;1&#39;;</code></p>
<p>#这里可以加上条件判断，比如根据$http_referer&#x2F;$cookie_name&#x2F;$request_uri等判断进行赋值set 2<br><code>set $rewriteFlag &#39;$&#123;rewriteFlag&#125;2&#39;;</code></p>
<p>#这里的意思是当请求ip为12.34.56.78&#x2F;24，且$http_referer&#x2F;$cookie_name&#x2F;$request_uri为你设置的条件</p>
<p>#那么进行跳转，看见了吧这就是利用多条件进行操作的过程。更复杂的多条件情况下可以自行判断构造。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">if</span> (<span class="variable">$rewriteFlag</span>= <span class="string">&#x27;012&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">#    rewrite ^(.*) https://www.mywebsite.com$request_uri break;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>举例</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">if</span> (<span class="variable">$http_user_agent</span> <span class="regexp">~ &quot;CensysInspect|meta-externalagent|facebookexternalhit|DotBot|YisouSpider|PetalBot|GPTBot|serpstatbot|BLEXBot|bingbot|DataForSeoBot|Friendly_Crawler|Go-http-client|Bytespider|Java|PhantomJS|SemrushBot|Scrapy|Webdup|AcoonBot|AhrefsBot|Ezooms|EdisterBot|EC2LinkFinder|jikespider|Purebot|MJ12bot|WangIDSpider|WBSearchBot|Wotbox|xbfMozilla|Yottaa|YandexBot|Jorgee|SWEBot|spbot|TurnitinBot-Agent|mail.RU|perl|Python|Wget|Xenu|ZmEu|Googlebot|facebookexternalhit|^$&quot;</span>   )</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="attribute">set</span> <span class="variable">$flag</span> <span class="string">&quot;<span class="variable">$&#123;flag&#125;</span>1&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="attribute">if</span> ( <span class="variable">$remote_addr</span> !<span class="regexp">~* &#x27;60.247.158.19|127.0.0.1&#x27;)</span> </span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attribute">set</span> <span class="variable">$flag</span> <span class="string">&quot;<span class="variable">$&#123;flag&#125;</span>1&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$flag</span> = <span class="string">&quot;011&quot;</span>)&#123;</span><br><span class="line">      <span class="attribute">return</span> <span class="number">444</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx修改服务</title>
    <url>/2023/12/25/nginx%E4%BF%AE%E6%94%B9%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<p>nginx修改服务</p>
<span id="more"></span>
<h5 id="修改server"><a href="#修改server" class="headerlink" title="修改server"></a>修改server</h5><p>编辑srchttp&#x2F;ngx_http_header_filter_module.c</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">static u_char ngx_http_server_string[] <span class="operator">=</span> <span class="string">&quot;Server: nginx&quot;</span> <span class="keyword">CRLF</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>修改为自定义字段</p>
<h5 id="修改版本号"><a href="#修改版本号" class="headerlink" title="修改版本号"></a>修改版本号</h5><p>src&#x2F;core&#x2F;nginx.h</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> NGINX_VERSION      <span class="string">&quot;1.21.6&quot;</span></span></span><br></pre></td></tr></table></figure>
<p>修改后重新编译，如果之前编译过，通过nginx -V查看编译参数，然后make<br><strong>切记不能make install 不然就覆盖安装现有nginx了</strong><br>make完之后在objs目录下就可以看到新编译的nginx文件了,复制到sbin目录测试<br><img src="/2023/12/25/nginx%E4%BF%AE%E6%94%B9%E6%9C%8D%E5%8A%A1/1703465240256.jpg"></p>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx和php-fpm两种通信方式对比UnixSocket和TcpSocket</title>
    <url>/2023/12/25/nginx%E5%92%8Cphp-fpm%E4%B8%A4%E7%A7%8D%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%E5%AF%B9%E6%AF%94UnixSocket%E5%92%8CTcpSocket/</url>
    <content><![CDATA[<blockquote>
<p>tcp socket  允许通过网络进程之间的通信，也可以通过loopback进行本地进程之间通信。<br>unix socket<br>允许在本地运行的进程之间进行通信。</p>
</blockquote>
<span id="more"></span>
<p>unix socket减少了不必要的tcp开销，而tcp需要经过loopback，还要申请临时端口和tcp相关资源。但是，unix socket高并发时候不稳定，连接数爆发时，会产生大量的长时缓存，在没有面向连接协议的支撑下，大数据包可能会直接出错不返回异常。tcp这样的面向连接的协议，多少可以保证通信的正确性和完整性。</p>
<p>Unix domain socket和Tcp socket，在性能上没有显著差距。 当访问压力较小时（1），可以使用UnixSocket，因为不会占用额外的端口、且理论上效率较高。 当高并发的时候，Tcp Socket能表现出更高的稳定性，且性能并不差于UnixSocket，缺点是会占用大量的临时端口<br>tcp socket 切换到unix</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">PHP配置文件：</span><br><span class="line">[global]</span><br><span class="line">pid = /run/php-fpm/php-fpm.pid</span><br><span class="line">error_log = /var/log/php-fpm/php-fpm.log</span><br><span class="line">log_level = notice</span><br><span class="line">[www] </span><br><span class="line">listen = /dev/shm/php-cgi.sock</span><br><span class="line">listen.backlog = -<span class="number">1</span></span><br><span class="line">listen.allowed_clients = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">listen.owner = www</span><br><span class="line">listen.<span class="keyword">group</span> <span class="title">= www</span></span><br><span class="line">listen.mode = <span class="number">0666</span></span><br><span class="line"><span class="keyword">user</span> <span class="title">= www</span></span><br><span class="line"><span class="keyword">group</span> <span class="title">= www</span></span><br><span class="line"> </span><br><span class="line">nginx配置</span><br><span class="line"><span class="keyword">location</span> <span class="title">~ .*\.(php</span>|php5)?$</span><br><span class="line">&#123;</span><br><span class="line">　　fastcgi_pass unix:/dev/shm/php-cgi.sock;</span><br><span class="line">　　<span class="comment">#fastcgi_pass 127.0.0.1:9000;</span></span><br><span class="line">　　fastcgi_index index.php;</span><br><span class="line">　　fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">　　include fastcgi.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx如何禁止访问php</title>
    <url>/2024/04/02/nginx%E5%A6%82%E4%BD%95%E7%A6%81%E6%AD%A2%E8%AE%BF%E9%97%AEphp/</url>
    <content><![CDATA[<blockquote>
<p>nginx禁止访问php的方法：1、配置nginx，禁止解析指定目录下的指定程序；2、将“location ~^&#x2F;images&#x2F;.*.(php|php5|sh|pl|py)${deny all…}”语句放置在server标签内即可。</p>
</blockquote>
<p>nginx站点目录及文件URL访问控制</p>
<p>一、根据扩展名限制程序和文件访问</p>
<p>利用nginx配置禁止访问上传资源目录下的PHP、Shell、Perl、Python程序文件。</p>
<p>配置nginx，禁止解析指定目录下的指定程序。</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">location ~ ^/(images|<span class="type">image</span>|<span class="type">template</span>|<span class="type">uploads</span>|<span class="type">excel</span>|<span class="type">css</span>|<span class="type">banner</span>|<span class="type">js</span>)/.*\.(php|<span class="type">php5</span>|<span class="type">sh</span>|<span class="type">p1</span>|<span class="type">py</span>)$ &#123;</span><br><span class="line">    deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>rewrite总结</title>
    <url>/2023/12/15/rewrite%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>rewrite总结</p>
<span id="more"></span>
<h4 id="web-config-适用iis7以上"><a href="#web-config-适用iis7以上" class="headerlink" title="web.config 适用iis7以上"></a>web.config 适用iis7以上</h4><h5 id="实例1-普通重写"><a href="#实例1-普通重写" class="headerlink" title="实例1:普通重写"></a>实例1:普通重写</h5><p>.htaccess转换web.config<br>注意:  </p>
<ol>
<li>添加&lt;match url&#x3D;”^(.&#x2F;)</li>
<li>添加 url&#x3D;”{R:1} 3.去掉 list.asp?teacher_id 转义符<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">rewrite</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">rules</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">rule</span> <span class="attr">name</span>=<span class="string">&quot;rule1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">match</span> <span class="attr">url</span>=<span class="string">&quot;^(.*)t/([0-9,a-z]*)&quot;</span> <span class="attr">ignoreCase</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">type</span>=<span class="string">&quot;Rewrite&quot;</span> <span class="attr">url</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;R:1&#125;</span><span class="language-xml"><span class="tag"><span class="string">/t_list.asp?teacher_id=</span></span></span><span class="template-variable">&#123;R:2&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">appendQueryString</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">rule</span> <span class="attr">name</span>=<span class="string">&quot;rule2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">match</span> <span class="attr">url</span>=<span class="string">&quot;^(.*/)*([0-9]+)-([0-9]+)-([0-9]+)-([0-9]+)\.html\?*(.*)$&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">type</span>=<span class="string">&quot;Rewrite&quot;</span> <span class="attr">url</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;R:1&#125;</span><span class="language-xml"><span class="tag"><span class="string">/index.php?moduleid=</span></span></span><span class="template-variable">&#123;R:2&#125;</span><span class="language-xml"><span class="tag"><span class="string"><span class="symbol">&amp;amp;</span>catid=</span></span></span><span class="template-variable">&#123;R:3&#125;</span><span class="language-xml"><span class="tag"><span class="string"><span class="symbol">&amp;amp;</span>itemid=</span></span></span><span class="template-variable">&#123;R:4&#125;</span><span class="language-xml"><span class="tag"><span class="string"><span class="symbol">&amp;amp;</span>page=</span></span></span><span class="template-variable">&#123;R:5&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">rules</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">rewrite</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="实例2-其他重写功能"><a href="#实例2-其他重写功能" class="headerlink" title="实例2:其他重写功能"></a>实例2:其他重写功能</h5><ol>
<li>301重定向<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">&lt;rule name<span class="operator">=</span><span class="string">&quot;301Redirect&quot;</span> stopProcessing<span class="operator">=</span><span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">  &lt;match url<span class="operator">=</span><span class="string">&quot;(.*)&quot;</span> /&gt;</span><br><span class="line">&lt;conditions logicalGrouping<span class="operator">=</span><span class="string">&quot;MatchAll&quot;</span>&gt;</span><br><span class="line">    &lt;add input<span class="operator">=</span><span class="string">&quot;&#123;HTTP_HOST&#125;&quot;</span> pattern<span class="operator">=</span><span class="string">&quot;^xxx.com$&quot;</span> /&gt;</span><br><span class="line">    &lt;/conditions&gt;</span><br><span class="line">      &lt;action type<span class="operator">=</span><span class="string">&quot;Redirect&quot;</span> url<span class="operator">=</span><span class="string">&quot;http://www.xxx.com/&#123;R:0&#125;&quot;</span> redirectType<span class="operator">=</span><span class="string">&quot;Permanent&quot;</span> /&gt;</span><br><span class="line">&lt;/rule&gt;</span><br></pre></td></tr></table></figure></li>
<li>取消目录执行权限<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">&lt;rule name<span class="operator">=</span><span class="string">&quot;rule1&quot;</span>&gt;</span><br><span class="line">      &lt;match url<span class="operator">=</span><span class="string">&quot;uploads/(.*).(php|asp|aspx)$&quot;</span> ignoreCase<span class="operator">=</span><span class="string">&quot;false&quot;</span> /&gt;</span><br><span class="line">      &lt;conditions logicalGrouping<span class="operator">=</span><span class="string">&quot;MatchAll&quot;</span>&gt;</span><br><span class="line">            &lt;add input<span class="operator">=</span><span class="string">&quot;%&quot;</span> pattern<span class="operator">=</span><span class="string">&quot;^$&quot;</span> ignoreCase<span class="operator">=</span><span class="string">&quot;false&quot;</span> negate<span class="operator">=</span><span class="string">&quot;true&quot;</span> /&gt;</span><br><span class="line">      &lt;/conditions&gt;</span><br><span class="line">      &lt;action type<span class="operator">=</span><span class="string">&quot;AbortRequest&quot;</span> /&gt;</span><br><span class="line">&lt;/rule&gt;</span><br><span class="line"></span><br><span class="line">&lt;rule name<span class="operator">=</span><span class="string">&quot;Rule2&quot;</span>&gt;</span><br><span class="line">      &lt;match url<span class="operator">=</span><span class="string">&quot;(.*).(asp)$&quot;</span> ignoreCase<span class="operator">=</span><span class="string">&quot;false&quot;</span> /&gt;</span><br><span class="line">      &lt;action type<span class="operator">=</span><span class="string">&quot;AbortRequest&quot;</span> /&gt;</span><br><span class="line">&lt;/rule&gt;</span><br></pre></td></tr></table></figure></li>
<li>屏蔽来源域名<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">&lt;rule name<span class="operator">=</span><span class="string">&quot;rule1&quot;</span> stopProcessing<span class="operator">=</span><span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">      &lt;match url<span class="operator">=</span><span class="string">&quot;^(.*)$&quot;</span> /&gt;</span><br><span class="line">      &lt;conditions&gt;</span><br><span class="line">            &lt;add input<span class="operator">=</span><span class="string">&quot;&#123;HTTP_REFERER&#125;&quot;</span> pattern<span class="operator">=</span><span class="string">&quot;ylhqvip.com&quot;</span> negate<span class="operator">=</span><span class="string">&quot;true&quot;</span> /&gt;</span><br><span class="line">            &lt;add input<span class="operator">=</span><span class="string">&quot;&#123;HTTP_REFERER&#125;&quot;</span> pattern<span class="operator">=</span><span class="string">&quot;^$&quot;</span> negate<span class="operator">=</span><span class="string">&quot;true&quot;</span> /&gt;</span><br><span class="line">      &lt;/conditions&gt;</span><br><span class="line">      &lt;action type<span class="operator">=</span><span class="string">&quot;AbortRequest&quot;</span> /&gt;</span><br><span class="line">&lt;/rule&gt;</span><br></pre></td></tr></table></figure></li>
<li>防盗链<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">&lt;rule name<span class="operator">=</span><span class="string">&quot;BlockDirectDownload&quot;</span> enabled<span class="operator">=</span><span class="string">&quot;true&quot;</span> stopProcessing<span class="operator">=</span><span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">    &lt;match url<span class="operator">=</span><span class="string">&quot;^.*\.(jpg|gif)$&quot;</span> ignoreCase<span class="operator">=</span><span class="string">&quot;true&quot;</span> /&gt;</span><br><span class="line">    &lt;conditions&gt;</span><br><span class="line">        &lt;add input<span class="operator">=</span><span class="string">&quot;&#123;HTTP_REFERER&#125;&quot;</span> pattern<span class="operator">=</span><span class="string">&quot;^http://(.*\.)?(test\.com\.cn)/.*$&quot;</span> negate<span class="operator">=</span><span class="string">&quot;true&quot;</span> /&gt;</span><br><span class="line">    &lt;/conditions&gt;</span><br><span class="line">    &lt;action type<span class="operator">=</span><span class="string">&quot;Rewrite&quot;</span> url<span class="operator">=</span><span class="string">&quot;/404.txt&quot;</span> /&gt;</span><br><span class="line">&lt;/rule&gt;    </span><br></pre></td></tr></table></figure></li>
<li>屏蔽ip地址<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">rule</span> <span class="attr">name</span>=<span class="string">&quot;band ip&quot;</span> <span class="attr">stopProcessing</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">match</span> <span class="attr">url</span>=<span class="string">&quot;(.*)&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">conditions</span> <span class="attr">logicalGrouping</span>=<span class="string">&quot;MatchAny&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">&quot;%</span></span></span><span class="template-variable">&#123;HTTP_X_FORWARDED_FOR&#125;</span><span class="language-xml"><span class="tag"><span class="string"><span class="symbol">&amp;amp;</span>%</span></span></span><span class="template-variable">&#123;REMOTE_ADDR&#125;</span><span class="language-xml"><span class="tag"><span class="string"><span class="symbol">&amp;amp;</span>%</span></span></span><span class="template-variable">&#123;HTTP_X_Real_IP&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;(8.8.4.4|8.8.8.)&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">conditions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">action</span> <span class="attr">type</span>=<span class="string">&quot;AbortRequest&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>过滤静态文件<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">&lt;rule name<span class="operator">=</span><span class="string">&quot;Imported Rule 1&quot;</span> stopProcessing<span class="operator">=</span><span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">      &lt;match url<span class="operator">=</span><span class="string">&quot;^(.*)$&quot;</span> ignoreCase<span class="operator">=</span><span class="string">&quot;false&quot;</span> /&gt;</span><br><span class="line">      &lt;conditions logicalGrouping<span class="operator">=</span><span class="string">&quot;MatchAll&quot;</span>&gt;</span><br><span class="line">              &lt;add input<span class="operator">=</span><span class="string">&quot;&#123;URL&#125;&quot;</span> pattern<span class="operator">=</span><span class="string">&quot;^.*(.css|.js|.gif|.png|.jpg|.jpeg|.xml)&quot;</span> ignoreCase<span class="operator">=</span><span class="string">&quot;false&quot;</span> /&gt;</span><br><span class="line">      &lt;/conditions&gt;</span><br><span class="line">      &lt;action type<span class="operator">=</span><span class="string">&quot;None&quot;</span> /&gt;</span><br><span class="line">&lt;/rule&gt;</span><br></pre></td></tr></table></figure></li>
<li>屏蔽蜘蛛<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">rule</span> <span class="attr">name</span>=<span class="string">&quot;Block spider&quot;</span> <span class="attr">stopProcessing</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">match</span> <span class="attr">url</span>=<span class="string">&quot;(.*)&quot;</span> <span class="attr">ignoreCase</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">conditions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;HTTP_USER_AGENT&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;baiduspider|googlebot&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">conditions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">action</span> <span class="attr">type</span>=<span class="string">&quot;AbortRequest&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">rule</span>&gt;</span>  </span></span><br></pre></td></tr></table></figure></li>
<li>去掉QUERY_STRING<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">rule</span> <span class="attr">name</span>=<span class="string">&quot;Bloc&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">match</span> <span class="attr">url</span>=<span class="string">&quot;^(.*)&quot;</span> <span class="attr">ignoreCase</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">conditions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;QUERY_STRING&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;from=singlemessage<span class="symbol">&amp;amp;</span>isappinstalled=0&quot;</span> <span class="attr">ignoreCase</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">conditions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">action</span> <span class="attr">type</span>=<span class="string">&quot;Redirect&quot;</span> <span class="attr">url</span>=<span class="string">&quot;https://</span></span></span><span class="template-variable">&#123;HTTP_HOST&#125;</span><span class="language-xml"><span class="tag"><span class="string">/</span></span></span><span class="template-variable">&#123;R:0&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">appendQueryString</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">rule</span> <span class="attr">name</span>=<span class="string">&quot;已导入的规则 1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">match</span> <span class="attr">url</span>=<span class="string">&quot;^category.php$&quot;</span> <span class="attr">ignoreCase</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">conditions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;QUERY_STRING&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;^id=90$&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">conditions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">action</span> <span class="attr">type</span>=<span class="string">&quot;Redirect&quot;</span> <span class="attr">redirectType</span>=<span class="string">&quot;Permanent&quot;</span> <span class="attr">url</span>=<span class="string">&quot;http://www.xxxx.com&quot;</span> <span class="attr">appendQueryString</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>屏蔽对首页进行post</li>
<li>跳过排除某个文件夹<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">rewrite</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">rules</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                 <span class="tag">&lt;<span class="name">rule</span> <span class="attr">name</span>=<span class="string">&quot;1&quot;</span> <span class="attr">stopProcessing</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">match</span> <span class="attr">url</span>=<span class="string">&quot;^(?!cn)(.*)$&quot;</span> <span class="attr">ignoreCase</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">conditions</span> <span class="attr">logicalGrouping</span>=<span class="string">&quot;MatchAll&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;REQUEST_FILENAME&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">matchType</span>=<span class="string">&quot;IsDirectory&quot;</span> <span class="attr">negate</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;REQUEST_FILENAME&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">matchType</span>=<span class="string">&quot;IsFile&quot;</span> <span class="attr">negate</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">conditions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">action</span> <span class="attr">type</span>=<span class="string">&quot;Rewrite&quot;</span> <span class="attr">url</span>=<span class="string">&quot;index.php?p=</span></span></span><span class="template-variable">&#123;R:1&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">appendQueryString</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">rules</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">rewrite</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="语法总结"><a href="#语法总结" class="headerlink" title="语法总结"></a>语法总结</h5><ol>
<li><add>条件判断,就像我们程序中的if语句一样,表示如果符合某个或某几个条件则执行action后的语句<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">#判断访问域名:      <span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;HTTP_HOST&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;^www.xxx.com$&quot;</span> /&gt;</span>                           </span></span><br><span class="line"><span class="language-xml">#判断user_agent:   <span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;HTTP_USER_AGENT&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;baiduspider|googlebot&quot;</span> /&gt;</span>                                      </span></span><br><span class="line"><span class="language-xml">#判断访问来源域名: <span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;HTTP_REFERER&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;xxx.com&quot;</span>  /&gt;</span></span></span><br><span class="line"><span class="language-xml">#判断url中:        <span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;URL&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;^.*(.css|.js|.gif|.png|.jpg|.jpeg|.xml)&quot;</span> <span class="attr">ignoreCase</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">#判断url中?后参数: <span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;QUERY_STRING&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;blog&quot;</span> /&gt;</span>                                            </span></span><br><span class="line"><span class="language-xml">#判断url路径地址:  <span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;REQUEST_URI&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;blog&quot;</span> /&gt;</span>   </span></span><br><span class="line"><span class="language-xml">#判断ip(包括代理): <span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">&quot;%</span></span></span><span class="template-variable">&#123;HTTP_X_FORWARDED_FOR&#125;</span><span class="language-xml"><span class="tag"><span class="string">&amp;%</span></span></span><span class="template-variable">&#123;REMOTE_ADDR&#125;</span><span class="language-xml"><span class="tag"><span class="string">&amp;%</span></span></span><span class="template-variable">&#123;HTTP_X_Real_IP&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;(8.8.4.4|8.8.8.)&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">#判断真实文件:     <span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;REQUEST_FILENAME&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">matchType</span>=<span class="string">&quot;IsFile&quot;</span> <span class="attr">negate</span>=<span class="string">&quot;true&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;&quot;</span> <span class="attr">ignoreCase</span>=<span class="string">&quot;false&quot;</span> /&gt;</span>      </span></span><br><span class="line"><span class="language-xml">#判断真实目录:     <span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;REQUEST_FILENAME&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">matchType</span>=<span class="string">&quot;IsDirectory&quot;</span> <span class="attr">negate</span>=<span class="string">&quot;true&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;&quot;</span> <span class="attr">ignoreCase</span>=<span class="string">&quot;false&quot;</span> /&gt;</span> </span></span><br><span class="line"><span class="language-xml">#判断match中的变量:<span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;R:1&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;^(bbs|blog)&quot;</span> <span class="attr">ignoreCase</span>=<span class="string">&quot;false&quot;</span>  /&gt;</span></span></span><br><span class="line"><span class="language-xml">#判断method        <span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;REQUEST_METHOD&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;(POST)&quot;</span> <span class="attr">ignoreCase</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">#其他              <span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">&quot;%&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;^$&quot;</span> <span class="attr">ignoreCase</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li><action>处理方式<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">禁止访问:         &lt;action <span class="built_in">type</span>=<span class="string">&quot;AbortRequest&quot;</span> /&gt;</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重定向到          &lt;action <span class="built_in">type</span>=<span class="string">&quot;Redirect&quot;</span> url=<span class="string">&quot;http://www.xxx.com&quot;</span> redirectType=<span class="string">&quot;Permanent&quot;</span> /&gt;</span>   </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重写到            &lt;action <span class="built_in">type</span>=<span class="string">&quot;Rewrite&quot;</span> url=<span class="string">&quot;&#123;R:1&#125;/t_list.asp?teacher_id=&#123;R:2&#125;&quot;</span> appendQueryString=<span class="string">&quot;false&quot;</span> /&gt;</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">不做操作          &lt;action <span class="built_in">type</span>=<span class="string">&quot;None&quot;</span> /&gt;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">向客户端返回状态  &lt;action <span class="built_in">type</span>=<span class="string">&quot;CustomResponse&quot;</span> statusCode=<span class="string">&quot;403&quot;</span> statusReason=<span class="string">&quot;Forbidden&quot;</span> statusDescription=<span class="string">&quot;Forbidden&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>参数<br>忽略大小写: ignoreCase&#x3D;”true”|ignoreCase&#x3D;”false”<br>非(不等于): negate&#x3D;”true”<br>不带?后面的参数: appendQueryString&#x3D;”false”<br>永久重定向: redirectType&#x3D;”Permanent”<br>匹配条件为所有还是一条: logicalGrouping&#x3D;”MatchAll”|logicalGrouping&#x3D;”MatchAny” # 用于conditions节点</li>
</ol>
<h4 id="htaccess-适用iis6-rewrite3-1-linux"><a href="#htaccess-适用iis6-rewrite3-1-linux" class="headerlink" title="htaccess 适用iis6(rewrite3.1)|linux"></a>htaccess 适用iis6(rewrite3.1)|linux</h4><ol>
<li>普通重写<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;IfModule mod_rewrite.c&gt;</span></span><br><span class="line">          <span class="attribute">RewriteEngine</span> <span class="literal">On</span></span><br><span class="line">          <span class="attribute">RewriteCond</span> <span class="variable">%&#123;QUERY_STRING&#125;</span> ^(.*)$</span><br><span class="line">          <span class="attribute">RewriteRule</span> ^topic-(.+)\.html$ portal.php?mod=topic&amp;topic=$<span class="number">1</span>&amp;%<span class="number">1</span></span><br><span class="line">          <span class="attribute">RewriteCond</span> <span class="variable">%&#123;QUERY_STRING&#125;</span> ^(.*)$</span><br><span class="line">          <span class="attribute">RewriteRule</span> ^article-([<span class="number">0</span>-<span class="number">9</span>]+)-([<span class="number">0</span>-<span class="number">9</span>]+)\.html$ portal.php?mod=view&amp;aid=$<span class="number">1</span>&amp;page=$<span class="number">2</span>&amp;%<span class="number">1</span></span><br><span class="line">          <span class="attribute">RewriteCond</span> <span class="variable">%&#123;QUERY_STRING&#125;</span> ^(.*)$</span><br><span class="line">          <span class="attribute">RewriteRule</span> ^forum-(\w+)-([<span class="number">0</span>-<span class="number">9</span>]+)\.html$ forum.php?mod=forumdisplay&amp;fid=$<span class="number">1</span>&amp;page=$<span class="number">2</span>&amp;%<span class="number">1</span></span><br><span class="line"><span class="section">&lt;/IfModule&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">RewriteRule</span> ^(.*)/topic-(.+)\.html(\?(.*))*$ $<span class="number">1</span>/portal\.php\?mod=topic&amp;topic=$<span class="number">2</span>&amp;$<span class="number">4</span></span><br><span class="line"><span class="attribute">RewriteRule</span> ^(.*)/article-([<span class="number">0</span>-<span class="number">9</span>]+)-([<span class="number">0</span>-<span class="number">9</span>]+)\.html(\?(.*))*$ $<span class="number">1</span>/portal\.php\?mod=view&amp;aid=$<span class="number">2</span>&amp;page=$<span class="number">3</span>&amp;$<span class="number">5</span></span><br><span class="line"><span class="attribute">RewriteRule</span> ^(.*)/forum-(\w+)-([<span class="number">0</span>-<span class="number">9</span>]+)\.html(\?(.*))*$ $<span class="number">1</span>/forum\.php\?mod=forumdisplay&amp;fid=$<span class="number">2</span>&amp;page=$<span class="number">3</span>&amp;$<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">RewriteRule</span> ^ac/([<span class="number">0</span>-<span class="number">9</span>]+)\.html$  /content/$<span class="number">1</span>.htm<span class="meta"> [R=301,L]</span></span><br></pre></td></tr></table></figure></li>
<li>动态地址跳转到静态地址<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">RewriteRule</span> ^goods-([<span class="number">0</span>-<span class="number">9</span>]+)(.*)\.html$  goods\.php\?id=$<span class="number">1</span><span class="meta"> [QSA,L]</span></span><br><span class="line"><span class="attribute">RewriteCond</span> <span class="variable">%&#123;QUERY_STRING&#125;</span> ^id=([<span class="number">0</span>-<span class="number">9</span>]+)$<span class="meta"> [NC]</span></span><br><span class="line"><span class="attribute">RewriteRule</span> ^goods.php$ /goods-%<span class="number">1</span>.html?<span class="meta"> [L,R=301]</span></span><br><span class="line"><span class="attribute">RewriteCond</span> <span class="variable">%&#123;QUERY_STRING&#125;</span> ^id=<span class="number">1</span>$<span class="meta"> [NC]</span></span><br><span class="line"><span class="attribute">RewriteRule</span> ^category.php$ http://www.yaolongnonwoven.com/?<span class="meta"> [L,R=301] 加?不带参数,不加带上参数</span></span><br></pre></td></tr></table></figure></li>
<li>301重定向<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="title class_">RewriteCond</span> <span class="string">%&#123;HTTP_HOST&#125;</span> ^xxxx1.com<span class="variable">$ </span>[<span class="variable constant_">NC</span>] </span><br><span class="line"><span class="title class_">RewriteCond</span> <span class="string">%&#123;HTTP_HOST&#125;</span> ^xxxx2.com<span class="variable">$ </span>[<span class="variable constant_">NC</span>] </span><br><span class="line"><span class="title class_">RewriteRule</span> ^(.*)<span class="variable">$ </span><span class="symbol">http:</span>/<span class="regexp">/www.xxxx1.com/</span><span class="variable">$1</span> [R=<span class="number">301</span>,L]</span><br></pre></td></tr></table></figure></li>
<li>取消目录执行权限<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">RewriteEngine</span> <span class="literal">On</span></span><br><span class="line"><span class="attribute">RewriteCond</span> % !^$   </span><br><span class="line"><span class="attribute">RewriteRule</span> uploads/(.*).(php)$ –<span class="meta"> [F]   </span></span><br><span class="line"><span class="meta">RewriteRule data/(.*).(php)$ – [F]</span></span><br></pre></td></tr></table></figure></li>
<li>屏蔽来源域名<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">RewriteCond</span> <span class="variable">%&#123;HTTP_REFERER&#125;</span> www.baidu.com<span class="meta"> [NC]</span></span><br><span class="line"><span class="attribute">RewriteRule</span> ^(.*)$ -<span class="meta"> [F]</span></span><br></pre></td></tr></table></figure></li>
<li>屏蔽ip地址<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">RewriteCond</span> <span class="variable">%&#123;http:X-Forwarded-For&#125;</span>&amp;<span class="variable">%&#123;REMOTE_ADDR&#125;</span>&amp;<span class="variable">%&#123;http:X-Real-IP&#125;</span> (<span class="number">8.8.4.4</span>|<span class="number">8</span>.<span class="number">8</span>.<span class="number">8</span>.)<span class="meta"> [NC]</span></span><br><span class="line"><span class="attribute">RewriteRule</span> (.*) -<span class="meta"> [F]</span></span><br></pre></td></tr></table></figure></li>
<li>过滤静态文件<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">RewriteCond %&#123;REQUEST_URI&#125; ^.*(.css|<span class="type">.js</span>|<span class="type">.gif</span>|<span class="type">.png</span>|<span class="type">.jpg</span>|<span class="type">.jpeg</span>|<span class="type">.xml</span>)</span><br><span class="line">RewriteRule ^(.*)$   - [L] </span><br><span class="line"></span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f     </span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br></pre></td></tr></table></figure></li>
<li>屏蔽蜘蛛<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">RewriteCond</span> <span class="variable">%&#123;HTTP_USER_AGENT&#125;</span> (baiduspider|googlebot)<span class="meta"> [NC]</span></span><br><span class="line"><span class="attribute">RewriteRule</span> ^(.*)$ -<span class="meta"> [F]</span></span><br></pre></td></tr></table></figure></li>
<li>去掉包含特征的QUERY_STRING<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">RewriteCond</span> <span class="variable">%&#123;QUERY_STRING&#125;</span> ^/(.*)$<span class="meta"> [NC]</span></span><br><span class="line"><span class="attribute">RewriteRule</span> (.*) http://www.whjiangying.com/?<span class="meta"> [L,R=301</span></span><br></pre></td></tr></table></figure></li>
<li>做好伪静态后要将动态地址转向静态地址<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">已有一条伪静态</span><br><span class="line"><span class="title class_">RewriteRule</span> ^goods-([<span class="number">0</span>-<span class="number">9</span>]+)(.*).html<span class="variable">$ </span>goods.php?id=<span class="variable">$1</span> [<span class="variable constant_">QSA</span>,L]</span><br><span class="line"><span class="title class_">RewriteCond</span> <span class="string">%&#123;QUERY_STRING&#125;</span> ^id=([<span class="number">0</span>-<span class="number">9</span>]+)<span class="variable">$ </span>[<span class="variable constant_">NC</span>]</span><br><span class="line"><span class="title class_">RewriteRule</span> ^goods.php<span class="variable">$ </span>/goods-%<span class="number">1</span>.html? [L,R=<span class="number">301</span>]</span><br><span class="line"><span class="title class_">RewriteCond</span> <span class="string">%&#123;QUERY_STRING&#125;</span> ^id=<span class="number">1</span><span class="variable">$ </span>[<span class="variable constant_">NC</span>]</span><br><span class="line"><span class="title class_">RewriteRule</span> ^category.php<span class="variable">$ </span><span class="symbol">http:</span>/<span class="regexp">/www.yaolongnonwoven.com/</span>? [L,R=<span class="number">301</span>] 加<span class="string">?不</span>带参数,不加带上参数</span><br></pre></td></tr></table></figure></li>
<li>排除某个文件夹<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">方法<span class="number">1</span>：</span><br><span class="line">RewriteRule ^(statics|<span class="type">api</span>|<span class="type">uploadfile</span>|<span class="type">)(.*) - [L</span>]</span><br><span class="line">方法<span class="number">2</span>：</span><br><span class="line">RewriteCond $<span class="number">1</span> !^(search|<span class="type">list</span>|<span class="type">view</span>|<span class="type">api</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="语法总结-1"><a href="#语法总结-1" class="headerlink" title="语法总结"></a>语法总结</h5><ol>
<li>RewriteCond条件判断,就像我们程序中的if语句一样，表示如果符合某个或某几个条件则执行RewriteCond下面紧邻的RewriteRule语句<br> #判断访问域名: RewriteCond %{HTTP_HOST} ^xxxx.com$ [NC]<br> #判断user_agent: RewriteCond %{HTTP_USER_AGENT} Baiduspider [NC]<br> #判断访问来源域名: RewriteCond %{HTTP_REFERER} <a href="http://www.baidu.com/">www.baidu.com</a> [NC]<br> #判断METHOD: RewriteCond %{REQUEST_METHOD} ^(TRACE|OPTIONS|GET|POST)<br> #判断url中?后参数: RewriteCond %{QUERY_STRING} ^id&#x3D;([0-9]+)$ [NC]<br> #判断url路径地址: RewriteCond %{REQUEST_URI} ^&#x2F;bbs<br> #判断ip(包括代理): RewriteCond %{http:X-Forwarded-For}&amp;%{REMOTE_ADDR}&amp;%{http:X-Real-IP} (8.8.4.4|8.8.8.) [NC]<br> #判断真实文件: RewriteCond %{REQUEST_FILENAME} !-f<br> #判断真实目录: RewriteCond %{REQUEST_FILENAME} !-d<br> #判断header RewriteCond %{HTTP:header}<br> #判断以上所有情况: RewriteCond $1 !^(bbs|blog)<br> #其他 RewriteCond % !^$</li>
<li>处理方式<br> #禁止访问: RewriteRule (.) - [F]<br> #重定向到 RewriteRule ^(.)$ <a href="http://www.xxx.com/404.html">http://www.xxx.com/404.html</a> [R&#x3D;301,L]<br> #重写到 RewriteRule ^goods-([0-9]+)(.<em>).html$ goods.php?id&#x3D;$1 [QSA,L]<br> #不做操作 RewriteRule ^(.</em>)$ - [L]<br> 参数解释:<br> $N 规则后向引用<br> %N RewriteCond 后向引用<br> ${mapname:key|default}<br> %{VARNAME} 服务器变量<br> ‘!’ 取非<br> [C] 与下一个规则联锁<br> [CO&#x3D;name:val:domain:lifetime:path] 设置cookie<br> [F] 强制禁止应答<br> [G] 强制继续应答<br> [H&#x3D;content-handler] 明确的内容处理 (不适用)<br> [L] 上一个规则标记<br> [N] 再次应用规则<br> [NC] 大小写不敏感<br> [NE] 不转义输出<br> [NS]非内部子请求<br> [P]代理通过<br> [QSA] 追加查询字符串<br> [R &#x3D;code] 重定向<br> [S&#x3D;num] 跳到下面第n条规则<br> [T&#x3D;MIME-type] 强制明确应答 MIME 类型<br> RewriteCond<br> [NC] 大小写不敏感<br> [OR] 逻辑并集</li>
</ol>
<h4 id="nginx-规则"><a href="#nginx-规则" class="headerlink" title="nginx 规则"></a>nginx 规则</h4><h5 id="普通重写"><a href="#普通重写" class="headerlink" title="普通重写"></a>普通重写</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line"><span class="keyword">if</span> (!-e <span class="variable">$request_filename</span>) &#123; </span><br><span class="line">rewrite  ^(.*)$  /index.php?s=<span class="variable">$1</span>  last; </span><br><span class="line"><span class="built_in">break</span>;   </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>301重定向<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^</span> https://example.com<span class="variable">$request_uri</span>? <span class="literal">permanent</span>;</span><br><span class="line"><span class="attribute">return</span> <span class="number">301</span> https://example.com<span class="variable">$request_uri</span>;</span><br><span class="line"><span class="attribute">server_name</span> test.com www.test.com; </span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$host</span> <span class="regexp">~* test.com)</span> &#123; </span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> http://www.test.com/<span class="variable">$1</span> <span class="literal">permanent</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>http跳转https<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">rewrite ^(.*) https:<span class="regexp">//</span>www.abc.com<span class="variable">$1</span> permanent; </span><br><span class="line">有cdn</span><br><span class="line"><span class="keyword">if</span> ( <span class="variable">$http_from_https</span> != <span class="string">&#x27;on&#x27;</span> )&#123;</span><br><span class="line">     rewrite ^(.*) https:<span class="regexp">//</span>www.abc.com<span class="variable">$1</span> permanent;      </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
<li>取消目录执行权限 <figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">location</span> <span class="title">~* ^/(uploads</span>|templets|data)/.*.(php|php5)$ &#123;</span><br><span class="line">               <span class="keyword">deny</span>  all;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li>
<li>屏蔽来源域名<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">valid_referers</span> www.baidu.com www.<span class="number">360</span>.cn;</span><br><span class="line">            <span class="attribute">if</span> (<span class="variable">$invalid_referer</span>)&#123;</span><br><span class="line">                    <span class="attribute">return</span> <span class="number">403</span>/<span class="number">444</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>防盗链<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> <span class="regexp">~* .(gif|jpg|png|webp)$</span> &#123;</span><br><span class="line"><span class="attribute">valid_referers</span> <span class="literal">none</span> <span class="literal">blocked</span> domain.com <span class="regexp">*.domain.com</span> server_names ~.google. ~.baidu.;</span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line"><span class="attribute">return</span> <span class="number">403</span>/<span class="number">444</span>;</span><br><span class="line"><span class="comment">#rewrite ^/ http://www.domain.com/403.jpg;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">root</span> /opt/www/image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>屏蔽ip地址<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">allow</span> <span class="number">1.1.1.2</span>;</span><br><span class="line"><span class="attribute">allow</span> all;</span><br><span class="line"><span class="attribute">deny</span> all;</span><br><span class="line"><span class="attribute">deny</span> <span class="number">1.1.1.2</span></span><br><span class="line"></span><br><span class="line">location<span class="regexp"> ^~</span> /xxx/xxx/xx/</span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">allow</span> <span class="number">172.0.0.1</span>;</span><br><span class="line"><span class="attribute">allow</span> xxx.xxx.<span class="number">0</span>.<span class="number">0</span>/<span class="number">8</span>;<span class="comment">#表示允许xxx.xxx.0.1 ~ xxx.xxx.255.254</span></span><br><span class="line"><span class="attribute">allow</span> xxx.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>/<span class="number">16</span>;<span class="comment">#表示允许xxx.0.0.1 ~ xxx.255.255.254</span></span><br><span class="line"><span class="attribute">allow</span> xxx.xxx.xxx.x;</span><br><span class="line"><span class="attribute">deny</span> all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>前端还有cdn情况<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">map <span class="variable">$http_x_forwarded_for</span> <span class="variable">$clientIp</span> &#123;</span><br><span class="line">“” <span class="variable">$remote_addr</span>;</span><br><span class="line">~^(<span class="string">?P</span>[<span class="number">0</span>-<span class="number">9</span>.]+),<span class="string">?.</span><span class="variable">$ </span><span class="variable">$firstAddr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$clientIp</span> ~ “<span class="number">127.0</span>.<span class="number">0.1</span>|<span class="params">127.0.0.2”) &#123;</span></span><br><span class="line"><span class="params"><span class="keyword">return</span> 403/444;</span></span><br><span class="line"><span class="params"><span class="keyword">break</span>;</span></span><br><span class="line"><span class="params">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>屏蔽蜘蛛<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">if</span> (<span class="variable">$http_user_agent</span> <span class="regexp">~ &quot;AhrefsBot|FeedDemon|JikeSpider|MJ12bot|heritrix|EasouSpider|LinkpadBot|Ezooms&quot;</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">return</span> <span class="number">444</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>禁止非GET|HEAD|POST方式的抓取<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">if</span> (<span class="variable">$request_method</span> !<span class="regexp">~ ^(GET|HEAD|POST)$)</span> &#123;</span><br><span class="line">  <span class="attribute">return</span> <span class="number">403</span>/<span class="number">444</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li>去掉query_string<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$query_string</span> ~ doc-view-<span class="number">7521</span>.html=<span class="variable">$)</span>&#123;</span><br><span class="line">     rewrite ^<span class="regexp">/$ /</span>? permanent;</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li>禁止脚本运行<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">&lt;rule name<span class="operator">=</span><span class="string">&quot;deny Script &quot;</span>&gt;</span><br><span class="line">              &lt;match url<span class="operator">=</span><span class="string">&quot;(.*)(config|UploadFiles|Runtime|Framework|skin|data|pdf|banner|cert|uploadfile|html|style|styles|img|image|images|pics|upload|uploads|themes|templets|templates|css|js|cer|sound|fonts|javascripts|flash|media|stylesheets)/(.*).(asp|php|aspx|cer)$&quot;</span> ignoreCase<span class="operator">=</span><span class="string">&quot;true&quot;</span> /&gt;</span><br><span class="line">              &lt;action type<span class="operator">=</span><span class="string">&quot;AbortRequest&quot;</span> /&gt;</span><br><span class="line">    &lt;/rule&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="语法总结-2"><a href="#语法总结-2" class="headerlink" title="语法总结"></a>语法总结</h5><ul>
<li><p>if条件判断<br>  #判断访问域名: if ($host * test.com)<br>  #判断user_agent: if ($http_user_agent ~* “baiduspider” )<br>  #判断访问来源域名: valid_referers <a href="http://www.baidu.com;if/">www.baidu.com;if</a> ($invalid_referer){return 403;}<br>  #判断METHOD: if ($request_method ! ^(GET|HEAD|POST)$)<br>  #判断url中?后参数: if ($args ~* ^&#x2F;list.php?([^]+)([0-9]+)$)<br>  #判断url路径地址: if ($uri ~* ^&#x2F;list.php?([^]+)([0-9]+)$)<br>  #判断ip: if ($remote_addr ~* “127.0.0.1|127.0.0.2”)<br>  #判断真实文件: -e filename<br>  #判断真实目录: -d filename</p>
</li>
<li><p>处理方式<br>  #禁止访问: return 403&#x2F;444; deny all;<br>  #重定向到 rewrite ^&#x2F;(.)$ <a href="http://www.test.com/$1">http://www.test.com/$1</a> permanent;<br>  #重写到 rewrite ^(.)$ &#x2F;index.php?s&#x3D;$1 last;<br>  last – 基本上都用这个Flag。<br>  break – 中止Rewirte，不在继续匹配<br>  redirect – 返回临时重定向的HTTP状态302<br>  permanent – 返回永久重定向的HTTP状态301</p>
<p>  -f和!-f用来判断是否存在文件<br>  -d和!-d用来判断是否存在目录<br>  -e和!-e用来判断是否存在文件或目录<br>  -x和!-x用来判断文件是否可执行</p>
</li>
</ul>
<h5 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h5><p>location [&#x3D;|||^] &#x2F;uri&#x2F; { … }<br>&#x3D; 开头表示精确匹配<br>^ 开头表示uri以某个常规字符串开头，理解为匹配 url路径即可。nginx不对url做编码，因此请求为&#x2F;static&#x2F;20%&#x2F; aa，可以被规则^~ &#x2F;static&#x2F; &#x2F;aa匹配到（注意是空格)<br>~ 开头表示区分大小写的正则匹配<br>~ 开头表示不区分大小写的正则匹配<br>!和!*分别为区分大小写不匹配及不区分大小写不匹配 的正则<br>&#x2F; 通用匹配，任何请求都会匹配到。<br>全局变量<br>$args<br>$content_length<br>$content_type<br>$document_root<br>$document_uri<br>$host<br>$http_user_agent<br>$http_cookie<br>$limit_rate<br>$request_body_file<br>$request_method<br>$remote_addr<br>$remote_port<br>$remote_user<br>$request_filename<br>$request_uri<br>$query</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="variable">$flag</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$host</span> = <span class="string">&#x27;1.com&#x27;</span>)&#123;</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$flag</span> <span class="string">&quot;<span class="variable">$</span>&#123;flag&#125;1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~* <span class="string">&quot;iPhone|iPod|Android|ios|iPad&quot;</span> )&#123;</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$flag</span> <span class="string">&quot;<span class="variable">$</span>&#123;flag&#125;2&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$flag</span> = <span class="string">&quot;012&quot;</span>)&#123;</span><br><span class="line">    rewrite ^/(.*)<span class="variable">$</span> http://www.baidu.com/<span class="variable">$</span> last;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">如果ip是xxx,访问www.xxx.com/?pass 可以,否则屏蔽</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$flag</span> f;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$remote_addr</span> = <span class="string">&#x27;118.114.245.37&#x27;</span>)&#123;</span><br><span class="line">        <span class="built_in">set</span> <span class="variable">$flag</span> <span class="string">&quot;<span class="variable">$</span>&#123;flag&#125;1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$args</span> !~* <span class="string">&#x27;pass&#x27;</span>)&#123;</span><br><span class="line">        <span class="built_in">set</span> <span class="variable">$flag</span> <span class="string">&quot;<span class="variable">$</span>&#123;flag&#125;2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">if</span> ( <span class="operator">-f</span> <span class="variable">$request_filename</span> ) &#123;</span><br><span class="line">       <span class="built_in">set</span> <span class="variable">$flag</span> <span class="string">&quot;<span class="variable">$</span>&#123;flag&#125;3&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$flag</span> = <span class="string">&#x27;f12&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">444</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>香港图片缓存排除https跳转</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> ( $http_from_https != &#x27;on&#x27; )&#123;</span><br><span class="line">    <span class="built_in">rewrite</span>  (.*)\.(jpg|<span class="type">jpeg</span>|<span class="type">gif</span>|<span class="type">exe</span>|<span class="type">rar</span>|<span class="type">zip</span>|<span class="type">mpr</span>|<span class="type">doc</span>|<span class="type">xls</span>|<span class="type">xlsx</span>|<span class="type">bmp</span>|<span class="type">png</span>|<span class="type">tar</span>.gz|<span class="type">tgz</span>|<span class="type">wmv</span>|<span class="type">ppt</span>|<span class="type">mp4</span>|<span class="type">mp3</span>|<span class="type">avi</span>|<span class="type">rmvb</span>|<span class="type">mpeg</span>|<span class="type">apk</span>|<span class="type">sga</span>|<span class="type">sis</span>|<span class="type">sisx</span>|<span class="type">ipa</span>|<span class="type">dpk</span>|<span class="type">app</span>|<span class="type">jad</span>|<span class="type">tar</span>|<span class="type">jar</span>)$  http://$host.img<span class="number">.800</span>cdn.com$<span class="number">1.</span>$<span class="number">2</span> </span><br><span class="line"></span><br><span class="line">? break;</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;rule name=<span class="string">&quot;301&quot;</span> stopProcessing=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">match</span> url=<span class="string">&quot;^(.*)$&quot;</span> ignoreCase=<span class="string">&quot;false&quot;</span> /&gt;</span><br><span class="line">  &lt;conditions logicalGrouping=<span class="string">&quot;MatchAny&quot;</span>&gt;                       </span><br><span class="line">  &lt;add input=<span class="string">&quot;&#123;HTTP_X_FORWARDED_PROTO&#125;&quot;</span> <span class="built_in">pattern</span>=<span class="string">&quot;^https$&quot;</span> negate=<span class="string">&quot;true&quot;</span> /&gt;</span><br><span class="line">  &lt;add input=<span class="string">&quot;&#123;HTTP_FROM_HTTPS&#125;&quot;</span> <span class="built_in">pattern</span>=<span class="string">&quot;^on$&quot;</span> negate=<span class="string">&quot;true&quot;</span> /&gt;</span><br><span class="line">  &lt;add input=<span class="string">&quot;&#123;HTTPS&#125;&quot;</span> <span class="built_in">pattern</span>=<span class="string">&quot;^on$&quot;</span> negate=<span class="string">&quot;true&quot;</span> /&gt;</span><br><span class="line">  &lt;/conditions&gt;</span><br><span class="line">  &lt;action type=<span class="string">&quot;Redirect&quot;</span> url=<span class="string">&quot;https://www.china-ex.hk/&#123;R:1&#125;&quot;</span> redirectType=<span class="string">&quot;Permanent&quot;</span> /&gt;</span><br><span class="line">  &lt;/rule&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>rewrite</category>
      </categories>
      <tags>
        <tag>rewrite</tag>
      </tags>
  </entry>
  <entry>
    <title>shell 脚本整理</title>
    <url>/2023/12/29/shell%20%E8%84%9A%E6%9C%AC%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<blockquote>
<p>整理一些日常shell脚本</p>
</blockquote>
<span id="more"></span>
<h6 id="centos-自动同步时间"><a href="#centos-自动同步时间" class="headerlink" title="centos 自动同步时间"></a>centos 自动同步时间</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#author:yc</span></span><br><span class="line"><span class="comment">#自动同步北京时间</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;当前时间:`date`&quot;</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;是否确认更新时间y/n？&quot;</span> st</span><br><span class="line"><span class="keyword">if</span> [ -f /usr/sbin/ntpdate ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;ntpdate已经安装&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        yum install -y ntpdate</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$st</span> = <span class="string">&quot;y&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">        /etc/init.d/iptables stop</span><br><span class="line">        sed -i <span class="string">&quot;/udp -j DROP/i\-A OUTPUT -p udp -m udp --dport 123 -j ACCEPT&quot;</span> /etc/sysconfig/iptables</span><br><span class="line">        /etc/init.d/iptables starta</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></span><br><span class="line">        ntpdate time2.aliyun.com</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;时间同步成功&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>shell中${}和()的使用</title>
    <url>/2023/12/15/shell%E4%B8%AD$%7B%7D%E5%92%8C()%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>shell中${}和()的使用</p>
<span id="more"></span>
<ol>
<li>截断功能<br>“${1^^}_DOC_CHANGE_PID”  #变量转换为大写<br>“${1,,}_DOC_CHANGE_PID”  #变量转换为小写<br>${!DOC_CHANGE_PID} #取变量的值<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;file<span class="comment">#*/&#125;:       拿掉第一条/及其左边的字符串：dir1/dir2/dir3/my.file.txt</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;file<span class="comment">##*/&#125;:    拿掉最后一条/及其左边的字符串：my.file.txt</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;file<span class="comment">#*.&#125;:       拿掉第一个.及其左边的字符串：file.txt</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;file<span class="comment">##*.&#125;:    拿掉最后一个.及其左边的字符串：txt</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;file%/*&#125;:     拿掉最后条/及其右边的字符串：/dir1/dir2/dir3</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;file%%/*&#125;: 拿掉第一条/及其右边的字符串：(空值)</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;file%.*&#125;:    拿掉最后一个.及其右边的字符串：/dir1/dir2/dir3/my.file</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;file%%.*&#125;: 拿掉第一个.及其右边的字符串：/dir1/dir2/dir3/my</span></span><br></pre></td></tr></table></figure>
记忆的方法为：<br>[list]#是去掉左边, ##最后一个<br>   %是去掉右边, %%第一个</li>
<li>字符串提取<br>单一符号是最小匹配﹔两个符号是最大匹配。<br>${file:0:5}：提取最左边的 5 个字节：&#x2F;dir1<br>${file:5:5}：提取第 5 个字节右边的连续 5 个字节：&#x2F;dir2</li>
<li>字符串替换<br>${file&#x2F;dir&#x2F;path}：将第一个 dir 提换为 path：&#x2F;path1&#x2F;dir2&#x2F;dir3&#x2F;my.file.txt<br>${file&#x2F;&#x2F;dir&#x2F;path}：将全部 dir 提换为 path：&#x2F;path1&#x2F;path2&#x2F;path3&#x2F;my.file.txt</li>
<li>针对不同的变量状态赋值(没设定、空值、非空值)：<br>${file-my.file.txt}: 若$file没有设定，则使用my.file.txt作返回值。(空值及非空值时不作处理)<br>${file:-my.file.txt}:若$file没有设定或为空值，则使用my.file.txt作返回值。(非空值时不作处理)<br>${file+my.file.txt}: 若$file设为空值或非空值，均使用my.file.txt作返回值。(没设定时不作处理)<br>${file:+my.file.txt}:若$file为非空值，则使用my.file.txt作返回值。(没设定及空值时不作处理)<br>${file&#x3D;my.file.txt}: 若$file没设定，则使用my.file.txt作返回值，同时将$file 赋值为 my.file.txt。(空值及非空值时不作处理)<br>${file:&#x3D;my.file.txt}:若$file没设定或为空值，则使用my.file.txt作返回值，同时将 $file 赋值为 my.file.txt。(非空值时不作处理)<br>${file?my.file.txt}: 若$file没设定，则将my.file.txt输出至 STDERR。(空值及非空值时不作处理)<br>${file:?my.file.txt}:若$file没设定或为空值，则将my.file.txt输出至STDERR。(非空值时不作处理)<br>注意:<br>“:+”的情况是不包含空值的.<br>“:-“, “:&#x3D;”等只要有号就是包含空值(null).</li>
<li>变量的长度<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;</span><span class="comment">#file&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>数组运算<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">A=(a b c def)</span></span><br><span class="line"><span class="language-xml">$</span><span class="template-variable">&#123;A[@]&#125;</span><span class="language-xml"> 或 $</span><span class="template-variable">&#123;A[*]&#125;</span><span class="language-xml"> 可得到 a b c def (全部组数)</span></span><br><span class="line"><span class="language-xml">$</span><span class="template-variable">&#123;A[0]&#125;</span><span class="language-xml"> 可得到 a (第一个组数)，$</span><span class="template-variable">&#123;A[1]&#125;</span><span class="language-xml"> 则为第二个组数...</span></span><br><span class="line"><span class="language-xml">$</span><span class="template-tag">&#123;#<span class="name">A</span>[@]&#125;</span><span class="language-xml"> 或 $</span><span class="template-tag">&#123;#<span class="name">A</span>[*]&#125;</span><span class="language-xml"> 可得到 4 (全部组数数量)</span></span><br><span class="line"><span class="language-xml">$</span><span class="template-tag">&#123;#<span class="name">A</span>[0]&#125;</span><span class="language-xml"> 可得到 1 (即第一个组数(a)的长度)，$</span><span class="template-tag">&#123;#<span class="name">A</span>[3]&#125;</span><span class="language-xml"> 可得到 3 (第四个组数(def)的长度)</span></span><br></pre></td></tr></table></figure>
7.例子<br>介绍下Shell中的${}、##和%%使用范例，本文给出了不同情况下得到的结果。<br>假设定义了一个变量为：<br>代码如下:<br>file&#x3D;&#x2F;dir1&#x2F;dir2&#x2F;dir3&#x2F;my.file.txt<br>可以用${ }分别替换得到不同的值：<br>${file#<em>&#x2F;}：删掉第一个 &#x2F; 及其左边的字符串：dir1&#x2F;dir2&#x2F;dir3&#x2F;my.file.txt<br>${file##</em>&#x2F;}：删掉最后一个 &#x2F;  及其左边的字符串：my.file.txt<br>${file#<em>.}：删掉第一个 .  及其左边的字符串：file.txt<br>${file##</em>.}：删掉最后一个 .  及其左边的字符串：txt<br>${file%&#x2F;<em>}：删掉最后一个  &#x2F;  及其右边的字符串：&#x2F;dir1&#x2F;dir2&#x2F;dir3<br>${file%%&#x2F;</em>}：删掉第一个 &#x2F;  及其右边的字符串：(空值)<br>${file%.<em>}：删掉最后一个  .  及其右边的字符串：&#x2F;dir1&#x2F;dir2&#x2F;dir3&#x2F;my.file<br>${file%%.</em>}：删掉第一个  .   及其右边的字符串：&#x2F;dir1&#x2F;dir2&#x2F;dir3&#x2F;my<br>记忆的方法为：<br># 是 去掉左边（键盘上#在 $ 的左边）<br>%是去掉右边（键盘上% 在$ 的右边）<br>单一符号是最小匹配；两个符号是最大匹配<br>${file:0:5}：提取最左边的 5 个字节：&#x2F;dir1<br>${file:5:5}：提取第 5 个字节右边的连续5个字节：&#x2F;dir2<br>也可以对变量值里的字符串作替换：<br>${file&#x2F;dir&#x2F;path}：将第一个dir 替换为path：&#x2F;path1&#x2F;dir2&#x2F;dir3&#x2F;my.file.txt<br>${file&#x2F;&#x2F;dir&#x2F;path}：将全部dir 替换为 path：&#x2F;path1&#x2F;path2&#x2F;path3&#x2F;my.file.txt</li>
</ol>
<p> </p>
<h5 id="shell中的-几种语法用法"><a href="#shell中的-几种语法用法" class="headerlink" title="shell中的(),{}几种语法用法"></a>shell中的(),{}几种语法用法</h5><p> <br>查看脚本语法是否有错误：<br>bash -n modify_suffix.sh<br>跟踪执行</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">sh -x modify_suffix.sh aaa</span><br><span class="line"><span class="number">1.</span>$&#123;var&#125; </span><br><span class="line"><span class="number">2.</span>$(cmd) </span><br><span class="line"><span class="number">3.</span>()和&#123;&#125; </span><br><span class="line"><span class="number">4.</span>$&#123;var:-<span class="keyword">string</span>&#125;,$&#123;var:+<span class="keyword">string</span>&#125;,$&#123;var:=<span class="keyword">string</span>&#125;,$&#123;var:?<span class="keyword">string</span>&#125; </span><br><span class="line"><span class="number">5.</span>$((<span class="keyword">exp</span>)) </span><br><span class="line"><span class="number">6.</span>$(var%pattern),$(var%%pattern),$(var#pattern),$(var##pattern)</span><br></pre></td></tr></table></figure>
<p>1.Shell中变量的原形：${var}<br> 但当你要显示变量值加随意的字符(我这里用_AA)时，就会出错<br>这时应该用变量的原形:${var},即是加一个大括号来限定变量名称的范围</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@bogon</span> sh]<span class="meta"># aa=<span class="string">&#x27;ajax&#x27;</span></span></span><br><span class="line">[root<span class="symbol">@bogon</span> sh]<span class="meta"># echo $aa</span></span><br><span class="line">ajax</span><br><span class="line">[root<span class="symbol">@bogon</span> sh]<span class="meta"># echo $aa_AA</span></span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@bogon</span> sh]<span class="meta"># echo $&#123;aa&#125;_AA</span></span><br><span class="line">ajax_AA</span><br></pre></td></tr></table></figure>
<p>批量修改一个目录里文件名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]<span class="comment"># cat modify_suffix.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">dst_path=<span class="variable">$1</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `<span class="built_in">ls</span> <span class="variable">$dst_path</span>`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> [ -d <span class="variable">$1</span>/<span class="variable">$file</span> ]</span><br><span class="line">                 <span class="keyword">then</span> <span class="built_in">echo</span> `<span class="variable">$0</span> <span class="variable">$1</span>/<span class="variable">$file</span>`</span><br><span class="line">        <span class="keyword">elif</span> [ -f <span class="variable">$1</span>/<span class="variable">$file</span> ]</span><br><span class="line">                <span class="keyword">then</span>    <span class="built_in">mv</span> <span class="variable">$1</span>/<span class="variable">$file</span> <span class="variable">$1</span>/<span class="variable">$&#123;file&#125;</span>._mod</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$1</span>/<span class="variable">$&#123;file&#125;</span> is unknow file <span class="built_in">type</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span>;</span><br></pre></td></tr></table></figure>
<p>.&#x2F;modify_suffix.sh  .&#x2F;f<br>将 .&#x2F;f 下的所有文件文件名添加了.mod</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@bogon</span> ~]<span class="meta"># file=<span class="string">&quot;modify_suffix.sh.tar.gz&quot;</span></span></span><br><span class="line">[root<span class="symbol">@bogon</span> ~]<span class="meta"># echo <span class="string">&quot;$&#123;file%%.*&#125;&quot;</span></span></span><br><span class="line">modify_suffix</span><br><span class="line">[root<span class="symbol">@bogon</span> ~]<span class="meta"># echo <span class="string">&quot;$&#123;file%.*&#125;&quot;</span></span></span><br><span class="line">modify_suffix.sh.tar</span><br><span class="line">[root<span class="symbol">@bogon</span> ~]<span class="meta"># echo <span class="string">&quot;$&#123;file#*.&#125;&quot;</span></span></span><br><span class="line">sh.tar.gz</span><br><span class="line">[root<span class="symbol">@bogon</span> ~]<span class="meta"># echo <span class="string">&quot;$&#123;file##*.&#125;&quot;</span></span></span><br><span class="line">gz</span><br></pre></td></tr></table></figure>
<p>2.$(cmd)</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">[root@bogon t]# <span class="keyword">ls</span></span><br><span class="line"><span class="number">1.</span>txt  <span class="number">2.</span>txt</span><br><span class="line">[root@bogon t]# echo $(<span class="keyword">ls</span>)</span><br><span class="line"><span class="number">1.</span>txt <span class="number">2.</span>txt</span><br></pre></td></tr></table></figure>
<p>echo $(ls) 执行过程<br>shell扫描一遍命令行,发现了$(cmd)结构,便将$(cmd)中的cmd执行一次,得到其标准输出,<br>再将此输出放到原来命令 echo $(ls)中的 $(ls)位置，即替换了$(ls),再执行echo命令<br>如下：<br>echo $(ls)被替换成了echo 1.txt 2.txt<br>这里要注意的是$(cmd)中的命令的错误输出是不会被替换的，替换的只是标准输出</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">[root@bogon <span class="built_in">t</span>]# <span class="built_in">var</span>=$(cat <span class="number">3</span>.txt)</span><br><span class="line">c<span class="symbol">at:</span> <span class="number">3</span>.<span class="built_in">t</span><span class="symbol">xt:</span> 没有那个文件或目录</span><br><span class="line">[root@bogon <span class="built_in">t</span>]# echo $<span class="built_in">var</span></span><br></pre></td></tr></table></figure>
<p>$var显然是空的<br>3、一串的命令执行()和{}<br>()和{}都是对一串的命令进行执行,但有所区别：<br>相同点：<br>()和{}都是把一串的命令放在括号里面,并且命令之间用;号隔开<br>不同点<br>()只是对一串命令重新开一个子shell进行执行,{}对一串命令在当前shell执行<br>()最后一个命令可以不用分号,{}最后一个命令要用分号<br>()里的第一个命令和左边括号不必有空格,{}的第一个命令和左括号之间必须要有一个空格<br>()和{}中括号里面的某个命令的重定向只影响该命令,但括号外的重定向则影响到括号里的所有命令</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">[root@bogon t]# var=test</span><br><span class="line">[root@bogon t]# echo $var</span><br><span class="line"><span class="keyword">test</span></span><br><span class="line"><span class="keyword"></span>[root@bogon t]# (var=notest;echo $var)</span><br><span class="line">notest</span><br><span class="line">[root@bogon t]# echo $var</span><br><span class="line"><span class="keyword">test</span></span><br><span class="line"><span class="keyword"></span>[root@bogon t]# &#123; var=notest;echo $var;&#125;</span><br><span class="line">notest</span><br><span class="line">[root@bogon t]# echo $var</span><br><span class="line">notest</span><br><span class="line">[root@bogon t]#</span><br></pre></td></tr></table></figure>
<p>在{}中 第一个命令和{之间必须有空格,结束必须有;<br>{}中的修改了$var的值 说明在当前shell执行</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@bogon</span> t]<span class="meta"># &#123; var1=test1<span class="comment">;var2=test2;echo $var1&gt;a;echo $var2;&#125;</span></span></span><br><span class="line">test2</span><br><span class="line">[root<span class="symbol">@bogon</span> t]<span class="meta"># cat a</span></span><br><span class="line">test1</span><br><span class="line">[root<span class="symbol">@bogon</span> t]<span class="meta"># &#123; var1=test1<span class="comment">;var2=test2;echo $var1;echo $var2;&#125;&gt;a</span></span></span><br><span class="line">[root<span class="symbol">@bogon</span> t]<span class="meta"># cat a</span></span><br><span class="line">test1</span><br><span class="line">test2</span><br></pre></td></tr></table></figure>
<p>脚本实例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;2&quot;</span></span><br><span class="line">) | awk <span class="string">&#x27;&#123;print NR,$0&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>4.几种特殊的替换结构：<br>${var:-string},${var:+string},${var:&#x3D;string},${var:?string}</p>
<ol>
<li>${var:-string} 和 ${var:&#x3D;string}<br>若变量var为空或者未定义,则用在命令行中用string来替换${var:-string}<br>否则变量var不为空时,则用变量var的值来替换${var:-string}<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">[root@<span class="keyword">bogon </span>~]<span class="comment"># echo $a</span></span><br><span class="line"></span><br><span class="line">[root@<span class="keyword">bogon </span>~]<span class="comment"># echo $&#123;a:-bcc&#125;</span></span><br><span class="line"><span class="keyword">bcc</span></span><br><span class="line"><span class="keyword"></span>[root@<span class="keyword">bogon </span>~]<span class="comment"># echo $a</span></span><br><span class="line"></span><br><span class="line">[root@<span class="keyword">bogon </span>~]<span class="comment"># a=ajax</span></span><br><span class="line">[root@<span class="keyword">bogon </span>~]<span class="comment"># echo $&#123;a:-bcc&#125;</span></span><br><span class="line">ajax</span><br><span class="line">[root@<span class="keyword">bogon </span>~]<span class="comment"># unset a</span></span><br><span class="line">[root@<span class="keyword">bogon </span>~]<span class="comment"># echo $a</span></span><br><span class="line"></span><br><span class="line">[root@<span class="keyword">bogon </span>~]<span class="comment"># echo $&#123;a:=bbc&#125;</span></span><br><span class="line"><span class="keyword">bbc</span></span><br><span class="line"><span class="keyword"></span>[root@<span class="keyword">bogon </span>~]<span class="comment"># echo $a</span></span><br><span class="line"><span class="keyword">bbc</span></span><br></pre></td></tr></table></figure>
发现<br>${var:-string}和${var:&#x3D;string}<br>比较 后者发现$var为空时,把string赋值给了var<br>后者是一种赋值默认值的常见做法</li>
<li>${var:+string}<br>规则和上面的完全相反<br>即只有当var不是空的时候才替换成string,若var为空时则不替换或者说是替换成变量var的值,即空值<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">root@bogon ~</span>]<span class="meta"># a=ajax</span></span><br><span class="line">[<span class="meta">root@bogon ~</span>]<span class="meta"># echo $a</span></span><br><span class="line">ajax</span><br><span class="line">[<span class="meta">root@bogon ~</span>]<span class="meta"># echo $&#123;a:+bbc&#125;</span></span><br><span class="line">bbc</span><br><span class="line">[<span class="meta">root@bogon ~</span>]<span class="meta"># echo $a</span></span><br><span class="line">ajax</span><br><span class="line">[<span class="meta">root@bogon ~</span>]<span class="meta"># unset a</span></span><br><span class="line">[<span class="meta">root@bogon ~</span>]<span class="meta"># echo $a</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">root@bogon ~</span>]<span class="meta"># echo $&#123;a:+bbc&#125;</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">root@bogon ~</span>]<span class="meta"># </span></span><br><span class="line"><span class="number">111</span></span><br><span class="line"><span class="number">3.</span> $&#123;<span class="keyword">var</span>:?<span class="built_in">string</span>&#125;</span><br><span class="line">替换规则:若变量<span class="keyword">var</span>不为空,则用变量<span class="keyword">var</span>的值来替换$&#123;<span class="keyword">var</span>:?<span class="built_in">string</span>&#125;</span><br><span class="line">若变量<span class="keyword">var</span>为空,则把<span class="built_in">string</span>输出到标准错误中,并从脚本中退出。</span><br><span class="line">可利用此特性来检查是否设置了变量的值</span><br></pre></td></tr></table></figure>
[root@bogon ~]# echo $a</li>
</ol>
<p>[root@bogon ~]# echo ${a:?bbc}<br>-bash: a: bbc<br>[root@bogon ~]# a&#x3D;ajax<br>[root@bogon ~]# echo ${a:?bbc}<br>ajax<br>[root@bogon ~]# a&#x3D;ajax<br>[root@bogon ~]# echo ${a:-<code>date</code>}<br>ajax<br>[root@bogon ~]# unset a<br>[root@bogon ~]# echo ${a:-<code>date</code>}<br>2017年 02月 21日 星期二 10:13:46 CST<br>[root@bogon ~]# echo ${a:-$(date)}<br>2017年 02月 21日 星期二 10:13:59 CST<br>[root@bogon ~]# b&#x3D;bbc<br>[root@bogon ~]# echo ${a:-$b}<br>bbc</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="number">5.</span> $((<span class="built_in">exp</span>)) POSIX标准的扩展计算</span><br><span class="line">这种计算是符合C语言的运算符,也就是说只要符合C的运算符都可用在$((<span class="built_in">exp</span>)),包括三目运算符</span><br><span class="line">注意:这种扩展计算是整数型的计算,不支持浮点型和字符串等</span><br><span class="line">若是逻辑判断,表达式<span class="built_in">exp</span>为真则为<span class="number">1</span>,假则为<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>[root@bogon ~]# echo $(3+2)<br>-bash: 3+2: 未找到命令</p>
<p>[root@bogon ~]# echo $((3+2))<br>5<br>[root@bogon ~]# echo $((3.5+2))<br>-bash: 3.5+2: 语法错误: 无效的算术运算符 （错误符号是 “.5+2”）<br>[root@bogon ~]# echo $((3&gt;2))<br>1<br>[root@bogon ~]# echo $((3&gt;2?’a’:’b’))<br>-bash: 3&gt;2?’a’:’b’: 语法错误: 期待操作数 （错误符号是 “‘a’:’b’”）<br>[root@bogon ~]# echo $((3&gt;2?a:b))<br>0<br>[root@bogon ~]# echo $((a&#x3D;3+2))<br>5<br>[root@bogon ~]# echo $((a++))<br>5<br>[root@bogon ~]# echo $a<br>6</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">6.四种模式匹配替换结构:</span></span><br></pre></td></tr></table></figure>
<p>${var%pattern}<br>${var%%pattern}<br>${var#pattern}<br>${var##pattern}</p>
<p>${var%pattern},${var%%pattern} 从右边开始匹配<br>${var#pattern},${var##pattern} 从左边开始匹配<br>${var%pattern} ,${var#pattern} 表示最短匹配,匹配到就停止,非贪婪<br>${var%%pattern},${var##pattern} 是最长匹配</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">只有在pattern中使用了通配符才能有最长最短的匹配,否则没有最 长最短匹配之分</span><br><span class="line">结构中的pattern支持通配符</span><br><span class="line">* 表示零个或多个任意字符</span><br><span class="line">?表示零个或一个任意字符</span><br><span class="line"><span class="string">[...]</span>表示匹配中括号里面的字符</span><br><span class="line"><span class="string">[!...]</span>表示不匹配中括号里面的字符</span><br></pre></td></tr></table></figure>
<p>[root@bogon ~]# f&#x3D;a.tar.gz<br>[root@bogon ~]# echo ${f##<em>.}<br>gz<br>[root@bogon ~]# echo ${f%%.</em>}<br>a<br>[root@bogon ~]# var&#x3D;abcdccbbdaa<br>[root@bogon ~]# echo ${var%%d*}<br>abc<br>[root@bogon ~]# echo ${var%d*}<br>abcdccbb<br>[root@bogon ~]# echo ${var#*d}<br>ccbbdaa<br>[root@bogon ~]# echo ${var##*d}<br>aa</p>
<pre><code>#发现输出的内容是var去掉pattern的那部分字符串的值

Shell $0, $#, $*, $@, $?, $$和命令行参数
$0  当前脚本的文件名 
$n  传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。 
$#  传递给脚本或函数的参数个数。 
$*  传递给脚本或函数的所有参数。 
$@  传递给脚本或函数的所有参数。被双引号(&quot; &quot;)包含时，与 $* 稍有不同，下面将会讲到。 
$?  上个命令的退出状态，或函数的返回值。 
$$  当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。

一、if的基本语法:
if [ command ];then
   符合该条件执行的语句
elif [ command ];then
   符合该条件执行的语句
else
   符合该条件执行的语句
fi
二、文件/文件夹(目录)判断
[ -b FILE ] 如果 FILE 存在且是一个块特殊文件则为真。
[ -c FILE ] 如果 FILE 存在且是一个字特殊文件则为真。
[ -d DIR ] 如果 FILE 存在且是一个目录则为真。
[ -e FILE ] 如果 FILE 存在则为真。
[ -f FILE ] 如果 FILE 存在且是一个普通文件则为真。
[ -g FILE ] 如果 FILE 存在且已经设置了SGID则为真。
[ -k FILE ] 如果 FILE 存在且已经设置了粘制位则为真。
[ -p FILE ] 如果 FILE 存在且是一个名字管道(F如果O)则为真。
[ -r FILE ] 如果 FILE 存在且是可读的则为真。
[ -s FILE ] 如果 FILE 存在且大小不为0则为真。
[ -t FD ] 如果文件描述符 FD 打开且指向一个终端则为真。
[ -u FILE ] 如果 FILE 存在且设置了SUID (set user ID)则为真。
[ -w FILE ] 如果 FILE存在且是可写的则为真。
[ -x FILE ] 如果 FILE 存在且是可执行的则为真。
[ -O FILE ] 如果 FILE 存在且属有效用户ID则为真。
[ -G FILE ] 如果 FILE 存在且属有效用户组则为真。
[ -L FILE ] 如果 FILE 存在且是一个符号连接则为真。
[ -N FILE ] 如果 FILE 存在 and has been mod如果ied since it was last read则为真。
[ -S FILE ] 如果 FILE 存在且是一个套接字则为真。
[ FILE1 -nt FILE2 ] 如果 FILE1 has been changed more recently than FILE2, or 如果 FILE1 exists and FILE2 does not则为真。
[ FILE1 -ot FILE2 ] 如果 FILE1 比 FILE2 要老, 或者 FILE2 存在且 FILE1 不存在则为真。
[ FILE1 -ef FILE2 ] 如果 FILE1 和 FILE2 指向相同的设备和节点号则为真。


三、字符串判断
[ -z STRING ] 如果STRING的长度为零则为真 ，即判断是否为空，空即是真；
[ -n STRING ] 如果STRING的长度非零则为真 ，即判断是否为非空，非空即是真；
[ STRING1 = STRING2 ] 如果两个字符串相同则为真 ；
[ STRING1 != STRING2 ] 如果字符串不相同则为真 ；
[ STRING1 ]　 如果字符串不为空则为真,与-n类似
</code></pre>
]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>shell安装脚本</title>
    <url>/2023/12/15/shell%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h4 id="shell安装脚本"><a href="#shell安装脚本" class="headerlink" title="shell安装脚本"></a>shell安装脚本</h4><span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="comment">#nginx 安装脚本</span></span><br><span class="line"><span class="comment">#解压和编译不能是同一个目录</span></span><br><span class="line"></span><br><span class="line">basedir=<span class="string">&#x27;/usr/local/&#x27;</span></span><br><span class="line">user=nginx</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">Echo</span></span>()&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">    success)  flag=<span class="string">&quot;\033[1;32m&quot;</span></span><br><span class="line">    ;;</span><br><span class="line">    failure)  flag=<span class="string">&quot;\033[1;31m&quot;</span></span><br><span class="line">    ;;</span><br><span class="line">    warning)  flag=<span class="string">&quot;\033[1;33m&quot;</span></span><br><span class="line">    ;;</span><br><span class="line">    msg)  flag=<span class="string">&quot;\033[1;34m&quot;</span></span><br><span class="line">    ;;</span><br><span class="line">    *)  flag=<span class="string">&quot;\033[1;34m&quot;</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">checkenv</span></span>()&#123;</span><br><span class="line">    <span class="comment">#环境预安装</span></span><br><span class="line">    yum -y install gcc gcc-c++ automake pcre pcre-devel zlib-devel openssl openssl-devel</span><br><span class="line">    <span class="built_in">mkdir</span> -p /var/tmp/nginx/client</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">install</span></span>()&#123;</span><br><span class="line">    <span class="comment">#编译安装</span></span><br><span class="line">    checkenv</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> $(<span class="built_in">ls</span> ./)</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span>  [ <span class="string">&quot;<span class="variable">$&#123;file:0:5&#125;</span>&quot;</span> = <span class="string">&quot;nginx&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">                nginxdir=<span class="variable">$&#123;file&#125;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    wget -O nginx.tar.gz http://nginx.org/download/nginx-1.20.1.tar.gz &amp;&amp; tar -zxvf nginx.tar.gz &amp;&amp; <span class="built_in">rm</span> -rf nginx.tar.gz</span><br><span class="line">    <span class="built_in">pushd</span> <span class="variable">$&#123;nginxdir&#125;</span></span><br><span class="line">    ./configure --prefix=<span class="variable">$basedir</span>/nginx --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module\</span><br><span class="line">    --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module\</span><br><span class="line">    --with-http_stub_status_module --with-http_auth_request_module --with-threads --with-stream --with-stream_ssl_module --with-http_slice_module --with-mail --with-mail_ssl_module\</span><br><span class="line">    --with-file-aio --with-http_v2_module --with-pcre</span><br><span class="line"></span><br><span class="line">    make -j<span class="variable">$&#123;Thread:-4&#125;</span> &amp;&amp; make install</span><br><span class="line">    <span class="built_in">ln</span> -sf <span class="variable">$basedir</span>/nginx/sbin/nginx /sbin/nginx</span><br><span class="line">    useradd -s /sbin/nologin -M <span class="variable">$user</span></span><br><span class="line">    <span class="comment">##启动脚本</span></span><br><span class="line">    <span class="built_in">cat</span> &gt; /usr/lib/systemd/system/nginx.service &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">    [Unit]</span></span><br><span class="line"><span class="string">    Description=nginx.service</span></span><br><span class="line"><span class="string">    After=network.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    [Service]</span></span><br><span class="line"><span class="string">    Type=forking</span></span><br><span class="line"><span class="string">    ExecStart=/usr/local/nginx/sbin/nginx</span></span><br><span class="line"><span class="string">    ExecReload=/usr/local/nginx/sbin/nginx -s reload</span></span><br><span class="line"><span class="string">    ExecStop=/usr/local/nginx/sbin/nginx -s stop</span></span><br><span class="line"><span class="string">    PrivateTmp=true</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    [Install]</span></span><br><span class="line"><span class="string">    WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">    <span class="comment">##开机启动</span></span><br><span class="line">    systemctl <span class="built_in">enable</span> nginx.service</span><br><span class="line">    systemctl start nginx.service</span><br><span class="line">    <span class="comment">## 更改/etc/profile文件</span></span><br><span class="line">    [ -z <span class="string">&quot;`grep ^&#x27;export PATH=&#x27; /etc/profile`&quot;</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;export PATH=<span class="variable">$&#123;basedir&#125;</span>/nginx/sbin:\$PATH&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line">    <span class="built_in">sleep</span> 1</span><br><span class="line">    <span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;nginx install success&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;error，安装失败！&quot;</span></span><br><span class="line">        make clean</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line">install</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh密钥登录以及ssh-agent管理密钥</title>
    <url>/2023/12/18/ssh%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95%E4%BB%A5%E5%8F%8Assh-agent%E7%AE%A1%E7%90%86%E5%AF%86%E9%92%A5/</url>
    <content><![CDATA[<blockquote>
<p>ssh密钥登录以及ssh-agent管理密钥 </p>
</blockquote>
<span id="more"></span>
<h5 id="1-生成密钥"><a href="#1-生成密钥" class="headerlink" title="1.生成密钥"></a>1.生成密钥</h5><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssh-keygen -t rsa</span></span><br></pre></td></tr></table></figure>
<h5 id="2-安装密钥"><a href="#2-安装密钥" class="headerlink" title="2.安装密钥"></a>2.安装密钥</h5><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">ssh-<span class="keyword">copy</span><span class="language-bash">-<span class="built_in">id</span> -i ~/.ssh/id_rsa.pub zsy@10.1.0.3</span></span><br></pre></td></tr></table></figure>
<h5 id="3-取消密码登录"><a href="#3-取消密码登录" class="headerlink" title="3.取消密码登录"></a>3.取消密码登录</h5><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config  </span><br><span class="line"></span><br><span class="line"> <span class="keyword">yes</span>       #RSA身份验证:<span class="keyword">yes</span>开启<span class="keyword">no</span>关闭  若这项没有可忽略</span><br><span class="line">PubkeyAuthentication <span class="keyword">yes</span>    #公钥身份验证:<span class="keyword">yes</span>开启<span class="keyword">no</span>关闭</span><br><span class="line">PermitRootLogin <span class="keyword">yes</span>          #允许root登录:<span class="keyword">yes</span>开启<span class="keyword">no</span>关闭</span><br><span class="line">PasswordAuthentication <span class="keyword">no</span>   #密码登录方式:<span class="keyword">yes</span>开启<span class="keyword">no</span>关闭</span><br><span class="line"></span><br><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>tcp,ip原理和抓包</title>
    <url>/2023/12/25/tcp-ip%E5%8E%9F%E7%90%86%E5%92%8C%E6%8A%93%E5%8C%85/</url>
    <content><![CDATA[<p><img src="/2023/12/25/tcp-ip%E5%8E%9F%E7%90%86%E5%92%8C%E6%8A%93%E5%8C%85/1703464967937.jpg"></p>
<span id="more"></span>
<h5 id="TCP连接-SYN-ACK-RST-UTG-PSH-FIN"><a href="#TCP连接-SYN-ACK-RST-UTG-PSH-FIN" class="headerlink" title="TCP连接:SYN ACK RST UTG PSH FIN"></a>TCP连接:SYN ACK RST UTG PSH FIN</h5><p>三次握手：发送端发送一个SYN&#x3D;1，ACK&#x3D;0标志的数据包给接收端，请求进行连接，这是第一次握手；<br>接收端收到请求并且允许连接的话，就会发送一个SYN&#x3D;1，ACK&#x3D;1标志的数据包给发送端，告诉它，可以通讯了，并且让发送端发送一个确认数据包，这是第二次握手；<br>最后，发送端发送一个SYN&#x3D;0，ACK&#x3D;1的数据包给接收端，告诉它连接已被确认，这就是第三次握手。之后，一个TCP连接建立，开始通讯。<br>*<strong>SYN：同步标志</strong><br>同步序列编号(Synchronize Sequence Numbers)栏有效。该标志仅在三次握手建立TCP连接时有效。它提示TCP连接的服务端检查序列编号，该序列编号为TCP连接初始端(一般是客户端)的初始序列编号。<br>在这里，可以把 TCP序列编号看作是一个范围从0到4，294，967，295的32位计数器。通过TCP连接交换的数据中每一个字节都经过序列编号。<br>在TCP报头中的序列编号栏包括了TCP分段中第一个字节的序列编号。</p>
<p>*<strong>ACK：确认标志</strong><br>确认编号(Acknowledgement Number)栏有效。大多数情况下该标志位是置位的。TCP报头内的确认编号栏内包含的确认编号(w+1，Figure-1)为下一个预期的序列编号，同时提示远端系统已经成功接收所有数据。<br>*<strong>RST：复位标志</strong><br>复位标志有效。用于复位相应的TCP连接。<br>*<strong>URG：紧急标志</strong><br>紧急(The urgent pointer) 标志有效。紧急标志置位，<br>*<strong>PSH：推标志</strong><br>该标志置位时，接收端不将该数据进行队列处理，而是尽可能快将数据转由应用处理。在处理 telnet 或 rlogin 等交互模式的连接时，该标志总是置位的。<br>*<strong>FIN：结束标志</strong><br>带有该标志置位的数据包用来结束一个TCP回话，但对应端口仍处于开放状态，准备接收后续数据。<br>TCP的几个状态对于我们分析所起的作用。在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.其中，对于我们日常的分析有用的就是前面的五个字段。它们的含义是：SYN表示建立连接，FIN表示关闭连接，ACK表示响应，PSH表示有 DATA数据传输，RST表示连接重置。<br>其中，ACK是可能与SYN，FIN等同时使用的，比如SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，如果只是单个的一个SYN，它表示的只是建立连接。<br>TCP的几次握手就是通过这样的ACK表现出来的。但SYN与FIN是不会同时为1的，因为前者表示的是建立连接，而后者表示的是断开连接。<br>RST一般是在FIN之后才会出现为1的情况，表示的是连接重置。一般地，当出现FIN包或RST包时，我们便认为客户端与服务器端断开了连接；<br>而当出现SYN和SYN＋ACK包时，我们认为客户端与服务器建立了一个连接。<br>PSH为1的情况，一般只出现在DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。TCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。</p>
]]></content>
      <categories>
        <category>system</category>
      </categories>
      <tags>
        <tag>system</tag>
      </tags>
  </entry>
  <entry>
    <title>win7系统下Update更新出现错误代码80073712的解决方法</title>
    <url>/2023/12/18/win7%E7%B3%BB%E7%BB%9F%E4%B8%8BUpdate%E6%9B%B4%E6%96%B0%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF%E4%BB%A3%E7%A0%8180073712%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>随着电脑的使用率越来越高，我们有时候可能会遇到win7系统Windows Update更新出现80073712错误的问题，如果我们遇到了win7系统Windows Update更新出现80073712错误的问题，要怎么处理win7系统Windows Update更新出现80073712错误呢？</p>
</blockquote>
<span id="more"></span>
<h5 id="1-确认一下更新服务是否正常"><a href="#1-确认一下更新服务是否正常" class="headerlink" title="1 .确认一下更新服务是否正常"></a>1 .确认一下更新服务是否正常</h5><p>首先在键盘上按“Win+R”输入打开“运行”窗口，输入“services.msc”命令回车打开服务窗口;  </p>
<h5 id="2-然后分别检查Background-Intelligent-Transfer-Service服务、Cryptographic服务、Software-Protection服务、Windows-Update服务"><a href="#2-然后分别检查Background-Intelligent-Transfer-Service服务、Cryptographic服务、Software-Protection服务、Windows-Update服务" class="headerlink" title="2 .然后分别检查Background Intelligent Transfer Service服务、Cryptographic服务、Software Protection服务、Windows Update服务"></a>2 .然后分别检查Background Intelligent Transfer Service服务、Cryptographic服务、Software Protection服务、Windows Update服务</h5><p>确保对应的“状态”栏是否都处于“已启动”，如果发现以上某服务被“禁用”，将其设置为启动，具体操作为：鼠标右击服务选择“启动”即可。然后尝试是否能正常更新。</p>
<h5 id="3-如果还不行的话，就对SoftwareDistribution文件夹进行重命名"><a href="#3-如果还不行的话，就对SoftwareDistribution文件夹进行重命名" class="headerlink" title="3. 如果还不行的话，就对SoftwareDistribution文件夹进行重命名"></a>3. 如果还不行的话，就对SoftwareDistribution文件夹进行重命名</h5><p>首先在服务中禁用Windows Update服务后，打开C:&#x2F;Windows目录，在SoftwareDistribution上右键选择重命名，重命名完成后重新启用Windows Update服务，然后尝试是否能正常更新。</p>
<h5 id="4-还不行的话就对组件进行修复。"><a href="#4-还不行的话就对组件进行修复。" class="headerlink" title="4. 还不行的话就对组件进行修复。"></a>4. 还不行的话就对组件进行修复。</h5><ul>
<li>首先按“Win+R”输入打开“运行”窗口，输入“cmd”命令后按回车，打开命令提示符;</li>
<li>然后输入以下指令即可。<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">dism/Online <span class="string">/Cleanup-Image</span> <span class="string">/CheckHealth</span></span><br><span class="line">dism/Online <span class="string">/Cleanup-Image</span> <span class="string">/RestoreHealth</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>windows 排查挂马流程</title>
    <url>/2023/12/29/windows%20%E6%8E%92%E6%9F%A5%E6%8C%82%E9%A9%AC%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>攻击者入侵windows系统往往从弱口令、系统漏洞以及服务漏洞进行切入，获得一个普通的系统权限，再经过提权后进行创建启动项、修改注册表、植入病毒和木马等一系列操作，从而维持对目标主机的控制权。而与此同时操作系统也会出现异常，包括账户、端口、进程、网络、启动、服务、任务以及文件等，系统运维人员可以根据以上异常情况来知道攻击者从何处入侵、攻击者以何种方式入侵以及攻击者在入侵后做了什么这几个问题的答案，从而为之后的系统加固、安全防护提供针对性建议。<br>暴力破解：针对系统有包括rdp、ssh、telnet等，针对服务有包括mysql、ftp等，一般可以通过超级弱口令工具、hydra进行爆破<br>漏洞利用：通过系统、服务的漏洞进行攻击，如永恒之蓝、Redis未授权访问等<br>流量攻击：主要是对目标机器进行dos攻击，从而导致服务器瘫痪<br>木马控制：主要分为webshell和PC木马，webshell是存在于网站应用中，而PC木马是进入系统进行植入。目的都是对操作系统进行持久控制<br>病毒感染：主要分挖矿病毒、蠕虫病毒、勒索病毒等，植入病毒后往往会影响受感染电脑的正常运作，或是被控制而不自知，电脑正常运作仅盗窃资料、或者被利用做其他用途等用户非自发引导的行为</p>
</blockquote>
<span id="more"></span>

<h5 id="入侵排查方法"><a href="#入侵排查方法" class="headerlink" title="入侵排查方法"></a>入侵排查方法</h5><h6 id="一、检查系统账号安全"><a href="#一、检查系统账号安全" class="headerlink" title="一、检查系统账号安全"></a>一、检查系统账号安全</h6><ul>
<li>排查可疑账号、新增账号<br>检查方法：<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、打开<span class="keyword">cmd</span><span class="language-bash">窗口，输入 lusrmgr.msc</span></span><br><span class="line"><span class="number">2</span>、查看是否存在可疑账号，特别是管理员群组（Administrators）中的新增账号，如果存在需要立即删除或禁用</span><br></pre></td></tr></table></figure></li>
<li>排查隐藏账号<br>检查方法1<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">打开注册表，查看管理员对应键值</span><br><span class="line"><span class="number">1</span>、在桌面打开运行（可使用快捷键 win+R），输入 regedit，打开注册表编辑器</span><br><span class="line"><span class="number">2</span>、选择 HKEY_LOCAL_MACHINE<span class="regexp">/SAM/</span>SAM，默认无法查看该选项内容，右键菜单选择权限，打开权限管理窗口</span><br><span class="line"><span class="number">3</span>、选择当前用户（一般为 administrator），将权限勾选为完全控制，然后确定并关闭注册表编辑器</span><br><span class="line"><span class="number">4</span>、再次打开注册表编辑器，即可选择 HKEY_LOCAL_MACHINE<span class="regexp">/SAM/</span>SAM<span class="regexp">/Domains/</span>Account/Users</span><br><span class="line"><span class="number">5</span>、在 Names 项下可以看到实例所有用户名，如出现本地账户中没有的账户，即为隐藏账户，在确认为非系统用户的前提下，可删除此用户</span><br></pre></td></tr></table></figure>
检查方法2<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">通过<span class="built_in">D</span>盾<span class="variable">web</span>查杀工具进行检测，其中集成了对克隆账号、隐藏账号检测的功能</span><br></pre></td></tr></table></figure>
结合日志排查用户是否出现异常<br>检查方法1<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、在桌面打开运行（可使用快捷键 win+<span class="built_in">R</span>），输入 eventvwr.msc 命令</span><br><span class="line"><span class="number">2</span>、打开时间查看器，分析用户登录日志</span><br></pre></td></tr></table></figure>
检查方法2：<figure class="highlight"><table><tr><td class="code"><pre><span class="line">通过LogFusion查看日志记录</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="二、检查异常端口、进程"><a href="#二、检查异常端口、进程" class="headerlink" title="二、检查异常端口、进程"></a>二、检查异常端口、进程</h5><blockquote>
<p>端口作为计算机内部与外部数据交互的窗口，在攻击者眼里也是作为<br>香饽饽的存在，在入侵系统后，攻击者可以在计算机上开启专属的端口来访问被害主机或植入病毒用于挖矿等，熟悉计算机的朋友应该都知道常用的端口也就那么几个，所以通过排查可疑端口能确定主机是否存在后门、是否被植入挖矿病毒等，再根据端口的PID对可疑进程对应的程序排查，确定是否为恶意程序<br>排查可疑端口<br>检查方法1：</p>
</blockquote>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">1、使用netstat命令查看当前网络连接，定位可疑的ESTABLISHED连接</span><br><span class="line">netstat -<span class="keyword">ano</span></span><br><span class="line">2、根据PID编号通过tasklist对进程进行定位</span><br><span class="line">tasklist ｜ findstr <span class="string">&quot;PID&quot;</span></span><br></pre></td></tr></table></figure>
<p>检查方法2:</p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">通过<span class="built_in">D</span>盾<span class="variable">web</span>查杀工具进行端口查看</span><br></pre></td></tr></table></figure>
<p>排查可疑进程<br>检查方法1：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、在桌面打开运行（可使用快捷键 win+<span class="built_in">R</span>），输入 msinfo32 命令</span><br><span class="line"><span class="number">2</span>、依次点击 “软件环境 – 正在运行任务” 就可以查看到进程的详细信息，比如进程路径、进程ID、文件创建日期以及启动时间等。</span><br></pre></td></tr></table></figure>
<p>检查方法2：</p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">打开<span class="built_in">D</span>盾<span class="type">_web</span>查杀工具的进程查看，关注没有签名信息的进程</span><br></pre></td></tr></table></figure>
<p>检查方法3：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">通过微软官方提供的 <span class="built_in">Process</span> Explorer 等工具进行排查</span><br></pre></td></tr></table></figure>
<p>在查看可疑的进程及其子进程。可以重点观察以下内容：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、没有签名验证信息的进程</span><br><span class="line"><span class="number">2</span>、没有描述信息的进程</span><br><span class="line"><span class="number">3</span>、进程的属主</span><br><span class="line"><span class="number">4</span>、进程的路径是否合法</span><br><span class="line"><span class="number">5</span>、<span class="meta">CPU</span> 或内存资源占用长时间过高的进程</span><br></pre></td></tr></table></figure>
<h5 id="三、检查启动项、计划任务和服务"><a href="#三、检查启动项、计划任务和服务" class="headerlink" title="三、检查启动项、计划任务和服务"></a>三、检查启动项、计划任务和服务</h5><blockquote>
<p>启动项、计划任务、服务是攻击者维持权限的惯用手段。在入侵windows计算机后，攻击者可以通过修改注册表、替换粘滞键程序在系统启动时就获得权限，也能够在管理员权限下设置计划任务，因为计划任务后门分为管理员权限和普通用户权限两种。管理员权限可以设置更多的计划任务，例如重启后运行等。也可以通过meterpreter创建后门服务。<br>排查异常启动项<br>检查方法1</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">单击【开始】&gt;【所有程序】&gt;【启动】，默认情况下此目录在是一个空目录，确认是否有非业务程序在该目录下。</span><br></pre></td></tr></table></figure>
<p>检查方法2：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">在桌面打开运行（可使用快捷键 win+<span class="built_in">R</span>），输入 msconfig，查看是否存在命名异常的启动项目，是则取消勾选命名异常的启动项目，并到命令中显示的路径删除文件。</span><br></pre></td></tr></table></figure>
<p>检查方法3:</p>
<figure class="highlight moonscript"><table><tr><td class="code"><pre><span class="line">在桌面打开运行（可使用快捷键 win+R），输入 regedit，打开注册表，查看开机启动项是否正常，特别注意如下三个注册表项：</span><br><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\runHKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunHKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Runonce</span><br></pre></td></tr></table></figure>
<p>检查右侧是否有启动异常的项目，如有请删除，并建议安装杀毒软件进行病毒查杀，清除残留病毒或木马</p>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>两台主机通过rsync同步数据</title>
    <url>/2025/08/29/%E4%B8%A4%E5%8F%B0%E4%B8%BB%E6%9C%BA%E9%80%9A%E8%BF%87rsync%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<blockquote>
<p>rsync 是一种高效的文件同步工具，能够通过网络在两台服务器之间进行增量数据同步</p>
</blockquote>
<span id="more"></span>
<ul>
<li>SSH 模式（推荐新手）：A 和 B 都安装 rsync 工具（无需启动服务），通过 SSH 通信。</li>
<li>daemon 模式（适合大规模部署）：仅 B 安装并启动 rsync 服务，A 作为客户端安装 rsync 工具即可。</li>
</ul>
<h3 id="daemon-模式"><a href="#daemon-模式" class="headerlink" title="daemon 模式"></a>daemon 模式</h3><blockquote>
<p>A,B两台服务器同步数据，其中A作为服务端，B拉取A上数据</p>
</blockquote>
<h4 id="源服务器-A-配置-rsync-服务"><a href="#源服务器-A-配置-rsync-服务" class="headerlink" title="源服务器 A 配置 rsync 服务"></a>源服务器 A 配置 rsync 服务</h4><h5 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h5><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">uid = root</span><br><span class="line">gid = root</span><br><span class="line">use chroot = no</span><br><span class="line">max connections = <span class="number">5</span></span><br><span class="line">pid <span class="built_in">file</span> = /var/<span class="built_in">run</span>/rsyncd.pid</span><br><span class="line"><span class="built_in">log</span> <span class="built_in">file</span> = /var/<span class="built_in">log</span>/rsyncd.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模块配置（A 上需要被 B 拉取的目录）</span></span><br><span class="line">[aaa]               <span class="comment"># 模块名（B 拉取时需要指定）</span></span><br><span class="line">path = /home/     <span class="comment"># A 上的源数据目录</span></span><br><span class="line">comment = Data <span class="keyword">to</span> be pulled <span class="keyword">by</span> B</span><br><span class="line"><span class="built_in">read</span> only = yes             <span class="comment"># 只读（防止 B 意外修改 A 的数据）</span></span><br><span class="line"><span class="built_in">list</span> = yes</span><br><span class="line">auth users = testtest     <span class="comment"># 允许 B 访问的用户</span></span><br><span class="line">secrets <span class="built_in">file</span> = /etc/rsyncd.passwd  <span class="comment"># A 上的密码文件</span></span><br><span class="line">hosts allow = <span class="number">211.149</span><span class="number">.227</span><span class="number">.160</span>          <span class="comment"># 仅允许 B 的 IP 访问</span></span><br></pre></td></tr></table></figure>

<h5 id="创建密码文件"><a href="#创建密码文件" class="headerlink" title="创建密码文件"></a>创建密码文件</h5><p>在 A 上设置授权用户和密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;rsync_user:your_password&quot;</span> &gt; /etc/rsyncd.passwd</span><br><span class="line"><span class="built_in">chmod</span> 600 /etc/rsyncd.passwd  <span class="comment"># 必须设置 600 权限</span></span><br></pre></td></tr></table></figure>
<h5 id="启动-rsync-服务"><a href="#启动-rsync-服务" class="headerlink" title="启动 rsync 服务"></a>启动 rsync 服务</h5><figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line"><span class="params">system</span>ctl start rsyncd</span><br><span class="line"><span class="params">system</span>ctl enable rsyncd</span><br><span class="line"><span class="comment"># 开放 873 端口（防火墙配置同前）</span></span><br></pre></td></tr></table></figure>
<h5 id="防火墙配置（如果启用）"><a href="#防火墙配置（如果启用）" class="headerlink" title="防火墙配置（如果启用）"></a>防火墙配置（如果启用）</h5><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CentOS/RHEL</span></span><br><span class="line">firewall-cmd <span class="params">--add-port=873/tcp</span> <span class="params">--permanent</span></span><br><span class="line">firewall-cmd <span class="params">--reload</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu/Debian</span></span><br><span class="line">ufw allow 873/tcp</span><br><span class="line">ufw <span class="keyword">reload</span></span><br></pre></td></tr></table></figure>
<h4 id="目标服务器-B-配置（客户端，主动拉取）"><a href="#目标服务器-B-配置（客户端，主动拉取）" class="headerlink" title="目标服务器 B 配置（客户端，主动拉取）"></a>目标服务器 B 配置（客户端，主动拉取）</h4><h5 id="安装-rsync-工具（无需启动服务"><a href="#安装-rsync-工具（无需启动服务" class="headerlink" title="安装 rsync 工具（无需启动服务)"></a>安装 rsync 工具（无需启动服务)</h5><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CentOS/RHEL</span></span><br><span class="line">yum <span class="keyword">install</span> rsync -y</span><br><span class="line"><span class="comment"># Ubuntu/Debian</span></span><br><span class="line">apt-get <span class="keyword">install</span> rsync -y</span><br></pre></td></tr></table></figure>
<h5 id="创建密码文件（仅包含密码，与-A-一致）"><a href="#创建密码文件（仅包含密码，与-A-一致）" class="headerlink" title="创建密码文件（仅包含密码，与 A 一致）"></a>创建密码文件（仅包含密码，与 A 一致）</h5><p>echo “your_password” &gt; &#x2F;etc&#x2F;rsync_client.pass<br>chmod 600 &#x2F;etc&#x2F;rsync_client.pass</p>
<h5 id="测试拉取命令"><a href="#测试拉取命令" class="headerlink" title="测试拉取命令"></a>测试拉取命令</h5><p>rsync -avz –password-file&#x3D;&#x2F;etc&#x2F;rsync_client.pass rsync_user@A_IP::source_data &#x2F;B的目标目录&#x2F;</p>
<ul>
<li>source_data 是 A 上配置的模块名</li>
<li>&#x2F;B的目标目录&#x2F; 是 B 上存储拉取数据的路径</li>
</ul>
<h5 id="自动化拉取（B-定时任务）"><a href="#自动化拉取（B-定时任务）" class="headerlink" title="自动化拉取（B 定时任务）"></a>自动化拉取（B 定时任务）</h5><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br><span class="line"><span class="meta"># 添加任务（每天凌晨 4 点从 A 拉取数据）</span></span><br><span class="line"><span class="number">0</span> <span class="number">4</span> * * * rsync -avz --<span class="attr">password-file</span><span class="operator">=</span><span class="keyword">/etc/</span>rsync_client.pass rsync_user@A_IP::source_data /B的目标目录/ &gt;&gt; <span class="keyword">/var/</span>log/rsync_pull.log <span class="number">2</span>&gt;<span class="variable">&amp;1</span></span><br></pre></td></tr></table></figure>
<hr>
<p>如果B作为rsync服务器，A同步数据到B，服务安装到B上，安装方式和之前一样<br>从服务器 A 同步数据到服务器 B，命令格式：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">rsync -avz --password-<span class="keyword">file</span>=<span class="regexp">/etc/</span>rsync_client.pass <span class="regexp">/本地需要同步的目录/</span> rsync_user@B_IP::sync_data</span><br><span class="line"># 同步 <span class="regexp">/data/</span><span class="keyword">source</span> 目录到服务器 B 的 sync_data 模块（对应 <span class="regexp">/data/</span>to/sync 目录）</span><br><span class="line">rsync -avz --password-<span class="keyword">file</span>=<span class="regexp">/etc/</span>rsync_client.pass <span class="regexp">/data/</span><span class="keyword">source</span>/ rsync_user@<span class="number">192.168</span>.<span class="number">1.100</span>::sync_data</span><br></pre></td></tr></table></figure>
<ul>
<li>–password-file：指定密码文件，避免手动输入密码</li>
<li>B_IP::sync_data：sync_data 是服务器 B 配置文件中定义的模块名</li>
</ul>
<h3 id="SSH-模式"><a href="#SSH-模式" class="headerlink" title="SSH 模式"></a>SSH 模式</h3><blockquote>
<p>两台服务器（源服务器 A 和目标服务器 B）需安装 rsync<br>确保服务器之间网络互通（默认使用 SSH 端口 22）<br>推荐使用 SSH 密钥认证实现免密登录（提高安全性和自动化能力）</p>
</blockquote>
<h5 id="安装-rsync"><a href="#安装-rsync" class="headerlink" title="安装 rsync"></a>安装 rsync</h5><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CentOS/RHEL 系统</span></span><br><span class="line">yum <span class="keyword">install</span> rsync -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu/Debian 系统</span></span><br><span class="line">apt-get <span class="keyword">install</span> rsync -y</span><br></pre></td></tr></table></figure>
<h5 id="配置-SSH-免密登录（推荐）"><a href="#配置-SSH-免密登录（推荐）" class="headerlink" title="配置 SSH 免密登录（推荐）"></a>配置 SSH 免密登录（推荐）</h5><p>在源服务器 A 生成密钥对：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -P <span class="string">&quot;&quot;</span>  <span class="meta"># 一路回车，生成无密码密钥对</span></span><br></pre></td></tr></table></figure>
<p>将公钥复制到目标服务器 B</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">ssh<span class="operator">-</span><span class="keyword">copy</span><span class="operator">-</span>id <span class="keyword">user</span><span class="variable">@B_IP</span>  # <span class="keyword">user</span> 是服务器 B 的用户名，B_IP 是服务器 B 的 IP 地址</span><br></pre></td></tr></table></figure>
<p>验证免密登录</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssh</span> user<span class="variable">@B_IP</span>  <span class="comment"># 无需输入密码即可登录则配置成功</span></span><br></pre></td></tr></table></figure>
<h5 id="rsync-同步命令及常用场景"><a href="#rsync-同步命令及常用场景" class="headerlink" title="rsync 同步命令及常用场景"></a>rsync 同步命令及常用场景</h5><p>基础同步命令格式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">rsync <span class="selector-attr">[选项]</span> 源路径 目标路径</span><br></pre></td></tr></table></figure>
<h5 id="常用场景示例"><a href="#常用场景示例" class="headerlink" title="常用场景示例"></a>常用场景示例</h5><p>从本地（A）同步到远程（B）</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 同步单个文件</span></span><br><span class="line">rsync -avz /local/path/file.txt user<span class="variable">@B_IP</span><span class="symbol">:/remote/path/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同步目录（注意源目录后是否带 / 的区别）</span></span><br><span class="line">rsync -avz /local/dir/ user<span class="variable">@B_IP</span><span class="symbol">:/remote/dir/</span>  <span class="comment"># 同步目录内内容（不含目录本身）</span></span><br><span class="line">rsync -avz /local/dir user<span class="variable">@B_IP</span><span class="symbol">:/remote/</span>       <span class="comment"># 同步目录本身及内容</span></span><br></pre></td></tr></table></figure>
<h5 id="从远程（B）同步到本地（A）"><a href="#从远程（B）同步到本地（A）" class="headerlink" title="从远程（B）同步到本地（A）"></a>从远程（B）同步到本地（A）</h5><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">rsync -avz user<span class="variable">@B_IP</span><span class="symbol">:/remote/path/</span> /local/path/</span><br></pre></td></tr></table></figure>
<h5 id="常用选项说明"><a href="#常用选项说明" class="headerlink" title="常用选项说明"></a>常用选项说明</h5><p>-a：归档模式（递归同步并保留几乎所有文件属性）<br>-v：显示详细同步过程<br>-z：传输时压缩数据（节省带宽）<br>-delete：删除目标端存在但源端不存在的文件（保持完全一致）<br>-P：断点续传（显示进度并保留部分传输的文件）</p>
<h5 id="自动化同步配置（定时任务）"><a href="#自动化同步配置（定时任务）" class="headerlink" title="自动化同步配置（定时任务）"></a>自动化同步配置（定时任务）</h5><p>如果需要定期自动同步，可通过 crontab 设置定时任务</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br><span class="line"><span class="comment"># 每天凌晨 2 点同步本地目录到远程服务器</span></span><br><span class="line"><span class="number">0</span> <span class="number">2</span> * * * rsync -avz --delete /local/dir/ user<span class="variable">@B_IP</span><span class="symbol">:/remote/dir/</span> &gt;&gt; <span class="regexp">/var/log</span><span class="regexp">/rsync.log 2&gt;&amp;1</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>多线程，多进程，携程，异步</title>
    <url>/2023/12/18/%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%8C%E5%A4%9A%E8%BF%9B%E7%A8%8B%EF%BC%8C%E6%90%BA%E7%A8%8B%EF%BC%8C%E5%BC%82%E6%AD%A5/</url>
    <content><![CDATA[<h4 id="multiprocessing-多进程"><a href="#multiprocessing-多进程" class="headerlink" title="multiprocessing 多进程"></a>multiprocessing 多进程</h4><blockquote>
<p>multiprocessing是一个用于产生多进程的包，与threading模块的API类似。multiprocessing既可以实现本地的多进程，也可以实现远程的多进程。通过使用多个子进程而非线程可以绕开Python的全局解释器锁(GIL)，同时允许在多种系统平台使用</p>
</blockquote>
<span id="more"></span>
<h5 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line">import multiprocessing as mp</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">def <span class="built_in">info</span>(title):</span><br><span class="line">    <span class="built_in">print</span>(title)</span><br><span class="line">    <span class="built_in">print</span>(f<span class="string">&#x27;父进程:&#123;os.getppid()&#125;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(f<span class="string">&#x27;进程:&#123;os.getpid()&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">def func(name):</span><br><span class="line">    <span class="built_in">info</span>(<span class="string">&#x27;function func&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="attribute">__name__</span>==&#x27;__main__&#x27;:</span><br><span class="line">    <span class="built_in">info</span>(<span class="string">&#x27;main line&#x27;</span>)</span><br><span class="line">    <span class="attribute">p</span>=mp.Process(target=func,args=(&#x27;gdd&#x27;,))</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在Python中，进程是通过multiprocessing多进程模块来创建的，multiprocessing模块提供了⼀个Process类来创建进程对象。Process类可以单独调用，也可以继承使用。主要操作如下：  </p>
<ol>
<li>Process.start() 启动子进程</li>
<li>Process.join() 等待子进程结束(阻塞等待)</li>
<li>Process.is_alive() 判断子进程是否在运行(运行中返回True)</li>
<li>Process.close() 结束子进程(不推荐使用，会抛出异常)<br>根据不同的平台， multiprocessing支持三种启动进程的方法。这些启动方法有:  </li>
<li>spawn:父进程会启动一个全新的Python解释器进程。子进程将只继承那些运行进程对象的run()方法所必需的资源。 特别地，来自父进程的非必需文件描述符和句柄将不会被继承。 使用此方法启动进程相比使用fork或 forkserver要慢上许多。可在Unix和Windows上使用。 Windows上的默认设置</li>
<li>fork:父进程使用os.fork()来产生Python解释器分叉。子进程在开始时实际上与父进程相同。父进程的所有资源都由子进程继承。请注意，安全分叉多线程进程是棘手的。只存在于Unix。Unix中的默认值</li>
<li>forkserver:程序启动并选择forkserver启动方法时，将启动服务器进程。从那时起，每当需要一个新进程时，父进程就会连接到服务器并请求它分叉一个新进程。分叉服务器进程是单线程的，因此使用os.fork()是安全的。没有不必要的资源被继承。可在Unix平台上使用，支持通过Unix管道传递文件描述符<br>要选择一个启动方法，你应该在主模块的if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘子句中调用 set_start_method()。  <figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    multiprocessing<span class="selector-class">.set_start_method</span>(<span class="string">&#x27;spawn&#x27;</span>)</span><br><span class="line">    <span class="built_in">info</span>(<span class="string">&#x27;main line&#x27;</span>)</span><br><span class="line">    <span class="selector-tag">p</span> = <span class="built_in">Process</span>(target=func, args=(<span class="string">&#x27;gdd&#x27;</span>,))</span><br><span class="line">    <span class="selector-tag">p</span><span class="selector-class">.start</span>()</span><br><span class="line">    <span class="selector-tag">p</span><span class="selector-class">.join</span>()</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="POOL"><a href="#POOL" class="headerlink" title="POOL"></a>POOL</h5><blockquote>
<p>当需要创建的⼦进程数量不多时， 可以直接利⽤multiprocessing.Process动态生成多个进程， 但如果要创建很多进程时，⼿动创建的话⼯作量会非常大，此时就可以⽤到multiprocessing模块提供的Pool去创建一个进程池。当需要创建的⼦进程数量不多时， 可以直接利⽤multiprocessing.Process动态生成多个进程， 但如果要创建很多进程时，⼿动创建的话⼯作量会非常大，此时就可以⽤到multiprocessing模块提供的Pool去创建一个进程池。使用进程池的好处就是可以，创建有限的进程来自动并行处理大量的任务。Pool类的主要方法:</p>
</blockquote>
<ol>
<li>Pool.apply()启动任务(阻塞等待任务完成)</li>
<li>Pool.map()批量启动任务(阻塞等待所有任务完成)</li>
<li>Pool.apply_async()启动任务(非阻塞)</li>
<li>Pool.map_async()批量启动任务(非阻塞)</li>
</ol>
<h5 id="QUEUE"><a href="#QUEUE" class="headerlink" title="QUEUE"></a>QUEUE</h5><blockquote>
<p>Queue创建共享的进程队列，是多进程安全的队列，可以使用Queue实现多进程之间的数据传递。通常在生产者消费者模式中经常使用，一个进程向队列中写数据，另一个进程从队列中取数据。无论主进程或子进程，都能访问到队列，放进去的对象都经过了深拷贝</p>
</blockquote>
<p>Queue([maxsize]:返回一个使用一个管道和少量锁和信号量实现的共享队列实例。当一个进程将一个对象放进队列中时，一个写入线程会启动并将对象从缓冲区写入管道中。Queue模块的方法有：  </p>
<ol>
<li>qsize()：返回当前队列包含的消息数量；</li>
<li>empty()：如果队列为空，返回True，反之False ；</li>
<li>full()：如果队列满了，返回True,反之False；</li>
<li>get():获取队列中的一条消息，然后将其从列队中移除，可传参超时时长；</li>
<li>get_nowait()：相当Queue.get(False),取不到值时触发异常：Empty；</li>
<li>put():将一个值添加进数列，可传参超时时长；</li>
<li>put_nowait():相当于Queue.get(False),当队列满了时报错：Full；</li>
</ol>
<h5 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h5><h6 id="进程锁"><a href="#进程锁" class="headerlink" title="进程锁"></a>进程锁</h6><blockquote>
<p>进程锁和线程锁的用法基本一致。进程锁的诞生是为了避免多进程之间抢占共享数据，进而造成多进程之间混乱修改共享内存的局面</p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 Linux/Unix/Windows 中发现隐藏的进程和端口</title>
    <url>/2023/12/15/%E5%A6%82%E4%BD%95%E5%9C%A8%20LinuxUnixWindows%20%E4%B8%AD%E5%8F%91%E7%8E%B0%E9%9A%90%E8%97%8F%E7%9A%84%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%AB%AF%E5%8F%A3/</url>
    <content><![CDATA[<h4 id="如何在-Linux-Unix-Windows-中发现隐藏的进程和端口"><a href="#如何在-Linux-Unix-Windows-中发现隐藏的进程和端口" class="headerlink" title="如何在 Linux&#x2F;Unix&#x2F;Windows 中发现隐藏的进程和端口"></a>如何在 Linux&#x2F;Unix&#x2F;Windows 中发现隐藏的进程和端口</h4><span id="more"></span>
<blockquote>
<p>unhide 是一个小巧的网络取证工具，能够发现那些借助 rootkit、LKM 及其它技术隐藏的进程和 TCP&#x2F;UDP 端口。这个工具在 Linux、UNIX 类、MS-Windows 等操作系统下都可以工作。<br>根据其 man 页面的说明：</p>
<blockquote>
<p>Unhide 通过下述三项技术来发现隐藏的进程。<br>进程相关的技术，包括将 &#x2F;proc 目录与 &#x2F;bin&#x2F;ps[1] 命令的输出进行比较。<br>系统相关的技术，包括将 &#x2F;bin&#x2F;ps[2] 命令的输出结果同从系统调用方面得到的信息进行比较。<br>穷举法相关的技术，包括对所有的进程 ID 进行暴力求解，该技术仅限于在基于 Linux2.6 内核的系统中使用。</p>
</blockquote>
</blockquote>
<h5 id="如何安装-unhide"><a href="#如何安装-unhide" class="headerlink" title="如何安装 unhide"></a>如何安装 unhide</h5><p>首先建议你在只读介质上运行这个工具。如果使用的是 Ubuntu 或者 Debian 发行版，输入下述的 apt-get 命令以安装 Unhide<br><code>$ sudo apt-get install unhide</code><br>一切顺利的话你的命令行会输出以下内容  </p>
<figure class="highlight plaintext"><figcaption><span>password for vivek:</span></figcaption><table><tr><td class="code"><pre><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">Suggested packages:</span><br><span class="line">  rkhunter</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  unhide</span><br><span class="line">0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.</span><br><span class="line">Need to get 46.6 kB of archives.</span><br><span class="line">After this operation, 136 kB of additional disk space will be used.</span><br><span class="line">Get:1 http://in.archive.ubuntu.com/ubuntu artful/universe amd64 unhide amd64 20130526-1 [46.6 kB]</span><br><span class="line">Fetched 46.6 kB in 0s (49.0 kB/s)</span><br><span class="line">Selecting previously unselected package unhide.</span><br><span class="line">(Reading database ... 205367 files and directories currently installed.)</span><br><span class="line">Preparing to unpack .../unhide_20130526-1_amd64.deb ...</span><br><span class="line">Unpacking unhide (20130526-1) ...</span><br><span class="line">Setting up unhide (20130526-1) ...</span><br><span class="line">Processing triggers for man-db (2.7.6.1-2) ...</span><br></pre></td></tr></table></figure>
<h5 id="如何在-RHEL-CentOS-Oracle-Scientific-Fedora-上安装-unhide"><a href="#如何在-RHEL-CentOS-Oracle-Scientific-Fedora-上安装-unhide" class="headerlink" title="如何在 RHEL&#x2F;CentOS&#x2F;Oracle&#x2F;Scientific&#x2F;Fedora 上安装 unhide"></a>如何在 RHEL&#x2F;CentOS&#x2F;Oracle&#x2F;Scientific&#x2F;Fedora 上安装 unhide</h5><p>入以下的 yum 命令（CentOS&#x2F;RHEL 6.x 或 7.x 上首先打开 EPEL 仓库）：<br><code>sudo yum install unhide</code><br>在 Fedora 上则使用以下 dnf 命令：<br><code>sudo dnf install unhide</code></p>
<h5 id="如何使用-unhide-工具？"><a href="#如何使用-unhide-工具？" class="headerlink" title="如何使用 unhide 工具？"></a>如何使用 unhide 工具？</h5><p>unhide 的语法是：<br><code>unhide [options] test_list</code><br>test_list 参数可以是以下测试列表中的一个或者多个标准测试：<br>brute<br>proc<br>procall<br>procfs<br>quick<br>reverse<br>sys<br>或基本测试：<br>checkbrute<br>checkchdir<br>checkgetaffinity<br>checkgetparam<br>checkgetpgid<br>checkgetprio<br>checkRRgetinterval<br>checkgetsched<br>checkgetsid<br>checkkill<br>checknoprocps<br>checkopendir<br>checkproc<br>checkquick<br>checkreaddir<br>checkreverse<br>checksysinfo<br>checksysinfo2<br>checksysinfo3<br>你可以通过以下示例命令使用 unhide：  </p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># unhide proc</span></span><br><span class="line"><span class="meta"># unhide sys</span></span><br><span class="line"><span class="meta"># unhide quick</span></span><br></pre></td></tr></table></figure>
<p>示例输出：  </p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">Unhide <span class="number">20130526</span></span><br><span class="line">Copyright © <span class="number">2013</span> Yago Jesus &amp; Patrick Gouin</span><br><span class="line">License GPLv3+ : GNU GPL <span class="keyword">version</span> <span class="number">3</span> <span class="built_in">or</span> <span class="keyword">later</span></span><br><span class="line">http://www.<span class="keyword">unhide</span>-forensics.info</span><br><span class="line">NOTE : This <span class="keyword">version</span> of <span class="keyword">unhide</span> <span class="keyword">is</span> <span class="keyword">for</span> systems using Linux &gt;= <span class="number">2.6</span> </span><br><span class="line">Used <span class="keyword">options</span>: </span><br><span class="line">[*]Searching <span class="keyword">for</span> Hidden processes through  comparison of results of <span class="built_in">system</span> calls, proc, dir <span class="built_in">and</span> <span class="keyword">ps</span></span><br></pre></td></tr></table></figure>
<h5 id="如何使用-unhide-tcp-工具辨明-TCP-UDP-端口的身份"><a href="#如何使用-unhide-tcp-工具辨明-TCP-UDP-端口的身份" class="headerlink" title="如何使用 unhide-tcp 工具辨明 TCP&#x2F;UDP 端口的身份"></a>如何使用 unhide-tcp 工具辨明 TCP&#x2F;UDP 端口的身份</h5><p>以下是来自 man 页面的介绍  </p>
<blockquote>
<p>unhide-tcp 取证工具通过对所有可用的 TCP&#x2F;IP 端口进行暴力求解的方式，辨别所有正在监听，却没有列入 &#x2F;bin&#x2F;netstat[9] 或者 &#x2F;bin&#x2F;ss[10] 命令输出的 TCP&#x2F;IP 端口身份。<br>注一：对于 FreeBSD、OpenBSD系统，一般使用 netstat 命令取代在这些操作系统上不存在的 iproute2，此外，sockstat 命令也用于替代 fuser。<br>注二：如果操作系统不支持 iproute2 命令，在使用 unhide 时需要在命令上加上 -n 或者 -s 选项。</p>
</blockquote>
<p><code>unhide-tcp</code><br>示例输出：  </p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">Unhide <span class="number">20100201</span></span><br><span class="line"><span class="symbol">http:</span><span class="comment">//www.security-projects.com/?Unhide</span></span><br><span class="line">Starting TCP checking</span><br><span class="line">Starting UDP checking</span><br></pre></td></tr></table></figure>
<p>上述操作中，没有发现隐藏的端口。<br>但在下述示例中，我展示了一些有趣的事。  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">unhide-tcp</span></span><br><span class="line"><span class="string">示例输出：</span></span><br><span class="line"><span class="string">Unhide</span> <span class="number">20100201</span></span><br><span class="line"><span class="string">http://www.security-projects.com/?Unhide</span></span><br><span class="line"><span class="string">Starting</span> <span class="string">TCP</span> <span class="string">checking</span></span><br><span class="line"><span class="attr">Found Hidden port that not appears in netstat:</span> <span class="number">1048</span></span><br><span class="line"><span class="attr">Found Hidden port that not appears in netstat:</span> <span class="number">1049</span></span><br><span class="line"><span class="attr">Found Hidden port that not appears in netstat:</span> <span class="number">1050</span></span><br><span class="line"><span class="string">Starting</span> <span class="string">UDP</span> <span class="string">checking</span></span><br></pre></td></tr></table></figure>
<p>可以看到 netstat -tulpn 和 ss 命令确实没有反映出这三个隐藏的端口：  </p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># netstat -tulpn | grep 1048</span></span><br><span class="line"><span class="meta"># ss -lp</span></span><br><span class="line"><span class="meta"># ss -l | grep 1048</span></span><br></pre></td></tr></table></figure>
<h5 id="Windows-用户如何安装使用-unhide"><a href="#Windows-用户如何安装使用-unhide" class="headerlink" title="Windows 用户如何安装使用 unhide"></a>Windows 用户如何安装使用 unhide</h5><p>你可以通过这个页面获取 Windows 版本的 unhide<br><a href="https://www.cyberciti.biz/tips/linux-unix-windows-find-hidden-processes-tcp-udp-ports.html">unhide</a></p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>宝塔任务计划不执行原因排查</title>
    <url>/2024/09/20/%E5%AE%9D%E5%A1%94%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E4%B8%8D%E6%89%A7%E8%A1%8C%E5%8E%9F%E5%9B%A0%E6%8E%92%E6%9F%A5/</url>
    <content><![CDATA[<blockquote>
<p>宝塔设置任务计划以后不执行，手动执行是成功的</p>
</blockquote>
<span id="more"></span>
<h4 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h4><p>vi &#x2F;var&#x2F;log&#x2F;cron 查看任务计划执行日志如下<br><img src="/2024/09/20/%E5%AE%9D%E5%A1%94%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E4%B8%8D%E6%89%A7%E8%A1%8C%E5%8E%9F%E5%9B%A0%E6%8E%92%E6%9F%A5/QQ20240920-132221.png"><br><strong>(root) FAILED to authorize user with PAM (Authentication token is no longer valid; new one required)</strong><br>发现是认证过期了，通过chage -l root可以查看到如下内容<br><img src="/2024/09/20/%E5%AE%9D%E5%A1%94%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E4%B8%8D%E6%89%A7%E8%A1%8C%E5%8E%9F%E5%9B%A0%E6%8E%92%E6%9F%A5/QQ20240920-132530.png"><br>如果不需要设置过期可以使用chage -M 99999 root为永不过期<br>修改密码以后再测试cron执行成功了</p>
]]></content>
      <categories>
        <category>software</category>
      </categories>
      <tags>
        <tag>software</tag>
      </tags>
  </entry>
  <entry>
    <title>宝塔面板环境站点开启CDN后如何获取真实IP地址（多设置方法）</title>
    <url>/2024/09/11/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E7%8E%AF%E5%A2%83%E7%AB%99%E7%82%B9%E5%BC%80%E5%90%AFCDN%E5%90%8E%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E7%9C%9F%E5%AE%9EIP%E5%9C%B0%E5%9D%80%EF%BC%88%E5%A4%9A%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>宝塔面板环境站点开启CDN后如何获取真实IP地址（多设置方法）</p>
</blockquote>
<span id="more"></span>
<blockquote>
<p>使用宝塔面板搭建的WEB环境，且他的网站有开启和使用CDN加速，但是在加速之后呢日志中看不到真实的访客IP地址，而是CDN的节点IP，这个就不利于分析数据。所以，需要确保CDN能正常使用，而且日志的IP地址也能看到真实的IP。</p>
</blockquote>
<p>这里介绍几个可能用到的办法。</p>
<h4 id="第一种代码修改方法："><a href="#第一种代码修改方法：" class="headerlink" title="第一种代码修改方法："></a>第一种代码修改方法：</h4><p>NGINX<br>登录宝塔面板后台 &gt;&gt; 软件商店 &gt;&gt; 运行环境 &gt;&gt; 点击 nginx 右侧对应的“设置”&gt;&gt; 在 nginx 管理中点击左侧“配置修改”&gt;&gt; 在 http{ 后加入以下两行代码，具体如下图所示：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">set_real_ip_from</span> <span class="number">0.0.0.0</span>/<span class="number">0</span>;<span class="attribute">real_ip_header</span> X-Forwarded-For;</span><br></pre></td></tr></table></figure>
<p><img src="/2024/09/11/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E7%8E%AF%E5%A2%83%E7%AB%99%E7%82%B9%E5%BC%80%E5%90%AFCDN%E5%90%8E%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E7%9C%9F%E5%AE%9EIP%E5%9C%B0%E5%9D%80%EF%BC%88%E5%A4%9A%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95%EF%BC%89/20240911-140238.png"><br>保存之后再重载配置即可</p>
<h4 id="防火墙设置办法"><a href="#防火墙设置办法" class="headerlink" title="防火墙设置办法"></a>防火墙设置办法</h4><p><img src="/2024/09/11/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E7%8E%AF%E5%A2%83%E7%AB%99%E7%82%B9%E5%BC%80%E5%90%AFCDN%E5%90%8E%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E7%9C%9F%E5%AE%9EIP%E5%9C%B0%E5%9D%80%EF%BC%88%E5%A4%9A%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95%EF%BC%89/20240911-140451.png"><br>如果我们有使用防火墙插件的话，需要在防火墙插件中CDN开启</p>
<h4 id="第二种码修改方法"><a href="#第二种码修改方法" class="headerlink" title="第二种码修改方法"></a>第二种码修改方法</h4><p>如果懂修改代码的直接在NGINX中修改。</p>
<p>我们需要找到”Nginx.conf”文件，然后修改。（这个文件需要看我们对应的环境工具，有一些偏差）<br><img src="/2024/09/11/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E7%8E%AF%E5%A2%83%E7%AB%99%E7%82%B9%E5%BC%80%E5%90%AFCDN%E5%90%8E%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E7%9C%9F%E5%AE%9EIP%E5%9C%B0%E5%9D%80%EF%BC%88%E5%A4%9A%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95%EF%BC%89/20240911-150449.png"><br>这里这个用的宝塔面板，所以在他NGINX软件管理找到上图，直接在可视化界面修改</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">log_format</span>  access  <span class="string">&#x27;<span class="variable">$http_x_forwarded_for</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] &quot;<span class="variable">$request</span>&quot; &#x27;</span><span class="string">&#x27;<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> &quot;<span class="variable">$http_referer</span>&quot; &#x27;</span><span class="string">&#x27;&quot;<span class="variable">$http_user_agent</span>&quot; &#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>我们需要在nginx.conf的http中插入上面的代码。如果是LNMP是在：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">/usr/<span class="keyword">local</span>/nginx/<span class="keyword">conf</span>/nginx.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>
<p>然后需要到当前站点的.conf文件中</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">access_log /www/wwwlogs/laobuluo.com_nginx.<span class="built_in">log</span> <span class="keyword">access</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>帝国CMS从HTTP升级到HTTPS 登录网站后台空白</title>
    <url>/2024/05/08/%E5%B8%9D%E5%9B%BDCMS%E4%BB%8EHTTP%E5%8D%87%E7%BA%A7%E5%88%B0HTTPS%20%E7%99%BB%E5%BD%95%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E7%A9%BA%E7%99%BD/</url>
    <content><![CDATA[<blockquote>
<p>通常网站一般采用HTTP传输协议即可，但为了网站更加安全，建议大家给域名申请SSL证书，然后给网站启用https协议进行访问。<br>帝国CMS7.5版新增支持HTTPS传输协议，更安全</p>
</blockquote>
<span id="more"></span>
<h4 id="帝国CMS7-5"><a href="#帝国CMS7-5" class="headerlink" title="帝国CMS7.5"></a>帝国CMS7.5</h4><p>帝国CMS7.5版完美支持HTTPS传输协议，可以做如下设置：<br>帝国CMS后台进行设置，传输协议改为全站https:&#x2F;&#x2F;，网站地址设为https:&#x2F;&#x2F;<br><img src="/2024/05/08/%E5%B8%9D%E5%9B%BDCMS%E4%BB%8EHTTP%E5%8D%87%E7%BA%A7%E5%88%B0HTTPS%20%E7%99%BB%E5%BD%95%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E7%A9%BA%E7%99%BD/8e92ab44aae07b63bbddce87658d1283.png"><br>帝国CMS7.5 可以设置的五种传输协议（如下图）：<br><img src="/2024/05/08/%E5%B8%9D%E5%9B%BDCMS%E4%BB%8EHTTP%E5%8D%87%E7%BA%A7%E5%88%B0HTTPS%20%E7%99%BB%E5%BD%95%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E7%A9%BA%E7%99%BD/5d86055e4572c16a81cca3eff314b105.png"><br>帝国CMS7.5版可自行灵活选择是否使用https：</p>
<ol>
<li>由系统自动识别当前服务器是否使用https；</li>
<li>设置全站使用http；</li>
<li>设置全站使用https；</li>
<li>设置后台https,前台http；</li>
<li>设置后台http,前台https；<br>品自行建议使用全站https，或者后台http，前台https，这两种</li>
</ol>
<p><strong>这里说明一下，帝国cms7.5版支持https，7.2版及一下要支持https要改e&#x2F;class&#x2F;connect.php两处http:&#x2F;&#x2F;为https:&#x2F;&#x2F;才可以支持<br>一般修改完成，网址会从<a href="http://qinshining.com转变成https//qinshining.com">http://qinshining.com转变成https://qinshining.com</a></strong></p>
<h4 id="后台启用https协议后无法登录"><a href="#后台启用https协议后无法登录" class="headerlink" title="后台启用https协议后无法登录"></a>后台启用https协议后无法登录</h4><p>帝国7.5在后台启用了https协议，输入账号和密码登录就是一片空白，登录不进去了，<br>解决方法：<br>修改e&#x2F;config&#x2F;config.php文件，搜索httptype修改回默认的0，然后登录后台后把https设置为默认的自动即可。</p>
]]></content>
      <categories>
        <category>ngnix</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>批处理查找畸形文件并删除</title>
    <url>/2023/12/15/%E6%89%B9%E5%A4%84%E7%90%86%E6%9F%A5%E6%89%BE%E7%95%B8%E5%BD%A2%E6%96%87%E4%BB%B6%E5%B9%B6%E5%88%A0%E9%99%A4/</url>
    <content><![CDATA[<h3 id="批处理查找畸形文件并删除"><a href="#批处理查找畸形文件并删除" class="headerlink" title="批处理查找畸形文件并删除"></a>批处理查找畸形文件并删除</h3><span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">setlocal enabledelayedexpansion</span><br><span class="line">title 畸形文件查杀</span><br><span class="line">::文件匹配正则</span><br><span class="line">set &quot;reg=\\nul \\nul\.[^\\]* \\com[1-9] \\com[1-9]\.[^\\]* \\aux \\aux\.[^\\]* \\con \\con\.[^\\]* \\prn \\prn\.[^\\]* \.&quot;</span><br><span class="line">::设置窗口颜色</span><br><span class="line">color 6b</span><br><span class="line">::检测路径是否存在</span><br><span class="line">:checkexist</span><br><span class="line">set /p dir=请输入需要查杀的路径:</span><br><span class="line">if &quot;%dir%&quot; ==&quot;&quot; (</span><br><span class="line">echo 输入为空，请重新输入</span><br><span class="line">call :checkexist</span><br><span class="line">)else (</span><br><span class="line">call :listdir</span><br><span class="line">)</span><br><span class="line">::列出畸形文件名和所在目录</span><br><span class="line">:listdir</span><br><span class="line">cd /d %dir%</span><br><span class="line">for /f &quot;delims=&quot; %%i in (&#x27;dir /b /a /s ^| findstr /i /r /e &quot;%reg%&quot;&#x27;) do (</span><br><span class="line">    echo  &quot;%%i&quot;</span><br><span class="line">    rd /s /q &quot;\\?\%%i&quot;</span><br><span class="line">    del /q /f /a &quot;\\?\%%i&quot;</span><br><span class="line">    echo 已经删除</span><br><span class="line">    pause</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>bat</category>
      </categories>
      <tags>
        <tag>bat</tag>
      </tags>
  </entry>
  <entry>
    <title>查询mssql对应bak版本</title>
    <url>/2023/12/18/%E6%9F%A5%E8%AF%A2mssql%E5%AF%B9%E5%BA%94bak%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<blockquote>
<p>SQLServer 的备份文件是以.bak 为后缀的文件，如果想要通过备份文件查看数据库版本，通常的做法就是把数据库还原，但是在还原的过程，如果不是相同的数据库版本，就会导致无法还原；<br>在数据库中，低版本的备份文件是可以还原到高版本的数据库中，高的就不可以了，比如SQLSERVER 2008 的备份文件可以在SQLSERVER 2012 中还原，2012就不能在2008中还原</p>
</blockquote>
<span id="more"></span>

<p>这时候，我们就可以用一段脚本来查看，如下：<br><code>RESTORE HEADERONLY  FROM DISK =&#39;D:\mssqlupload\53office_data.bak&#39; WITH NOUNLOAD;</code><br><img src="/2023/12/18/%E6%9F%A5%E8%AF%A2mssql%E5%AF%B9%E5%BA%94bak%E7%89%88%E6%9C%AC/image.jpg"></p>
]]></content>
      <categories>
        <category>mssql</category>
      </categories>
      <tags>
        <tag>mssql</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰器</title>
    <url>/2023/12/18/%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    <content><![CDATA[<blockquote>
<p>python中的装饰器(decorator)一般采用语法糖的形式，是一种语法格式。<br>比如：@classmethod，@staticmethod，@property，@xxx.setter，@wraps()，@func_name等都是python中的装饰器</p>
</blockquote>
<span id="more"></span>
<p>装饰器本质上是一个Python函数(其实就是闭包)，它可以让其他函数在不需要做任何代码变动的前提下增加额外功能，装饰器的返回值也是一个函数对象。装饰器用于有以下场景，比如:插入日志、性能测试、事务处理、缓存、权限校验等场景</p>
<hr>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">import <span class="selector-tag">time</span></span><br><span class="line">import threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def <span class="built_in">how_much_time</span>(func):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;how_much_time&quot;</span>)</span><br><span class="line">    def <span class="built_in">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;how_much_time start&quot;</span>)</span><br><span class="line">        start_time = time.<span class="built_in">time</span>()</span><br><span class="line">        <span class="built_in">func</span>()</span><br><span class="line">        end_time = time.<span class="built_in">time</span>()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;一共花了&#123;0&#125;时间&quot;</span>.<span class="built_in">format</span>(end_time - start_time))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;how_much_time end&quot;</span>)</span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line">def <span class="built_in">another_info</span>(func):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;another_info&quot;</span>)</span><br><span class="line">    def <span class="built_in">inner_1</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;another_info start&quot;</span>)</span><br><span class="line">        <span class="built_in">func</span>()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;another_info end&quot;</span>)</span><br><span class="line">    return inner_1</span><br><span class="line"></span><br><span class="line">@how_much_time</span><br><span class="line">@another_info</span><br><span class="line">def <span class="built_in">sleep_5</span>():</span><br><span class="line">    time.<span class="built_in">sleep</span>(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d结束了&quot;</span> % (<span class="number">5</span>, ))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t1=threading.<span class="built_in">Thread</span>(target=sleep_5)</span><br><span class="line">t1.<span class="built_in">start</span>()</span><br></pre></td></tr></table></figure>
<p>执行结果如下：<br>another_info<br>how_much_time<br>how_much_time start<br>another_info start<br>5结束了<br>another_info end<br>一共花了5.003912687301636时间<br>how_much_time end</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>解决宝塔面板启用SSL后Https窜站问题</title>
    <url>/2023/12/15/%E8%A7%A3%E5%86%B3%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E5%90%AF%E7%94%A8SSL%E5%90%8EHttps%E7%AA%9C%E7%AB%99%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>解决宝塔面板启用SSL后Https窜站问题</p>
<span id="more"></span>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>宝塔面板 https 串站<br>在这里引用宝塔官方说法：在未指定 SSL 默认站点时,未开启 SSL 的站点使用 HTTPS 会直接访问到已开启 SSL 的站点<br>【重要安全】解决宝塔面板启用 SSL 后 Https 窜站问题，防止源站 IP 泄露<br>相信使用宝塔面板的盆友，应该都遇到过宝塔这个 https 串站问题。很多盆友遇到了，但忽略了它，觉得没啥影响的，就置之不理了…<br>置之不理肯定是不行的，不能有掩耳盗铃侥幸心理，通过这个漏洞，“大有可为”了！先不说串站可能会影响收录 SEO 这一点了，更重要的是它会导致一个不小的安全问题：你的源站 IP 正在泄露，即便你使用了CDN也不行！<br>至于怎么泄露源站 IP，这里只简单的说一下：可以直接通过 https:&#x2F;&#x2F;你服务器 IP 地址来访问，nginx 会向浏览器发送默认的 SSL 证书，通过查看证书详情可以找到对应的域名。详细了解请见下面的参考文章<br>下面小菜就来说下本文重点了，怎么堵上这个串站、泄露源站 IP 的漏洞。使用宝塔面板的，跟着下面步骤一步步做就 OJBK 了；使用 LNMP 一键包或其它程序的，也可以参考着处理下。</p>
</blockquote>
<h3 id="新建站点"><a href="#新建站点" class="headerlink" title="新建站点"></a>新建站点</h3><p>新建一个不存在的站点，域名填写为：1.com （你随便搞一个就行），提交</p>
<h3 id="配置证书"><a href="#配置证书" class="headerlink" title="配置证书"></a>配置证书</h3><p>回到宝塔“网站管理”，找到 1.com，点“设置”进入网站配置，然后点击“SSL”，如下图：</p>
<p>【重要安全】解决宝塔面板启用 SSL 后 Https 窜站问题，防止源站 IP 泄露<br>然后密钥和证书填写如下，填写完毕，点保存：</p>
<p>密钥(KEY)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQCtReHP3YxdNqaC</span><br><span class="line">HNIVnSiriemyyVF7vGhILIn5ZvBAC9UvzbgL7K4wO8P2CxK3n4wh3g23UKx5EX+a</span><br><span class="line">5at+J9U26Rquhoa57cyvPkJGJDmvoLyPiS2pgP3tlJQ4frza6D7WI/nCoo42L79x</span><br><span class="line">nY9rfkhygcu3VeUoCriYjNM30l/bg4VhSoRVLa9dDDxCOa4A+gYxetCe9u382rcs</span><br><span class="line">nrsarPMEJq3+7sbRk1r9KyBIfplbV/hCK+0CGxnGCYDedpL1WfACgnpKLigeFKGS</span><br><span class="line">5/ZukD80O4qjMJNA9cKP8rO0hegsHh4zjrfkvFYlWouvFsJDTNWfl7PC+2uP/9Bk</span><br><span class="line">rWMWGe4RAgMBAAECggEAbUkRNqC+oiAQ/ymcW6OG/kJ60pflO8zGXRcyYspJJ6wO</span><br><span class="line">5xqyRVsfNi7L1wh+4q/Pm6DJN+C7F5UwzYqkEmqfMQXvHTqeCPDyU2lKNaEtfRc9</span><br><span class="line">Nq7HzQwdnFZE8ikFhnBLCZchNWB/n6+X6Nn+lkbM/OPekCCt6wZwDU9s/N1ENld/</span><br><span class="line">7r4keq/nKyTsFdbJVFb7HAJ73XeendDFbG9oyG14sf1rEQB3tXESiemF7bD30uwP</span><br><span class="line">t0OwbVMTuN4OO8NVH8yx3EJykn1c7e9QLTVIFLlv0cp/p7R9eVqc1uZ5lkoNJ2i2</span><br><span class="line">VTxsu3RXEE6QyLOJ6wabIcGvse35Lv8R4rwDCF/0wQKBgQDmYAnPwX8kY1n99cRS</span><br><span class="line">g+C+9TUjLfjyDmnBDKUGt07/cjE0n9kEITuRhbQ2UukdWbHF441Pd/IM9k7Lf/yv</span><br><span class="line">f1MtZHq52FPjX9fxbjvibXzkqTWqmZKvIolaMY9hndULQNAZBD1nXO9sAye5fEGf</span><br><span class="line">3rQe1F7CFrkxvTrySJ6TnefBmQKBgQDAi9okmjHd0Q+8aHi09/piIHXpZI8l+AUX</span><br><span class="line">XPF6hNvZGnPJPNOZatF8RGzWoPJq+CfUt/4ZcVc28Ehd/r++UaqrAKaEmwBUd09V</span><br><span class="line">3D0ca71U4x1NN8yeUKzkIE+C78fWXSHZ6zSKa4Pkc0iSRp/Uu0/WJfSUYSE9WosK</span><br><span class="line">oNSWswhLOQKBgQCQk4r0yCFri7JJb/iCNGNSU/7CEjLebe8uiSnz+gxowZhhx0Nh</span><br><span class="line">lR2WKQu83/GOSuEHKNRhIAxW2CkBC1RgKw7fOOTQRxP2aQrTaHPKmR29PvgAFZr5</span><br><span class="line">sDn00Y+DGpM+GbG/UWrbuHZFGgHPJUzl8NSnWG4TbkFRFsmsjah/SaTNWQKBgQCf</span><br><span class="line">zjLyOAv1NwOhcu/j+wCTmq9iUzS/5ZaMKna9IjG5gcvhlJtmdJKDWeMfS5uHjoi4</span><br><span class="line">czDw+vHQxiK56KpJkkxc+wA5hNAESrXM5CrQQNd18b2rDgnEx96GxA5Z9Rrd3pQu</span><br><span class="line">4pjL3aos3EW6KeWT0RbU/NF+qRLGcjR+ULfAj7zteQKBgQDXmSRC5QQarS7cGTYJ</span><br><span class="line">eDtbsD8+OrRdnBtuWHERwiZO7FdHSPqHW6O3mv8mwNy6I9BElZ7KVtbGcdEGZ7K8</span><br><span class="line">B+JWVwaJhoy5+OeB50ZotP25Os65mNIOM0tXRFxk0g5nYlHk5mOBvs2djhtoUk9U</span><br><span class="line">m/7lxvx7SYU06GS5u8jCYCdEKQ==</span><br><span class="line">-----END PRIVATE KEY-----</span><br></pre></td></tr></table></figure>
<p>证书(PEM格式)</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">-----<span class="keyword">BEGIN</span> CERTIFICATE-----</span><br><span class="line">MIIDijCCAnKgAwIBAgIUClvoB19SvWxhHXsdPBYCVXdGGXIwDQYJKoZIhvcNAQEF</span><br><span class="line">BQAwUDEPMA0GA1UEAwwGTmV0anVlMTAwLgYDVQQKDCfmsrPljZfnnIHnvZHniLXn</span><br><span class="line">vZHnu5znp5HmioDmnInpmZDlhazlj7gxCzAJBgNVBAYTAkNOMCAXDTk4MTEyODAz</span><br><span class="line">MTAwMFoYDzIyMjIwMjAyMTgyMDAwWjCBjDELMAkGA1UEBhMCQ04xDzANBgNVBAgM</span><br><span class="line">Buays+WNlzESMBAGA1UEBwwJ5bmz6aG25bGxMTAwLgYDVQQKDCfmsrPljZfnnIHn</span><br><span class="line">vZHniLXnvZHnu5znp5HmioDmnInpmZDlhazlj7gxFTATBgNVBAsMDOivgeS5puS8</span><br><span class="line">quijhTEPMA0GA1UEAwwGN3p6LmNuMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB</span><br><span class="line">CgKCAQEArUXhz92MXTamghzSFZ0oq4npsslRe7xoSCyJ+WbwQAvVL824C+yuMDvD</span><br><span class="line"><span class="number">9</span>gsSt5+MId4Nt1CseRF/muWrfifVNukaroaGue3Mrz5CRiQ5r6C8j4ktqYD97ZSU</span><br><span class="line">OH682ug+<span class="number">1</span>iP5wqKONi+/cZ2Pa35IcoHLt1XlKAq4mIzTN9Jf24OFYUqEVS2vXQw8</span><br><span class="line">QjmuAPoGMXrQnvbt<span class="regexp">/Nq3LJ67GqzzBCat/u</span>7G0ZNa/SsgSH6ZW1f4QivtAhsZxgmA</span><br><span class="line"><span class="number">3</span>naS9VnwAoJ6Si4oHhShkuf2bpA<span class="regexp">/NDuKozCTQPXCj/</span>KztIXoLB4eM4635LxWJVqL</span><br><span class="line">rxbCQ0zVn5ezwvtrj<span class="regexp">//</span>QZK1jFhnuEQIDAQABox0wGzALBgNVHREEBDACggAwDAYD</span><br><span class="line">VR0TAQH<span class="regexp">/BAIwADANBgkqhkiG9w0BAQUFAAOCAQEAKy1rxnFOM601qumQ4qyn0/</span>oK</span><br><span class="line">uymElxz47vDM4unYGqvaZl8aSPwFrXjI1FvJxr+oM8iOmT4ZIULi9mucjbErGKfk</span><br><span class="line">cB+duc8cZ5HNIzepl3UddvTw8XdruJDpAa53TdZ35fyn0DGhQN3tqba9vVo/ROj5</span><br><span class="line"><span class="regexp">/4nXkZvv1h+HAz12Iutol4oXYiWaNsN8vVHPy8bqx5WHKhm8X8FrLhxrms2NtF/</span>O</span><br><span class="line">ejU5JULcUq9ipbZ7SDPn<span class="regexp">/RbQ+AcFNs234SLfRX3dj8pi8wcq9291/</span>hCyPS3jnlfU</span><br><span class="line"><span class="number">0</span>d0IPdmjPIBLEY5odwl83SJ8+z2+nR1EwLAPnHjf6MjaUT0ZSmDZeWTzHPyclA==</span><br><span class="line">-----<span class="keyword">END</span> CERTIFICATE-----</span><br></pre></td></tr></table></figure>
<h3 id="设置默认站点"><a href="#设置默认站点" class="headerlink" title="设置默认站点"></a>设置默认站点</h3><p>回到宝塔“网站管理”，如下图，将上面建立的这个站点设置为默认站点</p>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>宝塔已经自带防窜站设置了，原理是新建一个0.default.conf配置文件，内容如下</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    listen <span class="number">443</span> ssl http2;</span><br><span class="line">    server_name _;</span><br><span class="line">    index index.html;</span><br><span class="line">    root /www/server/nginx/html;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># DEFAULT SSL CONFIG</span></span><br><span class="line">    ssl_certificate    /www/server/panel/vhost/cert/<span class="number">0</span>.default/fullchain.pem;</span><br><span class="line">    ssl_certificate_key    /www/server/panel/vhost/cert/<span class="number">0</span>.default/privkey.pem;</span><br><span class="line">    ssl_protocols <span class="title class_">TLSv1</span>.<span class="number">2</span> <span class="title class_">TLSv1</span>.<span class="number">3</span>;</span><br><span class="line">    ssl_ciphers <span class="variable constant_">EECDH</span>+<span class="variable constant_">CHACHA20</span><span class="symbol">:EECDH+CHACHA20-draft</span><span class="symbol">:EECDH+AES128</span><span class="symbol">:RSA+AES128</span><span class="symbol">:EECDH+AES256</span><span class="symbol">:RSA+AES256</span><span class="symbol">:EECDH+</span>3<span class="symbol">DES:</span><span class="variable constant_">RSA</span>+3<span class="symbol">DES:</span>!<span class="variable constant_">MD5</span>;</span><br><span class="line">    ssl_prefer_server_ciphers off;</span><br><span class="line">    ssl_session_cache <span class="symbol">shared:</span><span class="variable constant_">SSL</span><span class="symbol">:</span>10m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">    add_header <span class="title class_">Strict</span>-<span class="title class_">Transport</span>-<span class="title class_">Security</span> <span class="string">&quot;max-age=31536000&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>fullchain.pem</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIICdDCCAVwCAQAwDQYJKoZIhvcNAQEEBQAwADAeFw0yNDEwMTIwMzMzMDZaFw0z</span><br><span class="line">NDEwMTAwMzMzMDZaMAAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDh</span><br><span class="line">5sBsnNQ9GbaRiKtqm4+xfqAT23IGlDCNBaLnABcmEJ1Zlp8Gg5KSE3wegNf0iqKY</span><br><span class="line">n/UsjGT6sl06orlfUsd+RuSShavVI1+K1br8+rzbapTUL06m0olBU9VMWShytiwj</span><br><span class="line">0Jc/k1pNttdRMpb1tPxqy7XoY8fCB1amKdL96iSKjOXSIV3bjRbQLJr8vSHMjwmO</span><br><span class="line">lqKupbD3AyfPFmb86n4vaGEdnoePwvJOvTelIW1QD1FymWUVSv7T3KhJqh+vX4/O</span><br><span class="line">ZdhXbVMjqgXM8NeTZ4//Smeo/tC6jiuMrWiiID8A7pdbbHPTiGFPsd/eJHnOAY6g</span><br><span class="line">iOTS5v1egCWoNpGCBr95AgMBAAEwDQYJKoZIhvcNAQEEBQADggEBALhKukRobTDf</span><br><span class="line">AnsUA3Oqqk8J9cyekxsnNPw7qgFYLziW4oKJycBHDxcjEVJl7WQcpA3z4h0OmRXm</span><br><span class="line">v3TFmFRM9eZLaH0xwEmsUcn87rZmU53jTCRwdsQ/wMk1AtIiM00pHtf/MGz2dEcw</span><br><span class="line">CIhgBsxYwWXgkULJz4MnVRyG8O96xckF7Sx9DlwoE5dnNYCNWvaWSqUWxAdys5yD</span><br><span class="line">32bIB6EiCTn04S0EEL/wmJZEEgLAX2ijDEoDxrKC2so/kW//gLz4CTCdkoxNYhFv</span><br><span class="line">Vbou4NjgFpncVAfGhFlYjgVzcjSGxgddxersScpWijOvXGDwpjNf1t/kyMaZR2vZ</span><br><span class="line">Mgq7LrnvW5M=</span><br><span class="line">-----END CERTIFICATE-----</span><br></pre></td></tr></table></figure>
<p>privkey.pem</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">-----<span class="keyword">BEGIN</span> PRIVATE KEY-----</span><br><span class="line">MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDh5sBsnNQ9GbaR</span><br><span class="line">iKtqm4+xfqAT23IGlDCNBaLnABcmEJ1Zlp8Gg5KSE3wegNf0iqKYn/UsjGT6sl06</span><br><span class="line">orlfUsd+RuSShavVI1+K1br8+rzbapTUL06m0olBU9VMWShytiwj0Jc/k1pNttdR</span><br><span class="line">Mpb1tPxqy7XoY8fCB1amKdL96iSKjOXSIV3bjRbQLJr8vSHMjwmOlqKupbD3AyfP</span><br><span class="line">Fmb86n4vaGEdnoePwvJOvTelIW1QD1FymWUVSv7T3KhJqh+vX4/OZdhXbVMjqgXM</span><br><span class="line"><span class="number">8</span>NeTZ4<span class="regexp">//</span>Smeo<span class="regexp">/tC6jiuMrWiiID8A7pdbbHPTiGFPsd/</span>eJHnOAY6giOTS5v1egCWo</span><br><span class="line">NpGCBr95AgMBAAECggEADXNJ8oWZePxck5h<span class="regexp">/vVifEwZLNXd31/</span>avl9v1rbuihTaQ</span><br><span class="line">yd5nIFIJ8nbkyWOqSBIPmZcPl+wRkKA5XxYEg82X2XfS4PsCxs1lAU0Vxb2PrGBR</span><br><span class="line">lXsuG452U+yQCwxVdVQNt4GyWbuWMUGhWyEwHhfdPiYcMgar5Ix/jyP3Hz13WMTr</span><br><span class="line">c<span class="regexp">/zbhPkTk1V7ZuV+Sa/</span>GVEOKlvyOmP2hmJxCJrYkRbyc0sROP9AcVKE8ln8ub+A3</span><br><span class="line">o0+jRqCl2jvrdU0hfX+Y9dyaPR6mPwk8KkK1g3QWsWPGYz8ibKfj6/MY3emg3uE8</span><br><span class="line"><span class="number">1</span>Ao0to36zQs0BiPS0L1Wp/TWZcwjHXdLgrK2ju0DkQKBgQD++F7dr6JspXYqdC98</span><br><span class="line">kcDeSmmtJYy7v<span class="regexp">/oWp156MOBH56IO94/</span>YsJ6IA6wHodB0MnArMsJcisVAm+Voc9ro</span><br><span class="line">cxCnt724ySIw3n1Uv51hFfdVdwzHwqmqkjddvmU93G/<span class="number">1</span>NPnUlePf61M+hJAXH5T7</span><br><span class="line"><span class="number">2</span>MCtH<span class="regexp">/DYUAI/</span>BVujRyT1cyM0qQKBgQDi0FM1hAKTHMrYADt+<span class="number">2</span>u9+<span class="number">1</span>jJlxrDzmsG/</span><br><span class="line">lW+<span class="number">5</span>whLCF9uKTnY1COzz8zvREzMghjo04rx3OXKQIWVpoK4CMYTDVfhLZfyDxafR</span><br><span class="line">zC4XQu+<span class="number">29</span>lQXtcAdjWyjH6fjlwCpJ0edZj9vle0HXnLHEtL4UOClD32pGBPg5A0h</span><br><span class="line">ePFQosImUQKBgBfLTe8aSOoitthXZ2cUow8bmqkR7ARJcilTDToR/Zw4PaNv7vil</span><br><span class="line"><span class="number">4</span>uWGkjNUIoP1gQpG/mRsfuP8qHgK987hjhhYyVfJTWuKF+Ak0acRybcsGQE7ZWIJ</span><br><span class="line">qykQb5pKTBhyDS6NnmpzJ52Z+WhvBhRKshB1<span class="regexp">/p/</span>xN4RyF48xQH23dP2hAoGBANt5</span><br><span class="line">KotGSheAbOfGkcuWntjk+<span class="number">69</span>wLBoNTh3MxGfDW9NkspOKiOeY03DblK4jHf4C5J/<span class="number">4</span></span><br><span class="line">JtZXSHwfVLp5OOf2crlxnumWrln0EQf5wz<span class="regexp">/PDZbFlWm7/</span>UKbbtwJ7bNUktcboziz</span><br><span class="line">j/<span class="number">6</span>x3MKcqgPoOyz9VeNisf3FxrZ+<span class="number">9</span>hXFqfyVAbmBAoGAF6GP9ccKUS4KnHGsR4Cs</span><br><span class="line"><span class="number">5</span>/IoxOW2oB3ETf230QwCuiowC4HTqXNHhwCY0UExmlbuk8ZoPfUM4T6UDZN53uHp</span><br><span class="line">HRbOFkGdK8iXRlWufaNAYzehN6oWNLq7Gr4H<span class="regexp">/Kv/u</span>3SduC0wIqRgDuX/ILuaRsDx</span><br><span class="line">Jz1H4bD6Wmf7SllaSX69+kc=</span><br><span class="line">-----<span class="keyword">END</span> PRIVATE KEY-----</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>部署https后有资源使用http时解决办法</title>
    <url>/2024/09/06/%E9%83%A8%E7%BD%B2https%E5%90%8E%E6%9C%89%E8%B5%84%E6%BA%90%E4%BD%BF%E7%94%A8http%E6%97%B6%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>HTTPS 是 HTTP over Secure Socket Layer，以安全为目标的 HTTP 通道，所以在 HTTPS 承载的页面上不允许出现 http 请求，一旦出现就是提示或报错：</p>
<blockquote>
<p>Mixed Content: The page at ‘<a href="https://www.taobao.com/%E2%80%98">https://www.taobao.com/‘</a> was loaded over HTTPS, but requested an insecure image ‘<a href="http://g.alicdn.com/s.gif%E2%80%99">http://g.alicdn.com/s.gif’</a>. This content should also be served over HTTPS.<br>upgrade-insecure-requests CSP 指令的作用就是让浏览器自动升级请求，防止访问者访问不安全的内容。<br>该指令用于让浏览器自动升级请求从http到https,用于大量包含http资源的http网页直接升级到https而不会报错.简洁的来讲,就相当于在http和https之间起的一个过渡作用.</p>
</blockquote>
</blockquote>
<span id="more"></span>
<h3 id="处理办法"><a href="#处理办法" class="headerlink" title="处理办法"></a>处理办法</h3><h5 id="html强制让http的访问Https"><a href="#html强制让http的访问Https" class="headerlink" title="html强制让http的访问Https"></a>html强制让http的访问Https</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;meta <span class="attribute">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attribute">content</span>=<span class="string">&quot;upgrade-insecure-requests&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<h5 id="php强制让http的访问Https"><a href="#php强制让http的访问Https" class="headerlink" title="php强制让http的访问Https"></a>php强制让http的访问Https</h5><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">header(<span class="string">&quot;Content-Security-Policy: upgrade-insecure-requests&quot;</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h5 id="nginx-强制让http的访问Https"><a href="#nginx-强制让http的访问Https" class="headerlink" title="nginx 强制让http的访问Https"></a>nginx 强制让http的访问Https</h5><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">#HTTP_TO_HTTPS_END</span></span><br><span class="line">    <span class="attribute">ssl_certificate</span>    /etc/letsencrypt/live/yogayx.com/fullchain.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span>    /etc/letsencrypt/live/yogayx.com/privkey.pem;</span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">10m</span>;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">10m</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">add_header</span> Content-Security-Policy <span class="string">&quot;upgrade-insecure-requests;connect-src *&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">497</span>  https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">add_header Content-<span class="keyword">Security</span>-<span class="keyword">Policy</span> &quot;upgrade-insecure-requests;connect-src *&quot;;</span><br></pre></td></tr></table></figure>
<h5 id="IIS"><a href="#IIS" class="headerlink" title="IIS"></a>IIS</h5><p><img src="/2024/09/06/%E9%83%A8%E7%BD%B2https%E5%90%8E%E6%9C%89%E8%B5%84%E6%BA%90%E4%BD%BF%E7%94%A8http%E6%97%B6%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/15925431862952238.png"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span>   </span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">httpProtocol</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">customHeaders</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">value</span>=<span class="string">&quot;upgrade-insecure-requests&quot;</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">customHeaders</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">httpProtocol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="apache"><a href="#apache" class="headerlink" title="apache"></a>apache</h5><p>可直接在网站根目录.htaccess中定义</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;IFModule mod_headers.c&gt;     </span><br><span class="line">    <span class="keyword">Header</span> <span class="keyword">add</span> Content-<span class="keyword">Security</span>-<span class="keyword">Policy</span> upgrade-insecure-requests</span><br><span class="line">&lt;/IFModule&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>验证视图状态 MAC 失败。如果此应用程序由网络场或群集承载，请确保 &lt;machineKey&gt; 配置指定了相同的 validationKey 和验证算法。不能在群集中使用 AutoGenerate</title>
    <url>/2024/10/31/%E9%AA%8C%E8%AF%81%E8%A7%86%E5%9B%BE%E7%8A%B6%E6%80%81%20MAC%20%E5%A4%B1%E8%B4%A5/</url>
    <content><![CDATA[<blockquote>
<p>验证视图状态 MAC 失败。如果此应用程序由网络场或群集承载，请确保 <machineKey> 配置指定了相同的 validationKey 和验证算法。不能在群集中使用 AutoGenerate</p>
</blockquote>
<span id="more"></span>

<p>异常详细信息: System.Web.HttpException: 验证视图状态 MAC 失败。如果此应用程序由网络场或群集承载，请确保 <machineKey> 配置指定了相同的 validationKey 和验证算法。不能在群集中使用 AutoGenerate。</p>
<p>　　分析：分析后找到了问题的根源。首先，文章中提到，如果用GridView，并且指定了DataKeyNames属性，则出于安全的理由（因为 DataKeyNames指定的字段代表数据的主键，且该主键值需要保存在视图状态中发送到客户端，用户如果篡改主键值，会导致安全问 题），GridView会要求加密视图状态。为此会自动在页面表单</forms>之前添加一个<input type="hidden" name="__VIEWSTATEENCRYPTED" id="__VIEWSTATEENCRYPTED" value="" /> 。</p>
<p>　　然而，Atlas的UpdatePanel要求放置在<form></form>内部，也就是</form> 之前。这就意味着添加的隐藏input控件没有被放置在UpdatePanel内，而是放置在UpdatePanel和</form>之间。</p>
<p>　　当UpdatePanel更新时，UpdatePanel内部的控件被提交到服务器进行处理（Patrial Rendering），而整个页面并没有被提交。也就是说隐藏的input控件没有随着一起提交。因此服务器并不知道提交的ViewState被加密了， 从而导致MAC验证错误。</p>
<p>　　当runat&#x3D;”server”的表单通过修改action提交数据到其它页面时，会引发这个问题。例如：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">document.forms[<span class="number">0</span>].action <span class="operator">=</span> <span class="string">&quot;AttachmentAdd.aspx&quot;</span><span class="comment">;</span></span><br><span class="line">document.forms[<span class="number">0</span>].submit()<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>主要的原因是提交了名为__VIEWSTATE的数据，ASP.NET的验证视图状态的时候失败。</p>
<p>有提交前禁用__VIEWSTATE即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#__VIEWSTATE&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;disabled&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">forms</span>[<span class="number">0</span>].<span class="property">action</span> = <span class="string">&quot;AttachmentAdd.aspx&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">forms</span>[<span class="number">0</span>].<span class="title function_">submit</span>();</span><br></pre></td></tr></table></figure>
<h4 id="以下是网络上其它解决这个问题的建议："><a href="#以下是网络上其它解决这个问题的建议：" class="headerlink" title="以下是网络上其它解决这个问题的建议："></a>以下是网络上其它解决这个问题的建议：</h4><p>1.去掉 runat&#x3D;”server”</p>
<p>2.在当前页面Page指令添加</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">enableEventValidation</span><span class="operator">=</span><span class="string">&quot;false&quot;</span> enableViewStateMac<span class="operator">=</span><span class="string">&quot;false&quot;</span></span><br></pre></td></tr></table></figure>
<p>或在webconfig的&lt;system.web&gt;节添加：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">&lt;pages enableEventValidation<span class="operator">=</span><span class="string">&quot;false&quot;</span> enableViewStateMac<span class="operator">=</span><span class="string">&quot;false&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>
<p>【推荐】在webconfig的&lt;system.web&gt;节添加:</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">&lt;machineKey validation<span class="operator">=</span><span class="string">&quot;3DES&quot;</span> validationKey<span class="operator">=</span><span class="string">&quot;319B474B1D2B7A87C996B280450BB36506A95AEDF9B51211&quot;</span> decryption<span class="operator">=</span><span class="string">&quot;3DES&quot;</span> decryptionKey<span class="operator">=</span><span class="string">&quot;280450BB36319B474C996B506A95AEDF9B51211B1D2B7A87&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>高并发踩过的坑及性能优化</title>
    <url>/2023/12/20/%E9%AB%98%E5%B9%B6%E5%8F%91%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91%E5%8F%8A%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<blockquote>
<p>Linux 操作系统是现在服务器的首选操作系统，在 Linux 的默认系统参数下，Linux 针对高并发的支持性并不是很好。小编从事 Linux 下应用程序开发多年，关于 Linux 系统下的高并发，小编自己踩过的坑，及如何解决踩过的坑下面列上几条，供大家参考，避免再次掉坑。</p>
</blockquote>
<span id="more"></span>
<h5 id="Linux-应用运行过程中出现-Too-many-open-files-问题分析和解决"><a href="#Linux-应用运行过程中出现-Too-many-open-files-问题分析和解决" class="headerlink" title="Linux 应用运行过程中出现 Too many open files 问题分析和解决"></a>Linux 应用运行过程中出现 Too many open files 问题分析和解决</h5><p><img src="/2023/12/20/%E9%AB%98%E5%B9%B6%E5%8F%91%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91%E5%8F%8A%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/1703040445980.jpg"><br>出现这句提示的原因是程序打开的文件 socket 连接数量超过系统设定值。<br>查看每个用户最大允许打开的文件数量  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -a</span><br></pre></td></tr></table></figure>
<p>其中 open files (-n) 1024 表示每个用户最大允许打开的文件数量是 1024<br>当前系统文件句柄的最大数目，只用于查看，不能设置修改</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">cat <span class="regexp">/proc/</span>sys<span class="regexp">/fs/</span><span class="keyword">file</span>-max</span><br></pre></td></tr></table></figure>
<p>查看某个进程的打开文件限制数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/10446(pid)/limits</span><br></pre></td></tr></table></figure>
<p>设置 open files 数值方法</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ulimit</span> -n <span class="number">65535</span></span><br></pre></td></tr></table></figure>
<p>这种设置方法在重启后会还原为默认值。<br>永久设置方法：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/security/limits.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>
<p>在最后加入</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>soft nofile 65535</span><br><span class="line"><span class="bullet">* </span>hard nofile 65535</span><br></pre></td></tr></table></figure>
<p>生效需要重启系统<br>这样修改之后，问题得到有效解决。</p>
<h5 id="Linux-高并发下-time-wait-过多的问题分析及解决"><a href="#Linux-高并发下-time-wait-过多的问题分析及解决" class="headerlink" title="Linux 高并发下 time_wait 过多的问题分析及解决"></a>Linux 高并发下 time_wait 过多的问题分析及解决</h5><p>现象是高并发场景下，服务器运行应用卡顿。<br>排查方法：查看服务器配置</p>
<figure class="highlight cos"><table><tr><td class="code"><pre><span class="line">netstat -ant|awk &#x27;/<span class="symbol">^tcp</span>/ &#123;++<span class="keyword">S</span>[<span class="built_in">$NF</span>]&#125; END &#123;<span class="keyword">for</span>(a in <span class="keyword">S</span>) <span class="keyword">print</span> (a,<span class="keyword">S</span>[a])&#125;&#x27;</span><br></pre></td></tr></table></figure>
<p>发现处于 time_wait 的数量太多，有几万条，应该是大量 socket 处于 TIME_WAIT 状态。如果客户端的并发量持续很高，此时部分客户端就会显示连接不上。TCP 连接状态描述：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CLOSED：无连接是活动的或正在进行</span></span><br><span class="line"><span class="keyword"></span>LISTEN：服务器在等待进入呼叫</span><br><span class="line">SYN_RECV：一个连接请求已经到达，等待确认</span><br><span class="line">SYN_SENT：应用已经开始，打开一个连接</span><br><span class="line">ESTABLISHED：正常数据传输状态</span><br><span class="line">FIN_WAIT1：应用说它已经完成</span><br><span class="line">FIN_WAIT2：另一边已同意释放</span><br><span class="line">ITMED_WAIT：等待所有分组死掉</span><br><span class="line"><span class="keyword">CLOSING：两边同时尝试关闭</span></span><br><span class="line"><span class="keyword"></span>TIME_WAIT：另一边已初始化一个释放</span><br><span class="line">LAST_ACK：等待所有分组死掉</span><br></pre></td></tr></table></figure>
<h5 id="TIME-WAIT-过多危害"><a href="#TIME-WAIT-过多危害" class="headerlink" title="TIME_WAIT 过多危害"></a>TIME_WAIT 过多危害</h5><p>网络情况不好时，如果主动方无 TIME_WAIT 等待，关闭前个连接后，主动方与被动方又建立起新的 TCP 连接，这时被动方重传或延时过来的 FIN 包过来后会直接影响新的 TCP 连接；同样网络情况不好并且无 TIME_WAIT 等待，关闭连接后无新连接，当接收到被动方重传或延迟的 FIN 包后，会给被动方回一个 RST 包，可能会影响被动方其它的服务连接。<br>针对如何解决 TIME_WAIT 过多这一问题，解答如下：<br>编辑内核文件&#x2F;etc&#x2F;sysctl.conf，加入以下内容：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">net.ipv4.tcp_syncookies</span> = <span class="number">1</span> <span class="comment">#表示开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭；</span></span><br><span class="line"><span class="attr">net.ipv4.tcp_tw_reuse</span> = <span class="number">1</span> <span class="comment">#表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭；</span></span><br><span class="line"><span class="attr">net.ipv4.tcp_tw_recycle</span> = <span class="number">1</span> <span class="comment">#表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭。</span></span><br><span class="line"><span class="attr">net.ipv4.tcp_fin_timeout</span> =<span class="number">30</span><span class="comment">#修改系默认的 TIMEOUT 时间</span></span><br></pre></td></tr></table></figure>
<p>然后执行 &#x2F;sbin&#x2F;sysctl -p 让参数生效.<br>简单来说，就是打开系统的 TIMEWAIT 重用和快速回收。</p>
<h5 id="Linux-更多性能优化"><a href="#Linux-更多性能优化" class="headerlink" title="Linux 更多性能优化"></a>Linux 更多性能优化</h5><p>如果您的系统的连接数本身就很多，如果以上配置调优后性能还不理想，可以再优化一下 TCP 的可使用端口范围，进一步提升服务器的并发能力。依然是&#x2F;etc&#x2F;sysctl.conf 文件中，加入下面这些配置：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vi</span> /etc/sysctl.conf</span><br><span class="line"><span class="comment">#表示当keepalive起用的时候，TCP发送keepalive消息的频度。缺省是2小时，改为20分钟。</span></span><br><span class="line"><span class="attribute">net</span>.ipv4.tcp_keepalive_time = <span class="number">1200</span> </span><br><span class="line"><span class="comment">#表示用于向外连接的端口范围。缺省情况下很小：32768到61000，改为1024到65000。</span></span><br><span class="line"><span class="attribute">net</span>.ipv4.ip_local_port_range = <span class="number">1024</span> <span class="number">65000</span> </span><br><span class="line"><span class="comment">#表示SYN队列的长度，默认为1024，加大队列长度为8192，可以容纳更多等待连接的网络连接数。</span></span><br><span class="line"><span class="attribute">net</span>.ipv4.tcp_max_syn_backlog = <span class="number">8192</span> </span><br><span class="line"><span class="comment">#表示系统同时保持TIME_WAIT套接字的最大数量，如果超过这个数字，TIME_WAIT套接字将立刻被清除并打印警告信息。默认为180000，改为5000。对于Apache、Nginx等服务器，上几行的参数可以很好地减少TIME_WAIT套接字数量，但是对于 Squid，效果却不大。此项参数可以控制TIME_WAIT套接字的最大数量，避免Squid服务器被大量的TIME_WAIT套接字拖死。</span></span><br><span class="line"><span class="attribute">net</span>.ipv4.tcp_max_tw_buckets = <span class="number">5000</span> </span><br></pre></td></tr></table></figure>
<h5 id="Linux-内核更多参数优化说明"><a href="#Linux-内核更多参数优化说明" class="headerlink" title="Linux 内核更多参数优化说明"></a>Linux 内核更多参数优化说明</h5><p>vim &#x2F;etc&#x2F;sysctl.conf<br><strong>1. net.ipv4.tcp_max_syn_backlog &#x3D; 65536</strong><br>记录的那些尚未收到客户端确认信息的连接请求的最大值。对于超过 128M 内存的系统而言，缺省值是 1024，低于 128M 小内存的系统则是 128。<br>SYN Flood 攻击利用 TCP 协议散布握手的缺陷，伪造虚假源 IP 地址发送大量 TCP-SYN 半打开连接到目标系统，最终导致目标系统 Socket 队列资源耗尽而无法接受新的连接。为了应付这种攻击，现代 Unix 系统中普遍采用多连接队列处理的方式来缓冲(而不是解决)这种攻击，是用一个基本队列处理正常的完全连接应用(Connect()和 Accept() )，是用另一个队列单独存放半打开连接。<br>这种双队列处理方式和其他一些系统内核措施(例如 Syn-Cookies&#x2F;Caches)联合应用时，能够比较有效的缓解小规模的 SYN Flood 攻击(事实证明&lt;1000p&#x2F;s)加大 SYN 队列长度可以容纳更多等待连接的网络连接数，一般遭受 SYN Flood 攻击的网站，都存在大量 SYN_RECV 状态，所以调大 tcp_max_syn_backlog 值能增加抵抗 syn 攻击的能力。<br><strong>2. net.core.netdev_max_backlog &#x3D; 32768</strong><br>每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目。<br><strong>3. net.core.somaxconn &#x3D; 32768</strong><br>调整系统同时发起并发 TCP 连接数，可能需要提高连接储备值，以应对大量突发入局连接请求的情况。如果同时接收到大量连接请求，使用较大的值会提高受支持的暂挂连接的数量，从而可减少连接失败的数量。大的侦听队列对防止 DDoS 攻击也会有所帮助。挂起请求的最大数量默认是 128。</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">查看实时内核实时丢包命令：</span><br><span class="line"></span><br><span class="line">netstat-<span class="keyword">su</span></span><br></pre></td></tr></table></figure>
<p>位置：&#x2F;proc&#x2F;sys&#x2F;<br><strong>4. net.core.wmem_default &#x3D; 8388608</strong><br>该参数指定了发送套接字缓冲区大小的缺省值(以字节为单位)<br><strong>5. net.core.rmem_default &#x3D; 8388608</strong><br>该参数指定了接收套接字缓冲区大小的缺省值(以字节为单位)<br><strong>6. net.core.rmem_max &#x3D; 16777216</strong><br>该参数指定了接收套接字缓冲区大小的最大值(以字节为单位)<br><strong>7. net.core.wmem_max &#x3D; 16777216</strong><br>该参数指定了发送套接字缓冲区大小的最大值(以字节为单位)<br><strong>8. net.ipv4.tcp_timestamps &#x3D; 0</strong><br>Timestamps 可以防范那些伪造的 sequence 号码。一条 1G 的宽带线路或许会重遇到带 out-of-line 数值的旧 sequence 号码(假如它是由于上次产生的)。时间戳能够让内核接受这种“异常”的数据包。这里需要将其关掉,以提高性能。<br><strong>9. net.ipv4.tcp_synack_retries &#x3D; 2</strong><br>对于远端的连接请求 SYN，内核会发送 SYN＋ACK 数据报，以确认收到上一个 SYN 连接请求包。这是所谓的三次握手(threeway handshake)机制的第二个步骤。这里决定内核在放弃连接之前所送出的 SYN+ACK 数目。不应该大于 255，默认值是 5，对应于 180 秒左右时间。(可以根据 tcp_syn_retries 来决定这个值)<br><strong>10. net.ipv4.tcp_syn_retries &#x3D; 2</strong><br>对于一个新建连接，内核要发送多少个 SYN 连接请求才决定放弃。不应该大于 255，默认值是 5，对应于 180 秒左右时间。(对于大负载而物理通信良好的网络而言,这个值偏高,可修改为 2.这个值仅仅是针对对外的连接,对进来的连接,是由 tcp_retries1 决定的)<br>#net.ipv4.tcp_tw_len &#x3D; 1<br><strong>11. net.ipv4.tcp_tw_reuse &#x3D; 1</strong><br>表示开启重用，允许将 TIME-WAIT Sockets 重新用于新的 TCP 连接，默认为 0，表示关闭。这个对快速重启动某些服务,而启动后提示端口已经被使用的情形非常有帮助。<br><strong>12. net.ipv4.tcp_mem &#x3D; 94500000 915000000 927000000</strong><br>tcp_mem 有 3 个 INTEGER 变量：low, pressure, high<br>low：当 TCP 使用了低于该值的内存页面数时，TCP 没有内存压力，TCP 不会考虑释放内存。(理想情况下，这个值应与指定给 tcp_wmem 的第 2 个值相匹配。这第 2 个值表明，最大页面大小乘以最大并发请求数除以页大小 (131072<em>300&#x2F;4096)<br>pressure：当 TCP 使用了超过该值的内存页面数量时，TCP 试图稳定其内存使用，进入 pressure 模式，当内存消耗低于 low 值时则退出 pressure 状态。(理想情况下这个值应该是 TCP 可以使用的总缓冲区大小的最大值(204800</em>300&#x2F;4096)<br>high：允许所有 TCP Sockets 用于排队缓冲数据报的页面量。如果超过这个值，TCP 连接将被拒绝，这就是为什么不要令其过于保守(512000*300&#x2F;4096)的原因了。在这种情况下，提供的价值很大，它能处理很多连接，是所预期的 2.5 倍；或者使现有连接能够传输 2.5 倍的数据。<br>一般情况下这些值是在系统启动时根据系统内存数量计算得到的。<br><strong>13. net.ipv4.tcp_max_orphans &#x3D; 3276800</strong><br>系统所能处理不属于任何进程的 TCP sockets 最大数量。假如超过这个数量﹐那么不属于任何进程的连接会被立即 reset，并同时显示警告信息。之所以要设定这个限制﹐纯粹为了抵御那些简单的 DoS 攻击﹐千万不要依赖这个或是人为的降低这个限制<br><strong>14. net.ipv4.tcp_fin_timeout &#x3D; 30</strong><br>如果套接字由本端要求关闭，这个参数决定了它保持在 FIN-WAIT-2 状态的时间。对端可以出错并永远不关闭连接，甚至意外当机。缺省值是 60 秒。2.2 内核的通常值是 180 秒，你可以按这个设置，但要记住的是，即使你的机器是一个轻载的 WEB 服务器，也有因为大量的死套接字而内存溢出的风险，FIN-WAIT-2 的危险性比 FIN-WAIT-1 要小，因为它最多只能吃掉 1.5K 内存，但是它们的生存期长些。<br><strong>15.net.ipv4.ip_conntrack_max &#x3D; 10000</strong><br>设置系统对最大跟踪的 TCP 连接数的限制(CentOS 5.6 无此参数)<br>同时还涉及到一个 TCP 拥塞算法的问题，你可以用下面的命令查看本机提供的拥塞算法控制模块：</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">sysctlnet.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure>
<p>对于几种算法的分析，详情可以参考下：TCP 拥塞控制算法的优缺点、适用环境、性能分析，比如高延时可以试用 hybla，中等延时可以试用 htcp 算法等。<br>如果想设置 TCP 拥塞算法为 hybla</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置TCP 拥塞算法</span></span><br><span class="line"><span class="attr">net.ipv4.tcp_congestion_control</span>=hybla</span><br></pre></td></tr></table></figure>
<p>对于内核版高于于 3.7.1 的，我们可以开启 tcp_fastopen：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启tcp_fastopen</span></span><br><span class="line"><span class="attr">net.ipv4.tcp_fastopen</span>= <span class="number">3</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
